
XBuddyExtensionDemo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005144  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800539c  0800539c  0000639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053cc  080053cc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080053cc  080053cc  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053cc  080053cc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000063cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053d0  080053d0  000063d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080053d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  080053e0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080053e0  00007178  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011600  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f10  00000000  00000000  00018642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c57  00000000  00000000  0001b560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fa6  00000000  00000000  0001c1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e6f  00000000  00000000  0003d15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d95a7  00000000  00000000  0004dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127573  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  001275b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012bc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08005384 	.word	0x08005384

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08005384 	.word	0x08005384

08000298 <__aeabi_drsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	e002      	b.n	80002a4 <__adddf3>
 800029e:	bf00      	nop

080002a0 <__aeabi_dsub>:
 80002a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a4 <__adddf3>:
 80002a4:	b530      	push	{r4, r5, lr}
 80002a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ae:	ea94 0f05 	teq	r4, r5
 80002b2:	bf08      	it	eq
 80002b4:	ea90 0f02 	teqeq	r0, r2
 80002b8:	bf1f      	itttt	ne
 80002ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ca:	f000 80e2 	beq.w	8000492 <__adddf3+0x1ee>
 80002ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d6:	bfb8      	it	lt
 80002d8:	426d      	neglt	r5, r5
 80002da:	dd0c      	ble.n	80002f6 <__adddf3+0x52>
 80002dc:	442c      	add	r4, r5
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	ea82 0000 	eor.w	r0, r2, r0
 80002ea:	ea83 0101 	eor.w	r1, r3, r1
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	2d36      	cmp	r5, #54	@ 0x36
 80002f8:	bf88      	it	hi
 80002fa:	bd30      	pophi	{r4, r5, pc}
 80002fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000300:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000304:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000308:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800030c:	d002      	beq.n	8000314 <__adddf3+0x70>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000318:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800031c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000320:	d002      	beq.n	8000328 <__adddf3+0x84>
 8000322:	4252      	negs	r2, r2
 8000324:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000328:	ea94 0f05 	teq	r4, r5
 800032c:	f000 80a7 	beq.w	800047e <__adddf3+0x1da>
 8000330:	f1a4 0401 	sub.w	r4, r4, #1
 8000334:	f1d5 0e20 	rsbs	lr, r5, #32
 8000338:	db0d      	blt.n	8000356 <__adddf3+0xb2>
 800033a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033e:	fa22 f205 	lsr.w	r2, r2, r5
 8000342:	1880      	adds	r0, r0, r2
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	fa03 f20e 	lsl.w	r2, r3, lr
 800034c:	1880      	adds	r0, r0, r2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	4159      	adcs	r1, r3
 8000354:	e00e      	b.n	8000374 <__adddf3+0xd0>
 8000356:	f1a5 0520 	sub.w	r5, r5, #32
 800035a:	f10e 0e20 	add.w	lr, lr, #32
 800035e:	2a01      	cmp	r2, #1
 8000360:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000364:	bf28      	it	cs
 8000366:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	18c0      	adds	r0, r0, r3
 8000370:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000374:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000378:	d507      	bpl.n	800038a <__adddf3+0xe6>
 800037a:	f04f 0e00 	mov.w	lr, #0
 800037e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000382:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000386:	eb6e 0101 	sbc.w	r1, lr, r1
 800038a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038e:	d31b      	bcc.n	80003c8 <__adddf3+0x124>
 8000390:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000394:	d30c      	bcc.n	80003b0 <__adddf3+0x10c>
 8000396:	0849      	lsrs	r1, r1, #1
 8000398:	ea5f 0030 	movs.w	r0, r0, rrx
 800039c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a0:	f104 0401 	add.w	r4, r4, #1
 80003a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003ac:	f080 809a 	bcs.w	80004e4 <__adddf3+0x240>
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b4:	bf08      	it	eq
 80003b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ba:	f150 0000 	adcs.w	r0, r0, #0
 80003be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c2:	ea41 0105 	orr.w	r1, r1, r5
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003cc:	4140      	adcs	r0, r0
 80003ce:	eb41 0101 	adc.w	r1, r1, r1
 80003d2:	3c01      	subs	r4, #1
 80003d4:	bf28      	it	cs
 80003d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003da:	d2e9      	bcs.n	80003b0 <__adddf3+0x10c>
 80003dc:	f091 0f00 	teq	r1, #0
 80003e0:	bf04      	itt	eq
 80003e2:	4601      	moveq	r1, r0
 80003e4:	2000      	moveq	r0, #0
 80003e6:	fab1 f381 	clz	r3, r1
 80003ea:	bf08      	it	eq
 80003ec:	3320      	addeq	r3, #32
 80003ee:	f1a3 030b 	sub.w	r3, r3, #11
 80003f2:	f1b3 0220 	subs.w	r2, r3, #32
 80003f6:	da0c      	bge.n	8000412 <__adddf3+0x16e>
 80003f8:	320c      	adds	r2, #12
 80003fa:	dd08      	ble.n	800040e <__adddf3+0x16a>
 80003fc:	f102 0c14 	add.w	ip, r2, #20
 8000400:	f1c2 020c 	rsb	r2, r2, #12
 8000404:	fa01 f00c 	lsl.w	r0, r1, ip
 8000408:	fa21 f102 	lsr.w	r1, r1, r2
 800040c:	e00c      	b.n	8000428 <__adddf3+0x184>
 800040e:	f102 0214 	add.w	r2, r2, #20
 8000412:	bfd8      	it	le
 8000414:	f1c2 0c20 	rsble	ip, r2, #32
 8000418:	fa01 f102 	lsl.w	r1, r1, r2
 800041c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000420:	bfdc      	itt	le
 8000422:	ea41 010c 	orrle.w	r1, r1, ip
 8000426:	4090      	lslle	r0, r2
 8000428:	1ae4      	subs	r4, r4, r3
 800042a:	bfa2      	ittt	ge
 800042c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000430:	4329      	orrge	r1, r5
 8000432:	bd30      	popge	{r4, r5, pc}
 8000434:	ea6f 0404 	mvn.w	r4, r4
 8000438:	3c1f      	subs	r4, #31
 800043a:	da1c      	bge.n	8000476 <__adddf3+0x1d2>
 800043c:	340c      	adds	r4, #12
 800043e:	dc0e      	bgt.n	800045e <__adddf3+0x1ba>
 8000440:	f104 0414 	add.w	r4, r4, #20
 8000444:	f1c4 0220 	rsb	r2, r4, #32
 8000448:	fa20 f004 	lsr.w	r0, r0, r4
 800044c:	fa01 f302 	lsl.w	r3, r1, r2
 8000450:	ea40 0003 	orr.w	r0, r0, r3
 8000454:	fa21 f304 	lsr.w	r3, r1, r4
 8000458:	ea45 0103 	orr.w	r1, r5, r3
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f1c4 040c 	rsb	r4, r4, #12
 8000462:	f1c4 0220 	rsb	r2, r4, #32
 8000466:	fa20 f002 	lsr.w	r0, r0, r2
 800046a:	fa01 f304 	lsl.w	r3, r1, r4
 800046e:	ea40 0003 	orr.w	r0, r0, r3
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	fa21 f004 	lsr.w	r0, r1, r4
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f094 0f00 	teq	r4, #0
 8000482:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000486:	bf06      	itte	eq
 8000488:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800048c:	3401      	addeq	r4, #1
 800048e:	3d01      	subne	r5, #1
 8000490:	e74e      	b.n	8000330 <__adddf3+0x8c>
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf18      	it	ne
 8000498:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049c:	d029      	beq.n	80004f2 <__adddf3+0x24e>
 800049e:	ea94 0f05 	teq	r4, r5
 80004a2:	bf08      	it	eq
 80004a4:	ea90 0f02 	teqeq	r0, r2
 80004a8:	d005      	beq.n	80004b6 <__adddf3+0x212>
 80004aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ae:	bf04      	itt	eq
 80004b0:	4619      	moveq	r1, r3
 80004b2:	4610      	moveq	r0, r2
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea91 0f03 	teq	r1, r3
 80004ba:	bf1e      	ittt	ne
 80004bc:	2100      	movne	r1, #0
 80004be:	2000      	movne	r0, #0
 80004c0:	bd30      	popne	{r4, r5, pc}
 80004c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c6:	d105      	bne.n	80004d4 <__adddf3+0x230>
 80004c8:	0040      	lsls	r0, r0, #1
 80004ca:	4149      	adcs	r1, r1
 80004cc:	bf28      	it	cs
 80004ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d8:	bf3c      	itt	cc
 80004da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004de:	bd30      	popcc	{r4, r5, pc}
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf1a      	itte	ne
 80004f8:	4619      	movne	r1, r3
 80004fa:	4610      	movne	r0, r2
 80004fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000500:	bf1c      	itt	ne
 8000502:	460b      	movne	r3, r1
 8000504:	4602      	movne	r2, r0
 8000506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050a:	bf06      	itte	eq
 800050c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000510:	ea91 0f03 	teqeq	r1, r3
 8000514:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	bf00      	nop

0800051c <__aeabi_ui2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f04f 0500 	mov.w	r5, #0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e750      	b.n	80003dc <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_i2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000554:	bf48      	it	mi
 8000556:	4240      	negmi	r0, r0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e73e      	b.n	80003dc <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_f2d>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056e:	bf1f      	itttt	ne
 8000570:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000574:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000578:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800057c:	4770      	bxne	lr
 800057e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000582:	bf08      	it	eq
 8000584:	4770      	bxeq	lr
 8000586:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800058a:	bf04      	itt	eq
 800058c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a0:	e71c      	b.n	80003dc <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aed8 	beq.w	800038a <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6bd      	b.n	800038a <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__aeabi_d2f>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a3c:	bf24      	itt	cs
 8000a3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a46:	d90d      	bls.n	8000a64 <__aeabi_d2f+0x30>
 8000a48:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a54:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a5c:	bf08      	it	eq
 8000a5e:	f020 0001 	biceq.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a68:	d121      	bne.n	8000aae <__aeabi_d2f+0x7a>
 8000a6a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a6e:	bfbc      	itt	lt
 8000a70:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a74:	4770      	bxlt	lr
 8000a76:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7e:	f1c2 0218 	rsb	r2, r2, #24
 8000a82:	f1c2 0c20 	rsb	ip, r2, #32
 8000a86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8e:	bf18      	it	ne
 8000a90:	f040 0001 	orrne.w	r0, r0, #1
 8000a94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa0:	ea40 000c 	orr.w	r0, r0, ip
 8000aa4:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aac:	e7cc      	b.n	8000a48 <__aeabi_d2f+0x14>
 8000aae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab2:	d107      	bne.n	8000ac4 <__aeabi_d2f+0x90>
 8000ab4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab8:	bf1e      	ittt	ne
 8000aba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000abe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac2:	4770      	bxne	lr
 8000ac4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000acc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b099      	sub	sp, #100	@ 0x64
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f000 fe4d 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f8d1 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f000 fb1d 	bl	8001120 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000ae6:	f000 f995 	bl	8000e14 <MX_ICACHE_Init>
  MX_TIM2_Init();
 8000aea:	f000 f9f3 	bl	8000ed4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000aee:	f000 fa89 	bl	8001004 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000af2:	f000 f927 	bl	8000d44 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000af6:	f000 f999 	bl	8000e2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000afa:	2100      	movs	r1, #0
 8000afc:	4857      	ldr	r0, [pc, #348]	@ (8000c5c <main+0x188>)
 8000afe:	f003 fd3b 	bl	8004578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b02:	2104      	movs	r1, #4
 8000b04:	4855      	ldr	r0, [pc, #340]	@ (8000c5c <main+0x188>)
 8000b06:	f003 fd37 	bl	8004578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	4853      	ldr	r0, [pc, #332]	@ (8000c5c <main+0x188>)
 8000b0e:	f003 fd33 	bl	8004578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b12:	210c      	movs	r1, #12
 8000b14:	4851      	ldr	r0, [pc, #324]	@ (8000c5c <main+0x188>)
 8000b16:	f003 fd2f 	bl	8004578 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4850      	ldr	r0, [pc, #320]	@ (8000c60 <main+0x18c>)
 8000b1e:	f003 fd2b 	bl	8004578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b22:	2104      	movs	r1, #4
 8000b24:	484e      	ldr	r0, [pc, #312]	@ (8000c60 <main+0x18c>)
 8000b26:	f003 fd27 	bl	8004578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	484c      	ldr	r0, [pc, #304]	@ (8000c60 <main+0x18c>)
 8000b2e:	f003 fd23 	bl	8004578 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8000b32:	484c      	ldr	r0, [pc, #304]	@ (8000c64 <main+0x190>)
 8000b34:	f003 fc72 	bl	800441c <HAL_TIM_Base_Start>

    /* Start ADC in interrupt mode */
  HAL_ADC_Start_IT(&hadc1);
 8000b38:	484b      	ldr	r0, [pc, #300]	@ (8000c68 <main+0x194>)
 8000b3a:	f001 fa97 	bl	800206c <HAL_ADC_Start_IT>

  const float color_red[4] = 	{0,0,0,1};
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b50:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000b54:	653b      	str	r3, [r7, #80]	@ 0x50
  const float color_green[4] = 	{0,0,1,0};
 8000b56:	f04f 0300 	mov.w	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b62:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	643b      	str	r3, [r7, #64]	@ 0x40
  const float color_blue[4] = 	{0,1,0,0};
 8000b6e:	f04f 0300 	mov.w	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b74:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  const float color_yellow[4] = {0,0,1,1};
 8000b86:	4b39      	ldr	r3, [pc, #228]	@ (8000c6c <main+0x198>)
 8000b88:	f107 0414 	add.w	r4, r7, #20
 8000b8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const float color_white[4] = 	{0,1,1,1};
 8000b92:	4b37      	ldr	r3, [pc, #220]	@ (8000c70 <main+0x19c>)
 8000b94:	1d3c      	adds	r4, r7, #4
 8000b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const int blink_delay_ms = 2000;
 8000b9c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c

  const float led_power = 0.8;
 8000ba2:	4b34      	ldr	r3, [pc, #208]	@ (8000c74 <main+0x1a0>)
 8000ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
  const float fan_power = 0.35;
 8000ba6:	4b34      	ldr	r3, [pc, #208]	@ (8000c78 <main+0x1a4>)
 8000ba8:	657b      	str	r3, [r7, #84]	@ 0x54
	  /*TIM2->CCR1 = 2000; //D_PWM_W
	  TIM2->CCR2 = 2000; //D_PWM_B
	  TIM2->CCR3 = 2000; //D_PWM_G
	  TIM2->CCR4 = 2000; //D_PWM_R*/

	  TIM3->CCR1 = (int)(65532*led_power); //D_PWM_STRIP - 80% PWM
 8000baa:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000bae:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000c7c <main+0x1a8>
 8000bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bba:	4b31      	ldr	r3, [pc, #196]	@ (8000c80 <main+0x1ac>)
 8000bbc:	ee17 2a90 	vmov	r2, s15
 8000bc0:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR2 = 65532 - (int)(65532*fan_power); //D_FAN2_PWM - 55% PWM (value inverted)
 8000bc2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000bc6:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000c7c <main+0x1a8>
 8000bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd2:	ee17 3a90 	vmov	r3, s15
 8000bd6:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000bda:	33fc      	adds	r3, #252	@ 0xfc
 8000bdc:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <main+0x1ac>)
 8000bde:	6393      	str	r3, [r2, #56]	@ 0x38
	  TIM3->CCR3 = 65532 - (int)(65532*fan_power); //D_FAN1_PWM - 55% PWM (value inverted)
 8000be0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000be4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000c7c <main+0x1a8>
 8000be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf0:	ee17 3a90 	vmov	r3, s15
 8000bf4:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000bf8:	33fc      	adds	r3, #252	@ 0xfc
 8000bfa:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <main+0x1ac>)
 8000bfc:	63d3      	str	r3, [r2, #60]	@ 0x3c

	  while (1){
		  set_wbgr_strip_color(color_white);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fb05 	bl	8001210 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fe73 	bl	80018f4 <HAL_Delay>
		  set_wbgr_strip_color(color_blue);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fafc 	bl	8001210 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fe6a 	bl	80018f4 <HAL_Delay>
		  set_wbgr_strip_color(color_green);
 8000c20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 faf3 	bl	8001210 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fe61 	bl	80018f4 <HAL_Delay>
		  set_wbgr_strip_color(color_yellow);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 faea 	bl	8001210 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fe58 	bl	80018f4 <HAL_Delay>
		  set_wbgr_strip_color(color_red);
 8000c44:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fae1 	bl	8001210 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fe4f 	bl	80018f4 <HAL_Delay>
		  set_wbgr_strip_color(color_white);
 8000c56:	bf00      	nop
 8000c58:	e7d1      	b.n	8000bfe <main+0x12a>
 8000c5a:	bf00      	nop
 8000c5c:	200000dc 	.word	0x200000dc
 8000c60:	20000128 	.word	0x20000128
 8000c64:	20000090 	.word	0x20000090
 8000c68:	20000028 	.word	0x20000028
 8000c6c:	0800539c 	.word	0x0800539c
 8000c70:	080053ac 	.word	0x080053ac
 8000c74:	3f4ccccd 	.word	0x3f4ccccd
 8000c78:	3eb33333 	.word	0x3eb33333
 8000c7c:	477ffc00 	.word	0x477ffc00
 8000c80:	40000400 	.word	0x40000400

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09c      	sub	sp, #112	@ 0x70
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	2250      	movs	r2, #80	@ 0x50
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 fb4a 	bl	800532c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000caa:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <SystemClock_Config+0xb8>)
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	4a23      	ldr	r2, [pc, #140]	@ (8000d3c <SystemClock_Config+0xb8>)
 8000cb0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000cb4:	6113      	str	r3, [r2, #16]
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <SystemClock_Config+0xb8>)
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc2:	bf00      	nop
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <SystemClock_Config+0xb8>)
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d1f9      	bne.n	8000cc4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cdc:	2340      	movs	r3, #64	@ 0x40
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 fc07 	bl	80034fc <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000cf4:	f000 fb60 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	231f      	movs	r3, #31
 8000cfa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	2101      	movs	r1, #1
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 f828 	bl	8003d6c <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d22:	f000 fb49 	bl	80013b8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <SystemClock_Config+0xbc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <SystemClock_Config+0xbc>)
 8000d2c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d30:	6013      	str	r3, [r2, #0]
}
 8000d32:	bf00      	nop
 8000d34:	3770      	adds	r7, #112	@ 0x70
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	44020800 	.word	0x44020800
 8000d40:	40022000 	.word	0x40022000

08000d44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 faeb 	bl	800532c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d56:	4b2c      	ldr	r3, [pc, #176]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d58:	4a2c      	ldr	r2, [pc, #176]	@ (8000e0c <MX_ADC1_Init+0xc8>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d5e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d64:	4b28      	ldr	r3, [pc, #160]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6a:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d70:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d76:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000d98:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000da0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000da4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000dae:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc2:	4811      	ldr	r0, [pc, #68]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000dc4:	f001 f804 	bl	8001dd0 <HAL_ADC_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dce:	f000 faf3 	bl	80013b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_ADC1_Init+0xcc>)
 8000dd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dde:	237f      	movs	r3, #127	@ 0x7f
 8000de0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000de2:	2304      	movs	r3, #4
 8000de4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <MX_ADC1_Init+0xc4>)
 8000df0:	f001 fbc6 	bl	8002580 <HAL_ADC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000dfa:	f000 fadd 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000028 	.word	0x20000028
 8000e0c:	42028000 	.word	0x42028000
 8000e10:	4b840000 	.word	0x4b840000

08000e14 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000e18:	f002 fb60 	bl	80034dc <HAL_ICACHE_Enable>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000e22:	f000 fac9 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000e4c:	4a20      	ldr	r2, [pc, #128]	@ (8000ed0 <MX_TIM1_Init+0xa4>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000e5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e76:	4815      	ldr	r0, [pc, #84]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000e78:	f003 fa78 	bl	800436c <HAL_TIM_Base_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e82:	f000 fa99 	bl	80013b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	480e      	ldr	r0, [pc, #56]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000e94:	f003 fd52 	bl	800493c <HAL_TIM_ConfigClockSource>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e9e:	f000 fa8b 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <MX_TIM1_Init+0xa0>)
 8000eb4:	f004 f9d2 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ebe:	f000 fa7b 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3720      	adds	r7, #32
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000090 	.word	0x20000090
 8000ed0:	40012c00 	.word	0x40012c00

08000ed4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	@ 0x38
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f06:	4b3e      	ldr	r3, [pc, #248]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f14:	4b3a      	ldr	r3, [pc, #232]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f1a:	4b39      	ldr	r3, [pc, #228]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b37      	ldr	r3, [pc, #220]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f28:	4b35      	ldr	r3, [pc, #212]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f2e:	4834      	ldr	r0, [pc, #208]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f30:	f003 fa1c 	bl	800436c <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f3a:	f000 fa3d 	bl	80013b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	482d      	ldr	r0, [pc, #180]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f4c:	f003 fcf6 	bl	800493c <HAL_TIM_ConfigClockSource>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f56:	f000 fa2f 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f5a:	4829      	ldr	r0, [pc, #164]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f5c:	f003 faaa 	bl	80044b4 <HAL_TIM_PWM_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f66:	f000 fa27 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4821      	ldr	r0, [pc, #132]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000f7a:	f004 f96f 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f84:	f000 fa18 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f88:	2360      	movs	r3, #96	@ 0x60
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4818      	ldr	r0, [pc, #96]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000fa0:	f003 fbb8 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000faa:	f000 fa05 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4812      	ldr	r0, [pc, #72]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000fb6:	f003 fbad 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000fc0:	f000 f9fa 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480d      	ldr	r0, [pc, #52]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000fcc:	f003 fba2 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000fd6:	f000 f9ef 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	220c      	movs	r2, #12
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4807      	ldr	r0, [pc, #28]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000fe2:	f003 fb97 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000fec:	f000 f9e4 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ff0:	4803      	ldr	r0, [pc, #12]	@ (8001000 <MX_TIM2_Init+0x12c>)
 8000ff2:	f000 fa8b 	bl	800150c <HAL_TIM_MspPostInit>

}
 8000ff6:	bf00      	nop
 8000ff8:	3738      	adds	r7, #56	@ 0x38
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000dc 	.word	0x200000dc

08001004 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08e      	sub	sp, #56	@ 0x38
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001036:	4b38      	ldr	r3, [pc, #224]	@ (8001118 <MX_TIM3_Init+0x114>)
 8001038:	4a38      	ldr	r2, [pc, #224]	@ (800111c <MX_TIM3_Init+0x118>)
 800103a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800103c:	4b36      	ldr	r3, [pc, #216]	@ (8001118 <MX_TIM3_Init+0x114>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b35      	ldr	r3, [pc, #212]	@ (8001118 <MX_TIM3_Init+0x114>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001048:	4b33      	ldr	r3, [pc, #204]	@ (8001118 <MX_TIM3_Init+0x114>)
 800104a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800104e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b31      	ldr	r3, [pc, #196]	@ (8001118 <MX_TIM3_Init+0x114>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001056:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <MX_TIM3_Init+0x114>)
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800105c:	482e      	ldr	r0, [pc, #184]	@ (8001118 <MX_TIM3_Init+0x114>)
 800105e:	f003 f985 	bl	800436c <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001068:	f000 f9a6 	bl	80013b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001070:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001076:	4619      	mov	r1, r3
 8001078:	4827      	ldr	r0, [pc, #156]	@ (8001118 <MX_TIM3_Init+0x114>)
 800107a:	f003 fc5f 	bl	800493c <HAL_TIM_ConfigClockSource>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001084:	f000 f998 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001088:	4823      	ldr	r0, [pc, #140]	@ (8001118 <MX_TIM3_Init+0x114>)
 800108a:	f003 fa13 	bl	80044b4 <HAL_TIM_PWM_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001094:	f000 f990 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	481c      	ldr	r0, [pc, #112]	@ (8001118 <MX_TIM3_Init+0x114>)
 80010a8:	f004 f8d8 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010b2:	f000 f981 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	@ 0x60
 80010b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4812      	ldr	r0, [pc, #72]	@ (8001118 <MX_TIM3_Init+0x114>)
 80010ce:	f003 fb21 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80010d8:	f000 f96e 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2204      	movs	r2, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_TIM3_Init+0x114>)
 80010e4:	f003 fb16 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80010ee:	f000 f963 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	2208      	movs	r2, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	@ (8001118 <MX_TIM3_Init+0x114>)
 80010fa:	f003 fb0b 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001104:	f000 f958 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <MX_TIM3_Init+0x114>)
 800110a:	f000 f9ff 	bl	800150c <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3738      	adds	r7, #56	@ 0x38
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000128 	.word	0x20000128
 800111c:	40000400 	.word	0x40000400

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <MX_GPIO_Init+0xe4>)
 8001138:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800113c:	4a31      	ldr	r2, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xe4>)
 800113e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001142:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001146:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <MX_GPIO_Init+0xe4>)
 8001148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800114c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <MX_GPIO_Init+0xe4>)
 8001156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800115a:	4a2a      	ldr	r2, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xe4>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xe4>)
 8001166:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_GPIO_Init+0xe4>)
 8001174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001178:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_GPIO_Init+0xe4>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_GPIO_Init+0xe4>)
 8001184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 8001196:	481c      	ldr	r0, [pc, #112]	@ (8001208 <MX_GPIO_Init+0xe8>)
 8001198:	f002 f988 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a2:	481a      	ldr	r0, [pc, #104]	@ (800120c <MX_GPIO_Init+0xec>)
 80011a4:	f002 f982 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a8:	2301      	movs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4619      	mov	r1, r3
 80011ba:	4813      	ldr	r0, [pc, #76]	@ (8001208 <MX_GPIO_Init+0xe8>)
 80011bc:	f002 f824 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 80011c0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80011c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_GPIO_Init+0xe8>)
 80011da:	f002 f815 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0xec>)
 80011f8:	f002 f806 	bl	8003208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	44020c00 	.word	0x44020c00
 8001208:	42020400 	.word	0x42020400
 800120c:	42020000 	.word	0x42020000

08001210 <set_wbgr_strip_color>:

/* USER CODE BEGIN 4 */
void set_wbgr_strip_color(const float* color){
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = (int)(65532 * color[0]); //D_PWM_W
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800129c <set_wbgr_strip_color+0x8c>
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800122e:	ee17 2a90 	vmov	r2, s15
 8001232:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = (int)(65532 * color[1]); //D_PWM_B
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3304      	adds	r3, #4
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800129c <set_wbgr_strip_color+0x8c>
 8001240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800124c:	ee17 2a90 	vmov	r2, s15
 8001250:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2->CCR3 = (int)(65532 * color[2]); //D_PWM_G
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3308      	adds	r3, #8
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800129c <set_wbgr_strip_color+0x8c>
 800125e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001266:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800126a:	ee17 2a90 	vmov	r2, s15
 800126e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = (int)(65532 * color[3]); //D_PWM_R
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	330c      	adds	r3, #12
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800129c <set_wbgr_strip_color+0x8c>
 800127c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001288:	ee17 2a90 	vmov	r2, s15
 800128c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	477ffc00 	.word	0x477ffc00

080012a0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a3c      	ldr	r2, [pc, #240]	@ (80013a0 <HAL_ADC_ConvCpltCallback+0x100>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d16d      	bne.n	800138e <HAL_ADC_ConvCpltCallback+0xee>
  {
	const float pot_min = 0.1;
 80012b2:	4b3c      	ldr	r3, [pc, #240]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0x104>)
 80012b4:	61bb      	str	r3, [r7, #24]
	const float pot_max = 4.7;
 80012b6:	4b3c      	ldr	r3, [pc, #240]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x108>)
 80012b8:	617b      	str	r3, [r7, #20]
    // ADC conversion complete, get the value
    uint32_t raw_adc = HAL_ADC_GetValue(hadc);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 ff8a 	bl	80021d4 <HAL_ADC_GetValue>
 80012c0:	6138      	str	r0, [r7, #16]
    float pot_value = (-4.7*raw_adc)/(raw_adc-4096.0);
 80012c2:	6938      	ldr	r0, [r7, #16]
 80012c4:	f7ff f92a 	bl	800051c <__aeabi_ui2d>
 80012c8:	a333      	add	r3, pc, #204	@ (adr r3, 8001398 <HAL_ADC_ConvCpltCallback+0xf8>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f99f 	bl	8000610 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4614      	mov	r4, r2
 80012d8:	461d      	mov	r5, r3
 80012da:	6938      	ldr	r0, [r7, #16]
 80012dc:	f7ff f91e 	bl	800051c <__aeabi_ui2d>
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <HAL_ADC_ConvCpltCallback+0x10c>)
 80012e6:	f7fe ffdb 	bl	80002a0 <__aeabi_dsub>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4620      	mov	r0, r4
 80012f0:	4629      	mov	r1, r5
 80012f2:	f7ff fab7 	bl	8000864 <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fb99 	bl	8000a34 <__aeabi_d2f>
 8001302:	4603      	mov	r3, r0
 8001304:	60fb      	str	r3, [r7, #12]
    float fan_power = (pot_value-pot_min)/(pot_max-pot_min);
 8001306:	ed97 7a03 	vldr	s14, [r7, #12]
 800130a:	edd7 7a06 	vldr	s15, [r7, #24]
 800130e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001312:	ed97 7a05 	vldr	s14, [r7, #20]
 8001316:	edd7 7a06 	vldr	s15, [r7, #24]
 800131a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001322:	edc7 7a07 	vstr	s15, [r7, #28]
    if(fan_power > 1.0) fan_power = 1.0;
 8001326:	edd7 7a07 	vldr	s15, [r7, #28]
 800132a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800132e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	dd02      	ble.n	800133e <HAL_ADC_ConvCpltCallback+0x9e>
 8001338:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800133c:	61fb      	str	r3, [r7, #28]
    if(fan_power < 0.0) fan_power = 0.0;
 800133e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	d502      	bpl.n	8001352 <HAL_ADC_ConvCpltCallback+0xb2>
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]

    TIM3->CCR2 = 65532 - (int)(65532*fan_power); //D_FAN2_PWM - 55% PWM (value inverted)
 8001352:	edd7 7a07 	vldr	s15, [r7, #28]
 8001356:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80013b0 <HAL_ADC_ConvCpltCallback+0x110>
 800135a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001362:	ee17 3a90 	vmov	r3, s15
 8001366:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800136a:	33fc      	adds	r3, #252	@ 0xfc
 800136c:	4a11      	ldr	r2, [pc, #68]	@ (80013b4 <HAL_ADC_ConvCpltCallback+0x114>)
 800136e:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM3->CCR3 = 65532 - (int)(65532*fan_power); //D_FAN1_PWM - 55% PWM (value inverted)
 8001370:	edd7 7a07 	vldr	s15, [r7, #28]
 8001374:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80013b0 <HAL_ADC_ConvCpltCallback+0x110>
 8001378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001380:	ee17 3a90 	vmov	r3, s15
 8001384:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001388:	33fc      	adds	r3, #252	@ 0xfc
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <HAL_ADC_ConvCpltCallback+0x114>)
 800138c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    // You can process the adc_value here (e.g., send it via UART, process, etc.)
  }
}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	cccccccd 	.word	0xcccccccd
 800139c:	c012cccc 	.word	0xc012cccc
 80013a0:	42028000 	.word	0x42028000
 80013a4:	3dcccccd 	.word	0x3dcccccd
 80013a8:	40966666 	.word	0x40966666
 80013ac:	40b00000 	.word	0x40b00000
 80013b0:	477ffc00 	.word	0x477ffc00
 80013b4:	40000400 	.word	0x40000400

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <Error_Handler+0x8>

080013c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <HAL_ADC_MspInit+0x90>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d131      	bne.n	800145a <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <HAL_ADC_MspInit+0x94>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001468 <HAL_ADC_MspInit+0x94>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001402:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_ADC_MspInit+0x94>)
 8001408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <HAL_ADC_MspInit+0x94>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <HAL_ADC_MspInit+0x94>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_ADC_MspInit+0x94>)
 8001426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001432:	2310      	movs	r3, #16
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001436:	2303      	movs	r3, #3
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <HAL_ADC_MspInit+0x98>)
 8001446:	f001 fedf 	bl	8003208 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2025      	movs	r0, #37	@ 0x25
 8001450:	f001 fe02 	bl	8003058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001454:	2025      	movs	r0, #37	@ 0x25
 8001456:	f001 fe19 	bl	800308c <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	@ 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	42028000 	.word	0x42028000
 8001468:	44020c00 	.word	0x44020c00
 800146c:	42020000 	.word	0x42020000

08001470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a20      	ldr	r2, [pc, #128]	@ (8001500 <HAL_TIM_Base_MspInit+0x90>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d10f      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <HAL_TIM_Base_MspInit+0x94>)
 8001484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001488:	4a1e      	ldr	r2, [pc, #120]	@ (8001504 <HAL_TIM_Base_MspInit+0x94>)
 800148a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800148e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <HAL_TIM_Base_MspInit+0x94>)
 8001494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014a0:	e028      	b.n	80014f4 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014aa:	d10f      	bne.n	80014cc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ac:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_TIM_Base_MspInit+0x94>)
 80014ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014b2:	4a14      	ldr	r2, [pc, #80]	@ (8001504 <HAL_TIM_Base_MspInit+0x94>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <HAL_TIM_Base_MspInit+0x94>)
 80014be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
}
 80014ca:	e013      	b.n	80014f4 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <HAL_TIM_Base_MspInit+0x98>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d10e      	bne.n	80014f4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <HAL_TIM_Base_MspInit+0x94>)
 80014d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014dc:	4a09      	ldr	r2, [pc, #36]	@ (8001504 <HAL_TIM_Base_MspInit+0x94>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014e6:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <HAL_TIM_Base_MspInit+0x94>)
 80014e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40012c00 	.word	0x40012c00
 8001504:	44020c00 	.word	0x44020c00
 8001508:	40000400 	.word	0x40000400

0800150c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800152c:	d11f      	bne.n	800156e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <HAL_TIM_MspPostInit+0xb4>)
 8001530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001534:	4a22      	ldr	r2, [pc, #136]	@ (80015c0 <HAL_TIM_MspPostInit+0xb4>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <HAL_TIM_MspPostInit+0xb4>)
 8001540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800154c:	230f      	movs	r3, #15
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800155c:	2301      	movs	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4817      	ldr	r0, [pc, #92]	@ (80015c4 <HAL_TIM_MspPostInit+0xb8>)
 8001568:	f001 fe4e 	bl	8003208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800156c:	e024      	b.n	80015b8 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a15      	ldr	r2, [pc, #84]	@ (80015c8 <HAL_TIM_MspPostInit+0xbc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d11f      	bne.n	80015b8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_TIM_MspPostInit+0xb4>)
 800157a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <HAL_TIM_MspPostInit+0xb4>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001588:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <HAL_TIM_MspPostInit+0xb4>)
 800158a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001596:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015a8:	2302      	movs	r3, #2
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <HAL_TIM_MspPostInit+0xb8>)
 80015b4:	f001 fe28 	bl	8003208 <HAL_GPIO_Init>
}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	@ 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	44020c00 	.word	0x44020c00
 80015c4:	42020000 	.word	0x42020000
 80015c8:	40000400 	.word	0x40000400

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 f947 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <ADC1_IRQHandler+0x10>)
 8001632:	f000 fddc 	bl	80021ee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000028 	.word	0x20000028

08001640 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001646:	4b30      	ldr	r3, [pc, #192]	@ (8001708 <SystemInit+0xc8>)
 8001648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164c:	4a2e      	ldr	r2, [pc, #184]	@ (8001708 <SystemInit+0xc8>)
 800164e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001652:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001656:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <SystemInit+0xcc>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800165c:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <SystemInit+0xcc>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001662:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <SystemInit+0xcc>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001668:	4b28      	ldr	r3, [pc, #160]	@ (800170c <SystemInit+0xcc>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4927      	ldr	r1, [pc, #156]	@ (800170c <SystemInit+0xcc>)
 800166e:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <SystemInit+0xd0>)
 8001670:	4013      	ands	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001674:	4b25      	ldr	r3, [pc, #148]	@ (800170c <SystemInit+0xcc>)
 8001676:	2200      	movs	r2, #0
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800167a:	4b24      	ldr	r3, [pc, #144]	@ (800170c <SystemInit+0xcc>)
 800167c:	2200      	movs	r2, #0
 800167e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <SystemInit+0xcc>)
 8001682:	4a24      	ldr	r2, [pc, #144]	@ (8001714 <SystemInit+0xd4>)
 8001684:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001686:	4b21      	ldr	r3, [pc, #132]	@ (800170c <SystemInit+0xcc>)
 8001688:	2200      	movs	r2, #0
 800168a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800168c:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <SystemInit+0xcc>)
 800168e:	4a21      	ldr	r2, [pc, #132]	@ (8001714 <SystemInit+0xd4>)
 8001690:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001692:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <SystemInit+0xcc>)
 8001694:	2200      	movs	r2, #0
 8001696:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <SystemInit+0xcc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <SystemInit+0xcc>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <SystemInit+0xcc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <SystemInit+0xc8>)
 80016ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016b0:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <SystemInit+0xd8>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80016ba:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80016c2:	d003      	beq.n	80016cc <SystemInit+0x8c>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80016ca:	d117      	bne.n	80016fc <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <SystemInit+0xd8>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <SystemInit+0xd8>)
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <SystemInit+0xdc>)
 80016dc:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <SystemInit+0xd8>)
 80016e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001720 <SystemInit+0xe0>)
 80016e2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <SystemInit+0xd8>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <SystemInit+0xd8>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <SystemInit+0xd8>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	4a08      	ldr	r2, [pc, #32]	@ (8001718 <SystemInit+0xd8>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	61d3      	str	r3, [r2, #28]
  }
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	44020c00 	.word	0x44020c00
 8001710:	fae2eae3 	.word	0xfae2eae3
 8001714:	01010280 	.word	0x01010280
 8001718:	40022000 	.word	0x40022000
 800171c:	08192a3b 	.word	0x08192a3b
 8001720:	4c5d6e7f 	.word	0x4c5d6e7f

08001724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800175c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001728:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800172a:	e003      	b.n	8001734 <LoopCopyDataInit>

0800172c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800172e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001730:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001732:	3104      	adds	r1, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001734:	480b      	ldr	r0, [pc, #44]	@ (8001764 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001738:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800173a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800173c:	d3f6      	bcc.n	800172c <CopyDataInit>
	ldr	r2, =_sbss
 800173e:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001740:	e002      	b.n	8001748 <LoopFillZerobss>

08001742 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001742:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001744:	f842 3b04 	str.w	r3, [r2], #4

08001748 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <LoopForever+0x16>)
	cmp	r2, r3
 800174a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800174c:	d3f9      	bcc.n	8001742 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800174e:	f7ff ff77 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f003 fdf3 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001756:	f7ff f9bd 	bl	8000ad4 <main>

0800175a <LoopForever>:

LoopForever:
    b LoopForever
 800175a:	e7fe      	b.n	800175a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800175c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001760:	080053d4 	.word	0x080053d4
	ldr	r0, =_sdata
 8001764:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001768:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800176c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001770:	20000178 	.word	0x20000178

08001774 <COMP1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <COMP1_IRQHandler>
	...

08001778 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f001 fc60 	bl	8003042 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001782:	f002 fcab 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 8001786:	4602      	mov	r2, r0
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <HAL_Init+0x44>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	490b      	ldr	r1, [pc, #44]	@ (80017c0 <HAL_Init+0x48>)
 8001792:	5ccb      	ldrb	r3, [r1, r3]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <HAL_Init+0x4c>)
 800179a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800179c:	2004      	movs	r0, #4
 800179e:	f001 fca5 	bl	80030ec <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a2:	200f      	movs	r0, #15
 80017a4:	f000 f810 	bl	80017c8 <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e002      	b.n	80017b8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017b2:	f7ff fe07 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	44020c00 	.word	0x44020c00
 80017c0:	080053bc 	.word	0x080053bc
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80017d4:	4b33      	ldr	r3, [pc, #204]	@ (80018a4 <HAL_InitTick+0xdc>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e05c      	b.n	800189a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80017e0:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <HAL_InitTick+0xe0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d10c      	bne.n	8001806 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80017ec:	4b2f      	ldr	r3, [pc, #188]	@ (80018ac <HAL_InitTick+0xe4>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b2c      	ldr	r3, [pc, #176]	@ (80018a4 <HAL_InitTick+0xdc>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e037      	b.n	8001876 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001806:	f001 fcc9 	bl	800319c <HAL_SYSTICK_GetCLKSourceConfig>
 800180a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d023      	beq.n	800185a <HAL_InitTick+0x92>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d82d      	bhi.n	8001874 <HAL_InitTick+0xac>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_InitTick+0x5e>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d00d      	beq.n	8001840 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001824:	e026      	b.n	8001874 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <HAL_InitTick+0xe4>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <HAL_InitTick+0xdc>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4619      	mov	r1, r3
 8001830:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001834:	fbb3 f3f1 	udiv	r3, r3, r1
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	60fb      	str	r3, [r7, #12]
        break;
 800183e:	e01a      	b.n	8001876 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <HAL_InitTick+0xdc>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184a:	fbb3 f3f2 	udiv	r3, r3, r2
 800184e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	60fb      	str	r3, [r7, #12]
        break;
 8001858:	e00d      	b.n	8001876 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_InitTick+0xdc>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001864:	fbb3 f3f2 	udiv	r3, r3, r2
 8001868:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	60fb      	str	r3, [r7, #12]
        break;
 8001872:	e000      	b.n	8001876 <HAL_InitTick+0xae>
        break;
 8001874:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f001 fc16 	bl	80030a8 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e009      	b.n	800189a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001886:	2200      	movs	r2, #0
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800188e:	f001 fbe3 	bl	8003058 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001892:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <HAL_InitTick+0xe8>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	e000e010 	.word	0xe000e010
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000174 	.word	0x20000174

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000174 	.word	0x20000174

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008

0800193c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	609a      	str	r2, [r3, #8]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80019b2:	f043 0202 	orr.w	r2, r3, #2
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <LL_ADC_EnableChannel0_GPIO+0x24>)
 80019d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <LL_ADC_EnableChannel0_GPIO+0x24>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	42028000 	.word	0x42028000

080019f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3360      	adds	r3, #96	@ 0x60
 8001a02:	461a      	mov	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <LL_ADC_SetOffset+0x44>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a28:	bf00      	nop
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	03fff000 	.word	0x03fff000

08001a38 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3360      	adds	r3, #96	@ 0x60
 8001a46:	461a      	mov	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3360      	adds	r3, #96	@ 0x60
 8001a74:	461a      	mov	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a8e:	bf00      	nop
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b087      	sub	sp, #28
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3360      	adds	r3, #96	@ 0x60
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ac4:	bf00      	nop
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3360      	adds	r3, #96	@ 0x60
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	615a      	str	r2, [r3, #20]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b087      	sub	sp, #28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3330      	adds	r3, #48	@ 0x30
 8001b62:	461a      	mov	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	4413      	add	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	211f      	movs	r1, #31
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	f003 011f 	and.w	r1, r3, #31
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3314      	adds	r3, #20
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	0e5b      	lsrs	r3, r3, #25
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	4413      	add	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	0d1b      	lsrs	r3, r3, #20
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2107      	movs	r1, #7
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	401a      	ands	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	0d1b      	lsrs	r3, r3, #20
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	431a      	orrs	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c40:	43db      	mvns	r3, r3
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0318 	and.w	r3, r3, #24
 8001c4a:	4908      	ldr	r1, [pc, #32]	@ (8001c6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c4c:	40d9      	lsrs	r1, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	400b      	ands	r3, r1
 8001c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c56:	431a      	orrs	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	000fffff 	.word	0x000fffff

08001c70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6093      	str	r3, [r2, #8]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ca8:	d101      	bne.n	8001cae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ccc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cd0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cf8:	d101      	bne.n	8001cfe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_IsEnabled+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_IsEnabled+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d6e:	f043 0204 	orr.w	r2, r3, #4
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d101      	bne.n	8001d9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d101      	bne.n	8001dc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e131      	b.n	800204e <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff faeb 	bl	80013d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff3f 	bl	8001c94 <LL_ADC_IsDeepPowerDownEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff25 	bl	8001c70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff5a 	bl	8001ce4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff3e 	bl	8001cbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e40:	4b85      	ldr	r3, [pc, #532]	@ (8002058 <HAL_ADC_Init+0x288>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	4a85      	ldr	r2, [pc, #532]	@ (800205c <HAL_ADC_Init+0x28c>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	3301      	adds	r3, #1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e54:	e002      	b.n	8001e5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f9      	bne.n	8001e56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff3c 	bl	8001ce4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10d      	bne.n	8001e8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff75 	bl	8001d82 <LL_ADC_REG_IsConversionOngoing>
 8001e98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 80ca 	bne.w	800203c <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 80c6 	bne.w	800203c <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001eb8:	f043 0202 	orr.w	r2, r3, #2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff35 	bl	8001d34 <LL_ADC_IsEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10b      	bne.n	8001ee8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed0:	4863      	ldr	r0, [pc, #396]	@ (8002060 <HAL_ADC_Init+0x290>)
 8001ed2:	f7ff ff2f 	bl	8001d34 <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4860      	ldr	r0, [pc, #384]	@ (8002064 <HAL_ADC_Init+0x294>)
 8001ee4:	f7ff fd2a 	bl	800193c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e5b      	ldrb	r3, [r3, #25]
 8001eec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ef8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001efe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f06:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d106      	bne.n	8001f24 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	045b      	lsls	r3, r3, #17
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f30:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f38:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b48      	ldr	r3, [pc, #288]	@ (8002068 <HAL_ADC_Init+0x298>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff1a 	bl	8001da8 <LL_ADC_INJ_IsConversionOngoing>
 8001f74:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d13d      	bne.n	8001ff8 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d13a      	bne.n	8001ff8 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7e1b      	ldrb	r3, [r3, #24]
 8001f86:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f8e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f9e:	f023 0302 	bic.w	r3, r3, #2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	69b9      	ldr	r1, [r7, #24]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d118      	bne.n	8001fe8 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fcc:	4311      	orrs	r1, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	e007      	b.n	8001ff8 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d10c      	bne.n	800201a <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f023 010f 	bic.w	r1, r3, #15
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	1e5a      	subs	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	631a      	str	r2, [r3, #48]	@ 0x30
 8002018:	e007      	b.n	800202a <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 020f 	bic.w	r2, r2, #15
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	659a      	str	r2, [r3, #88]	@ 0x58
 800203a:	e007      	b.n	800204c <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800204c:	7ffb      	ldrb	r3, [r7, #31]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000000 	.word	0x20000000
 800205c:	053e2d63 	.word	0x053e2d63
 8002060:	42028000 	.word	0x42028000
 8002064:	42028300 	.word	0x42028300
 8002068:	fff04007 	.word	0xfff04007

0800206c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fe82 	bl	8001d82 <LL_ADC_REG_IsConversionOngoing>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 80a0 	bne.w	80021c6 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_ADC_Start_IT+0x28>
 8002090:	2302      	movs	r3, #2
 8002092:	e09b      	b.n	80021cc <HAL_ADC_Start_IT+0x160>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fe6f 	bl	8002d80 <ADC_Enable>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 8087 	bne.w	80021bc <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d2:	f023 0206 	bic.w	r2, r3, #6
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020da:	e002      	b.n	80020e2 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	221c      	movs	r2, #28
 80020e8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 021c 	bic.w	r2, r2, #28
 8002100:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	2b08      	cmp	r3, #8
 8002108:	d108      	bne.n	800211c <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0208 	orr.w	r2, r2, #8
 8002118:	605a      	str	r2, [r3, #4]
          break;
 800211a:	e008      	b.n	800212e <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0204 	orr.w	r2, r2, #4
 800212a:	605a      	str	r2, [r3, #4]
          break;
 800212c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002132:	2b00      	cmp	r3, #0
 8002134:	d107      	bne.n	8002146 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0210 	orr.w	r2, r2, #16
 8002144:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d02d      	beq.n	80021b0 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800215c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d110      	bne.n	800218e <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0220 	bic.w	r2, r2, #32
 800217a:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800218a:	605a      	str	r2, [r3, #4]
            break;
 800218c:	e010      	b.n	80021b0 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800219c:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0220 	orr.w	r2, r2, #32
 80021ac:	605a      	str	r2, [r3, #4]
            break;
 80021ae:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fdd0 	bl	8001d5a <LL_ADC_REG_StartConversion>
 80021ba:	e006      	b.n	80021ca <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80021c4:	e001      	b.n	80021ca <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b088      	sub	sp, #32
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d017      	beq.n	8002244 <HAL_ADC_IRQHandler+0x56>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d012      	beq.n	8002244 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fe4c 	bl	8002ed4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2202      	movs	r2, #2
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <HAL_ADC_IRQHandler+0x6a>
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800225e:	2b00      	cmp	r3, #0
 8002260:	d05e      	beq.n	8002320 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d059      	beq.n	8002320 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc4f 	bl	8001b2c <LL_ADC_REG_IsTriggerSourceSWStart>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03e      	beq.n	8002312 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d135      	bne.n	8002312 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d12e      	bne.n	8002312 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fd62 	bl	8001d82 <LL_ADC_REG_IsConversionOngoing>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11a      	bne.n	80022fa <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 020c 	bic.w	r2, r2, #12
 80022d2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d112      	bne.n	8002312 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80022f8:	e00b      	b.n	8002312 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe ffc4 	bl	80012a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	220c      	movs	r2, #12
 800231e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <HAL_ADC_IRQHandler+0x146>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800233a:	2b00      	cmp	r3, #0
 800233c:	d072      	beq.n	8002424 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d06d      	beq.n	8002424 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fc20 	bl	8001baa <LL_ADC_INJ_IsTriggerSourceSWStart>
 800236a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fbdb 	bl	8001b2c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002376:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d047      	beq.n	8002416 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x1b2>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d03f      	beq.n	8002416 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800239c:	2b00      	cmp	r3, #0
 800239e:	d13a      	bne.n	8002416 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023aa:	2b40      	cmp	r3, #64	@ 0x40
 80023ac:	d133      	bne.n	8002416 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d12e      	bne.n	8002416 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fcf3 	bl	8001da8 <LL_ADC_INJ_IsConversionOngoing>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d11a      	bne.n	80023fe <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023d6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d112      	bne.n	8002416 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80023fc:	e00b      	b.n	8002416 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fd34 	bl	8002e84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2260      	movs	r2, #96	@ 0x60
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800242a:	2b00      	cmp	r3, #0
 800242c:	d011      	beq.n	8002452 <HAL_ADC_IRQHandler+0x264>
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00c      	beq.n	8002452 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f886 	bl	8002556 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2280      	movs	r2, #128	@ 0x80
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d012      	beq.n	8002482 <HAL_ADC_IRQHandler+0x294>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fd1a 	bl	8002eac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002488:	2b00      	cmp	r3, #0
 800248a:	d012      	beq.n	80024b2 <HAL_ADC_IRQHandler+0x2c4>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00d      	beq.n	80024b2 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fd0c 	bl	8002ec0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d02a      	beq.n	8002512 <HAL_ADC_IRQHandler+0x324>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d025      	beq.n	8002512 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e008      	b.n	80024e6 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10e      	bne.n	800250a <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	f043 0202 	orr.w	r2, r3, #2
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f830 	bl	800256a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2210      	movs	r2, #16
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d018      	beq.n	800254e <HAL_ADC_IRQHandler+0x360>
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002522:	2b00      	cmp	r3, #0
 8002524:	d013      	beq.n	800254e <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002536:	f043 0208 	orr.w	r2, r3, #8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002546:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fca5 	bl	8002e98 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0b6      	sub	sp, #216	@ 0xd8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x22>
 800259e:	2302      	movs	r3, #2
 80025a0:	e3d8      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x7d4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fbe7 	bl	8001d82 <LL_ADC_REG_IsConversionOngoing>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 83bd 	bne.w	8002d36 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d104      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f9fd 	bl	80019c8 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	f7ff fab9 	bl	8001b52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fbcc 	bl	8001d82 <LL_ADC_REG_IsConversionOngoing>
 80025ea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fbd8 	bl	8001da8 <LL_ADC_INJ_IsConversionOngoing>
 80025f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002600:	2b00      	cmp	r3, #0
 8002602:	f040 81d9 	bne.w	80029b8 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 81d4 	bne.w	80029b8 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002618:	d10f      	bne.n	800263a <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2200      	movs	r2, #0
 8002624:	4619      	mov	r1, r3
 8002626:	f7ff fad3 	bl	8001bd0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fa67 	bl	8001b06 <LL_ADC_SetSamplingTimeCommonConfig>
 8002638:	e00e      	b.n	8002658 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	461a      	mov	r2, r3
 8002648:	f7ff fac2 	bl	8001bd0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fa57 	bl	8001b06 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	08db      	lsrs	r3, r3, #3
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b04      	cmp	r3, #4
 8002678:	d022      	beq.n	80026c0 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6919      	ldr	r1, [r3, #16]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800268a:	f7ff f9b1 	bl	80019f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	461a      	mov	r2, r3
 800269c:	f7ff f9fd 	bl	8001a9a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d102      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x136>
 80026b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026b4:	e000      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x138>
 80026b6:	2300      	movs	r3, #0
 80026b8:	461a      	mov	r2, r3
 80026ba:	f7ff fa09 	bl	8001ad0 <LL_ADC_SetOffsetSaturation>
 80026be:	e17b      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f9b6 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x16c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff f9ab 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	f003 021f 	and.w	r2, r3, #31
 80026ea:	e01e      	b.n	800272a <HAL_ADC_ConfigChannel+0x1aa>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff f9a0 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800270a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800270e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8002712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800271a:	2320      	movs	r3, #32
 800271c:	e004      	b.n	8002728 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800271e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x1c2>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	e018      	b.n	8002774 <HAL_ADC_ConfigChannel+0x1f4>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800275a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800275e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e004      	b.n	8002774 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 800276a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002774:	429a      	cmp	r2, r3
 8002776:	d106      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f96f 	bl	8001a64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2101      	movs	r1, #1
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f953 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x232>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f948 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	e01e      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x270>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f93d 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80027d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e004      	b.n	80027ee <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 80027e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x288>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0e9b      	lsrs	r3, r3, #26
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	e018      	b.n	800283a <HAL_ADC_ConfigChannel+0x2ba>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800281c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 800282c:	2320      	movs	r3, #32
 800282e:	e004      	b.n	800283a <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8002830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800283a:	429a      	cmp	r2, r3
 800283c:	d106      	bne.n	800284c <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2200      	movs	r2, #0
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f90c 	bl	8001a64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2102      	movs	r1, #2
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f8f0 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x2f8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2102      	movs	r1, #2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff f8e5 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	f003 021f 	and.w	r2, r3, #31
 8002876:	e01e      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x336>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2102      	movs	r1, #2
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f8da 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002896:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800289a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800289e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80028a6:	2320      	movs	r3, #32
 80028a8:	e004      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80028aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x34e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	e016      	b.n	80028fc <HAL_ADC_ConfigChannel+0x37c>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e004      	b.n	80028fc <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 80028f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d106      	bne.n	800290e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2200      	movs	r2, #0
 8002906:	2102      	movs	r1, #2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f8ab 	bl	8001a64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2103      	movs	r1, #3
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f88f 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_ADC_ConfigChannel+0x3ba>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2103      	movs	r1, #3
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff f884 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	e017      	b.n	800296a <HAL_ADC_ConfigChannel+0x3ea>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2103      	movs	r1, #3
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f879 	bl	8001a38 <LL_ADC_GetOffsetChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002954:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 800295c:	2320      	movs	r3, #32
 800295e:	e003      	b.n	8002968 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8002960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x402>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	e011      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x426>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002992:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 800299a:	2320      	movs	r3, #32
 800299c:	e003      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 800299e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d106      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2200      	movs	r2, #0
 80029b0:	2103      	movs	r1, #3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f856 	bl	8001a64 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff f9b9 	bl	8001d34 <LL_ADC_IsEnabled>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f040 813f 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f7ff f926 	bl	8001c28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a8e      	ldr	r2, [pc, #568]	@ (8002c1c <HAL_ADC_ConfigChannel+0x69c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	f040 8130 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x490>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	3301      	adds	r3, #1
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e019      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x4c4>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a20:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e003      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002a2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2b09      	cmp	r3, #9
 8002a3c:	bf94      	ite	ls
 8002a3e:	2301      	movls	r3, #1
 8002a40:	2300      	movhi	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d079      	beq.n	8002b3c <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x4e4>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	069b      	lsls	r3, r3, #26
 8002a5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a62:	e015      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x510>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a74:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e003      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8002a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	069b      	lsls	r3, r3, #26
 8002a8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x530>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	e017      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x560>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e003      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	ea42 0103 	orr.w	r1, r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x586>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	051b      	lsls	r3, r3, #20
 8002b04:	e018      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x5b8>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e003      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8002b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	e080      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x5d8>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	3301      	adds	r3, #1
 8002b50:	069b      	lsls	r3, r3, #26
 8002b52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b56:	e015      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x604>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8002b70:	2320      	movs	r3, #32
 8002b72:	e003      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	069b      	lsls	r3, r3, #26
 8002b80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x624>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	3301      	adds	r3, #1
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	e017      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x654>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	61fb      	str	r3, [r7, #28]
  return result;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e003      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	ea42 0103 	orr.w	r1, r2, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10d      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x680>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	3301      	adds	r3, #1
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b1e      	subs	r3, #30
 8002bf8:	051b      	lsls	r3, r3, #20
 8002bfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	e01d      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x6bc>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	613b      	str	r3, [r7, #16]
  return result;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e005      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x6a8>
 8002c1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f003 021f 	and.w	r2, r3, #31
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	3b1e      	subs	r3, #30
 8002c36:	051b      	lsls	r3, r3, #20
 8002c38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fe ffc4 	bl	8001bd0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b43      	ldr	r3, [pc, #268]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7dc>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d079      	beq.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c54:	4842      	ldr	r0, [pc, #264]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c56:	f7fe fe97 	bl	8001988 <LL_ADC_GetCommonPathInternalCh>
 8002c5a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a40      	ldr	r2, [pc, #256]	@ (8002d64 <HAL_ADC_ConfigChannel+0x7e4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d124      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11e      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a3b      	ldr	r2, [pc, #236]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7e8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d164      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c86:	4619      	mov	r1, r3
 8002c88:	4835      	ldr	r0, [pc, #212]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c8a:	f7fe fe6a 	bl	8001962 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c8e:	4b37      	ldr	r3, [pc, #220]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7ec>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	4a36      	ldr	r2, [pc, #216]	@ (8002d70 <HAL_ADC_ConfigChannel+0x7f0>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ca2:	e002      	b.n	8002caa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f9      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb0:	e04a      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002d74 <HAL_ADC_ConfigChannel+0x7f4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d113      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7e8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d13a      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4820      	ldr	r0, [pc, #128]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7e0>)
 8002cde:	f7fe fe40 	bl	8001962 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce2:	e031      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a23      	ldr	r2, [pc, #140]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7f8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d113      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7e8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d121      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4814      	ldr	r0, [pc, #80]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7e0>)
 8002d10:	f7fe fe27 	bl	8001962 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d14:	e018      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <HAL_ADC_ConfigChannel+0x7fc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d113      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a10      	ldr	r2, [pc, #64]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7e8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00e      	beq.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fe38 	bl	80019a4 <LL_ADC_EnableChannelVDDcore>
 8002d34:	e008      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	f043 0220 	orr.w	r2, r3, #32
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d50:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	37d8      	adds	r7, #216	@ 0xd8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	80080000 	.word	0x80080000
 8002d60:	42028300 	.word	0x42028300
 8002d64:	c3210000 	.word	0xc3210000
 8002d68:	42028000 	.word	0x42028000
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	053e2d63 	.word	0x053e2d63
 8002d74:	88600004 	.word	0x88600004
 8002d78:	c7520000 	.word	0xc7520000
 8002d7c:	99200040 	.word	0x99200040

08002d80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe ffcf 	bl	8001d34 <LL_ADC_IsEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d166      	bne.n	8002e6a <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	4b34      	ldr	r3, [pc, #208]	@ (8002e74 <ADC_Enable+0xf4>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00d      	beq.n	8002dc6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dae:	f043 0210 	orr.w	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dba:	f043 0201 	orr.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e052      	b.n	8002e6c <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe ff9e 	bl	8001d0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dd0:	4829      	ldr	r0, [pc, #164]	@ (8002e78 <ADC_Enable+0xf8>)
 8002dd2:	f7fe fdd9 	bl	8001988 <LL_ADC_GetCommonPathInternalCh>
 8002dd6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d010      	beq.n	8002e02 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de0:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <ADC_Enable+0xfc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	4a26      	ldr	r2, [pc, #152]	@ (8002e80 <ADC_Enable+0x100>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	3301      	adds	r3, #1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002df4:	e002      	b.n	8002dfc <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f9      	bne.n	8002df6 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e02:	f7fe fd6b 	bl	80018dc <HAL_GetTick>
 8002e06:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e08:	e028      	b.n	8002e5c <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe ff90 	bl	8001d34 <LL_ADC_IsEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe ff74 	bl	8001d0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e24:	f7fe fd5a 	bl	80018dc <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d914      	bls.n	8002e5c <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d00d      	beq.n	8002e5c <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	f043 0210 	orr.w	r2, r3, #16
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e007      	b.n	8002e6c <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d1cf      	bne.n	8002e0a <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	8000003f 	.word	0x8000003f
 8002e78:	42028300 	.word	0x42028300
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	053e2d63 	.word	0x053e2d63

08002e84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f04:	4013      	ands	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	@ (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f34:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <__NVIC_GetPriorityGrouping+0x18>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	f003 0307 	and.w	r3, r3, #7
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db0b      	blt.n	8002f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4907      	ldr	r1, [pc, #28]	@ (8002f84 <__NVIC_EnableIRQ+0x38>)
 8002f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000e100 	.word	0xe000e100

08002f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	db0a      	blt.n	8002fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	490c      	ldr	r1, [pc, #48]	@ (8002fd4 <__NVIC_SetPriority+0x4c>)
 8002fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	440b      	add	r3, r1
 8002fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb0:	e00a      	b.n	8002fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4908      	ldr	r1, [pc, #32]	@ (8002fd8 <__NVIC_SetPriority+0x50>)
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	3b04      	subs	r3, #4
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	761a      	strb	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	@ 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f1c3 0307 	rsb	r3, r3, #7
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	bf28      	it	cs
 8002ffa:	2304      	movcs	r3, #4
 8002ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3304      	adds	r3, #4
 8003002:	2b06      	cmp	r3, #6
 8003004:	d902      	bls.n	800300c <NVIC_EncodePriority+0x30>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3b03      	subs	r3, #3
 800300a:	e000      	b.n	800300e <NVIC_EncodePriority+0x32>
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	401a      	ands	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003024:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43d9      	mvns	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	4313      	orrs	r3, r2
         );
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	@ 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ff4c 	bl	8002ee8 <__NVIC_SetPriorityGrouping>
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003066:	f7ff ff63 	bl	8002f30 <__NVIC_GetPriorityGrouping>
 800306a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f7ff ffb3 	bl	8002fdc <NVIC_EncodePriority>
 8003076:	4602      	mov	r2, r0
 8003078:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff82 	bl	8002f88 <__NVIC_SetPriority>
}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff56 	bl	8002f4c <__NVIC_EnableIRQ>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030b8:	d301      	bcc.n	80030be <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00d      	b.n	80030da <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80030be:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <HAL_SYSTICK_Config+0x40>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80030c6:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <HAL_SYSTICK_Config+0x40>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80030cc:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <HAL_SYSTICK_Config+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a05      	ldr	r2, [pc, #20]	@ (80030e8 <HAL_SYSTICK_Config+0x40>)
 80030d2:	f043 0303 	orr.w	r3, r3, #3
 80030d6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000e010 	.word	0xe000e010

080030ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d844      	bhi.n	8003184 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80030fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003100 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003123 	.word	0x08003123
 8003104:	08003141 	.word	0x08003141
 8003108:	08003163 	.word	0x08003163
 800310c:	08003185 	.word	0x08003185
 8003110:	08003115 	.word	0x08003115
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003114:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800311a:	f043 0304 	orr.w	r3, r3, #4
 800311e:	6013      	str	r3, [r2, #0]
      break;
 8003120:	e031      	b.n	8003186 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003122:	4b1c      	ldr	r3, [pc, #112]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1b      	ldr	r2, [pc, #108]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800312e:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003130:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003134:	4a18      	ldr	r2, [pc, #96]	@ (8003198 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003136:	f023 030c 	bic.w	r3, r3, #12
 800313a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800313e:	e022      	b.n	8003186 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003140:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a13      	ldr	r2, [pc, #76]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003146:	f023 0304 	bic.w	r3, r3, #4
 800314a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800314c:	4b12      	ldr	r3, [pc, #72]	@ (8003198 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800314e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003152:	f023 030c 	bic.w	r3, r3, #12
 8003156:	4a10      	ldr	r2, [pc, #64]	@ (8003198 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003160:	e011      	b.n	8003186 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003162:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a0b      	ldr	r2, [pc, #44]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800316e:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003170:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003174:	f023 030c 	bic.w	r3, r3, #12
 8003178:	4a07      	ldr	r2, [pc, #28]	@ (8003198 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800317a:	f043 0308 	orr.w	r3, r3, #8
 800317e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003182:	e000      	b.n	8003186 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003184:	bf00      	nop
  }
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e010 	.word	0xe000e010
 8003198:	44020c00 	.word	0x44020c00

0800319c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80031ae:	2304      	movs	r3, #4
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	e01e      	b.n	80031f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80031b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d00f      	beq.n	80031e6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d80f      	bhi.n	80031ec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d003      	beq.n	80031e0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80031d8:	e008      	b.n	80031ec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
        break;
 80031de:	e008      	b.n	80031f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80031e0:	2301      	movs	r3, #1
 80031e2:	607b      	str	r3, [r7, #4]
        break;
 80031e4:	e005      	b.n	80031f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80031e6:	2302      	movs	r3, #2
 80031e8:	607b      	str	r3, [r7, #4]
        break;
 80031ea:	e002      	b.n	80031f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031ec:	2300      	movs	r3, #0
 80031ee:	607b      	str	r3, [r7, #4]
        break;
 80031f0:	bf00      	nop
    }
  }
  return systick_source;
 80031f2:	687b      	ldr	r3, [r7, #4]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e010 	.word	0xe000e010
 8003204:	44020c00 	.word	0x44020c00

08003208 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003216:	e136      	b.n	8003486 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8128 	beq.w	8003480 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x38>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b12      	cmp	r3, #18
 800323e:	d125      	bne.n	800328c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	08da      	lsrs	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3208      	adds	r2, #8
 8003248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	220f      	movs	r2, #15
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4013      	ands	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	08da      	lsrs	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4013      	ands	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d00b      	beq.n	80032e0 <HAL_GPIO_Init+0xd8>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d007      	beq.n	80032e0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032d4:	2b11      	cmp	r3, #17
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b12      	cmp	r3, #18
 80032de:	d130      	bne.n	8003342 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4013      	ands	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003316:	2201      	movs	r2, #1
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4013      	ands	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0201 	and.w	r2, r3, #1
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d017      	beq.n	800337a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4013      	ands	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d07c      	beq.n	8003480 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003386:	4a47      	ldr	r2, [pc, #284]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3318      	adds	r3, #24
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4013      	ands	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0a9a      	lsrs	r2, r3, #10
 80033ae:	4b3e      	ldr	r3, [pc, #248]	@ (80034a8 <HAL_GPIO_Init+0x2a0>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	f002 0203 	and.w	r2, r2, #3
 80033b8:	00d2      	lsls	r2, r2, #3
 80033ba:	4093      	lsls	r3, r2
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80033c2:	4938      	ldr	r1, [pc, #224]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	3318      	adds	r3, #24
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80033d0:	4b34      	ldr	r3, [pc, #208]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43db      	mvns	r3, r3
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4013      	ands	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80033f4:	4a2b      	ldr	r2, [pc, #172]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80033fa:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43db      	mvns	r3, r3
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4013      	ands	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800341e:	4a21      	ldr	r2, [pc, #132]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003424:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800342a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	43db      	mvns	r3, r3
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4013      	ands	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800344a:	4a16      	ldr	r2, [pc, #88]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003452:	4b14      	ldr	r3, [pc, #80]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 8003454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003458:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	43db      	mvns	r3, r3
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4013      	ands	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003478:	4a0a      	ldr	r2, [pc, #40]	@ (80034a4 <HAL_GPIO_Init+0x29c>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	3301      	adds	r3, #1
 8003484:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	f47f aec1 	bne.w	8003218 <HAL_GPIO_Init+0x10>
  }
}
 8003496:	bf00      	nop
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	44022000 	.word	0x44022000
 80034a8:	002f7f7f 	.word	0x002f7f7f

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
 80034b8:	4613      	mov	r3, r2
 80034ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034c8:	e002      	b.n	80034d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <HAL_ICACHE_Enable+0x1c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a04      	ldr	r2, [pc, #16]	@ (80034f8 <HAL_ICACHE_Enable+0x1c>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40030400 	.word	0x40030400

080034fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f000 bc28 	b.w	8003d60 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003510:	4b94      	ldr	r3, [pc, #592]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f003 0318 	and.w	r3, r3, #24
 8003518:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800351a:	4b92      	ldr	r3, [pc, #584]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d05b      	beq.n	80035e8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b08      	cmp	r3, #8
 8003534:	d005      	beq.n	8003542 <HAL_RCC_OscConfig+0x46>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2b18      	cmp	r3, #24
 800353a:	d114      	bne.n	8003566 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d111      	bne.n	8003566 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f000 bc08 	b.w	8003d60 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003550:	4b84      	ldr	r3, [pc, #528]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	4981      	ldr	r1, [pc, #516]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003560:	4313      	orrs	r3, r2
 8003562:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003564:	e040      	b.n	80035e8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d023      	beq.n	80035b6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800356e:	4b7d      	ldr	r3, [pc, #500]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7c      	ldr	r2, [pc, #496]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fe f9af 	bl	80018dc <HAL_GetTick>
 800357e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003582:	f7fe f9ab 	bl	80018dc <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e3e5      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003594:	4b73      	ldr	r3, [pc, #460]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80035a0:	4b70      	ldr	r3, [pc, #448]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	496d      	ldr	r1, [pc, #436]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	618b      	str	r3, [r1, #24]
 80035b4:	e018      	b.n	80035e8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035b6:	4b6b      	ldr	r3, [pc, #428]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80035bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fe f98b 	bl	80018dc <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80035ca:	f7fe f987 	bl	80018dc <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e3c1      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80035dc:	4b61      	ldr	r3, [pc, #388]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a0 	beq.w	8003736 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_OscConfig+0x10c>
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b18      	cmp	r3, #24
 8003600:	d109      	bne.n	8003616 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f040 8092 	bne.w	8003736 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e3a4      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x132>
 8003620:	4b50      	ldr	r3, [pc, #320]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a4f      	ldr	r2, [pc, #316]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	e058      	b.n	80036e0 <HAL_RCC_OscConfig+0x1e4>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d112      	bne.n	800365c <HAL_RCC_OscConfig+0x160>
 8003636:	4b4b      	ldr	r3, [pc, #300]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a4a      	ldr	r2, [pc, #296]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 800363c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b48      	ldr	r3, [pc, #288]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a47      	ldr	r2, [pc, #284]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003648:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b45      	ldr	r3, [pc, #276]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a44      	ldr	r2, [pc, #272]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e041      	b.n	80036e0 <HAL_RCC_OscConfig+0x1e4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003664:	d112      	bne.n	800368c <HAL_RCC_OscConfig+0x190>
 8003666:	4b3f      	ldr	r3, [pc, #252]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a3e      	ldr	r2, [pc, #248]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b3c      	ldr	r3, [pc, #240]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3b      	ldr	r2, [pc, #236]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003678:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b39      	ldr	r3, [pc, #228]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a38      	ldr	r2, [pc, #224]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e029      	b.n	80036e0 <HAL_RCC_OscConfig+0x1e4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003694:	d112      	bne.n	80036bc <HAL_RCC_OscConfig+0x1c0>
 8003696:	4b33      	ldr	r3, [pc, #204]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a32      	ldr	r2, [pc, #200]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 800369c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4b30      	ldr	r3, [pc, #192]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e011      	b.n	80036e0 <HAL_RCC_OscConfig+0x1e4>
 80036bc:	4b29      	ldr	r3, [pc, #164]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a28      	ldr	r2, [pc, #160]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b26      	ldr	r3, [pc, #152]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a25      	ldr	r2, [pc, #148]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b23      	ldr	r3, [pc, #140]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a22      	ldr	r2, [pc, #136]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 80036da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80036de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe f8f8 	bl	80018dc <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80036f0:	f7fe f8f4 	bl	80018dc <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e32e      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003702:	4b18      	ldr	r3, [pc, #96]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x1f4>
 800370e:	e012      	b.n	8003736 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fe f8e4 	bl	80018dc <HAL_GetTick>
 8003714:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003718:	f7fe f8e0 	bl	80018dc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	@ 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e31a      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800372a:	4b0e      	ldr	r3, [pc, #56]	@ (8003764 <HAL_RCC_OscConfig+0x268>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 809a 	beq.w	8003878 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_RCC_OscConfig+0x25a>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b18      	cmp	r3, #24
 800374e:	d149      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d146      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e2fe      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
 8003762:	bf00      	nop
 8003764:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800376e:	4b9a      	ldr	r3, [pc, #616]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0218 	and.w	r2, r3, #24
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	429a      	cmp	r2, r3
 800377c:	d014      	beq.n	80037a8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800377e:	4b96      	ldr	r3, [pc, #600]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 0218 	bic.w	r2, r3, #24
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	4993      	ldr	r1, [pc, #588]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003790:	f000 fdd0 	bl	8004334 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003794:	4b91      	ldr	r3, [pc, #580]	@ (80039dc <HAL_RCC_OscConfig+0x4e0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe f815 	bl	80017c8 <HAL_InitTick>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e2db      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fe f898 	bl	80018dc <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80037b0:	f7fe f894 	bl	80018dc <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e2ce      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c2:	4b85      	ldr	r3, [pc, #532]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80037ce:	4b82      	ldr	r3, [pc, #520]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	497e      	ldr	r1, [pc, #504]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80037e2:	e049      	b.n	8003878 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02c      	beq.n	8003846 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80037ec:	4b7a      	ldr	r3, [pc, #488]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 0218 	bic.w	r2, r3, #24
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	4977      	ldr	r1, [pc, #476]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80037fe:	4b76      	ldr	r3, [pc, #472]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a75      	ldr	r2, [pc, #468]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fe f867 	bl	80018dc <HAL_GetTick>
 800380e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003812:	f7fe f863 	bl	80018dc <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e29d      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003824:	4b6c      	ldr	r3, [pc, #432]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003830:	4b69      	ldr	r3, [pc, #420]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	4966      	ldr	r1, [pc, #408]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003840:	4313      	orrs	r3, r2
 8003842:	610b      	str	r3, [r1, #16]
 8003844:	e018      	b.n	8003878 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003846:	4b64      	ldr	r3, [pc, #400]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a63      	ldr	r2, [pc, #396]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fe f843 	bl	80018dc <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800385a:	f7fe f83f 	bl	80018dc <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e279      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800386c:	4b5a      	ldr	r3, [pc, #360]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d03c      	beq.n	80038fe <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01c      	beq.n	80038c6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388c:	4b52      	ldr	r3, [pc, #328]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800388e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003892:	4a51      	ldr	r2, [pc, #324]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003894:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003898:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fe f81e 	bl	80018dc <HAL_GetTick>
 80038a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80038a4:	f7fe f81a 	bl	80018dc <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e254      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80038b6:	4b48      	ldr	r3, [pc, #288]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80038b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ef      	beq.n	80038a4 <HAL_RCC_OscConfig+0x3a8>
 80038c4:	e01b      	b.n	80038fe <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c6:	4b44      	ldr	r3, [pc, #272]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80038c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038cc:	4a42      	ldr	r2, [pc, #264]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80038ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fe f801 	bl	80018dc <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80038de:	f7fd fffd 	bl	80018dc <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e237      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038f0:	4b39      	ldr	r3, [pc, #228]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80038f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ef      	bne.n	80038de <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80d2 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800390c:	4b34      	ldr	r3, [pc, #208]	@ (80039e0 <HAL_RCC_OscConfig+0x4e4>)
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d118      	bne.n	800394a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003918:	4b31      	ldr	r3, [pc, #196]	@ (80039e0 <HAL_RCC_OscConfig+0x4e4>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	4a30      	ldr	r2, [pc, #192]	@ (80039e0 <HAL_RCC_OscConfig+0x4e4>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003924:	f7fd ffda 	bl	80018dc <HAL_GetTick>
 8003928:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392c:	f7fd ffd6 	bl	80018dc <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e210      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800393e:	4b28      	ldr	r3, [pc, #160]	@ (80039e0 <HAL_RCC_OscConfig+0x4e4>)
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d108      	bne.n	8003964 <HAL_RCC_OscConfig+0x468>
 8003952:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003958:	4a1f      	ldr	r2, [pc, #124]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003962:	e074      	b.n	8003a4e <HAL_RCC_OscConfig+0x552>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d118      	bne.n	800399e <HAL_RCC_OscConfig+0x4a2>
 800396c:	4b1a      	ldr	r3, [pc, #104]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800396e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003972:	4a19      	ldr	r2, [pc, #100]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800397c:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800397e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003982:	4a15      	ldr	r2, [pc, #84]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003988:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800398e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003992:	4a11      	ldr	r2, [pc, #68]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800399c:	e057      	b.n	8003a4e <HAL_RCC_OscConfig+0x552>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d11e      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4e8>
 80039a6:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80039a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039ac:	4a0a      	ldr	r2, [pc, #40]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039b6:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80039b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039bc:	4a06      	ldr	r2, [pc, #24]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80039be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039c6:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80039c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039cc:	4a02      	ldr	r2, [pc, #8]	@ (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039d6:	e03a      	b.n	8003a4e <HAL_RCC_OscConfig+0x552>
 80039d8:	44020c00 	.word	0x44020c00
 80039dc:	20000004 	.word	0x20000004
 80039e0:	44020800 	.word	0x44020800
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b85      	cmp	r3, #133	@ 0x85
 80039ea:	d118      	bne.n	8003a1e <HAL_RCC_OscConfig+0x522>
 80039ec:	4ba2      	ldr	r3, [pc, #648]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 80039ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039f2:	4aa1      	ldr	r2, [pc, #644]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039fc:	4b9e      	ldr	r3, [pc, #632]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 80039fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a02:	4a9d      	ldr	r2, [pc, #628]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a0c:	4b9a      	ldr	r3, [pc, #616]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a12:	4a99      	ldr	r2, [pc, #612]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a1c:	e017      	b.n	8003a4e <HAL_RCC_OscConfig+0x552>
 8003a1e:	4b96      	ldr	r3, [pc, #600]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a24:	4a94      	ldr	r2, [pc, #592]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a2e:	4b92      	ldr	r3, [pc, #584]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a34:	4a90      	ldr	r2, [pc, #576]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a36:	f023 0304 	bic.w	r3, r3, #4
 8003a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a3e:	4b8e      	ldr	r3, [pc, #568]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a44:	4a8c      	ldr	r2, [pc, #560]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a56:	f7fd ff41 	bl	80018dc <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd ff3d 	bl	80018dc <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e175      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a74:	4b80      	ldr	r3, [pc, #512]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ed      	beq.n	8003a5e <HAL_RCC_OscConfig+0x562>
 8003a82:	e015      	b.n	8003ab0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fd ff2a 	bl	80018dc <HAL_GetTick>
 8003a88:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fd ff26 	bl	80018dc <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e15e      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa2:	4b75      	ldr	r3, [pc, #468]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ed      	bne.n	8003a8c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d036      	beq.n	8003b2a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d019      	beq.n	8003af8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6b      	ldr	r2, [pc, #428]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003aca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fd ff04 	bl	80018dc <HAL_GetTick>
 8003ad4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003ad8:	f7fd ff00 	bl	80018dc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e13a      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003aea:	4b63      	ldr	r3, [pc, #396]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x5dc>
 8003af6:	e018      	b.n	8003b2a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003af8:	4b5f      	ldr	r3, [pc, #380]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a5e      	ldr	r2, [pc, #376]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003afe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fd feea 	bl	80018dc <HAL_GetTick>
 8003b08:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003b0c:	f7fd fee6 	bl	80018dc <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e120      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b1e:	4b56      	ldr	r3, [pc, #344]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 8115 	beq.w	8003d5e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b18      	cmp	r3, #24
 8003b38:	f000 80af 	beq.w	8003c9a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	f040 8086 	bne.w	8003c52 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003b46:	4b4c      	ldr	r3, [pc, #304]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a4b      	ldr	r2, [pc, #300]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003b4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7fd fec3 	bl	80018dc <HAL_GetTick>
 8003b56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b5a:	f7fd febf 	bl	80018dc <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e0f9      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b6c:	4b42      	ldr	r3, [pc, #264]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003b78:	4b3f      	ldr	r3, [pc, #252]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b80:	f023 0303 	bic.w	r3, r3, #3
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b8c:	0212      	lsls	r2, r2, #8
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	4939      	ldr	r1, [pc, #228]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	025b      	lsls	r3, r3, #9
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003bc6:	492c      	ldr	r1, [pc, #176]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	4a29      	ldr	r2, [pc, #164]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003bd2:	f023 0310 	bic.w	r3, r3, #16
 8003bd6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bdc:	4a26      	ldr	r2, [pc, #152]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003be2:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be6:	4a24      	ldr	r2, [pc, #144]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003be8:	f043 0310 	orr.w	r3, r3, #16
 8003bec:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003bee:	4b22      	ldr	r3, [pc, #136]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf2:	f023 020c 	bic.w	r2, r3, #12
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	491f      	ldr	r1, [pc, #124]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003c00:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	f023 0220 	bic.w	r2, r3, #32
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0c:	491a      	ldr	r1, [pc, #104]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c12:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c16:	4a18      	ldr	r2, [pc, #96]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003c1e:	4b16      	ldr	r3, [pc, #88]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a15      	ldr	r2, [pc, #84]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003c24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fe57 	bl	80018dc <HAL_GetTick>
 8003c2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003c32:	f7fd fe53 	bl	80018dc <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e08d      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x736>
 8003c50:	e085      	b.n	8003d5e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a08      	ldr	r2, [pc, #32]	@ (8003c78 <HAL_RCC_OscConfig+0x77c>)
 8003c58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fe3d 	bl	80018dc <HAL_GetTick>
 8003c62:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003c66:	f7fd fe39 	bl	80018dc <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d903      	bls.n	8003c7c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e073      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
 8003c78:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003c88:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	4a36      	ldr	r2, [pc, #216]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003c8e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	6293      	str	r3, [r2, #40]	@ 0x28
 8003c98:	e061      	b.n	8003d5e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003c9a:	4b33      	ldr	r3, [pc, #204]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ca0:	4b31      	ldr	r3, [pc, #196]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d031      	beq.n	8003d12 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0203 	and.w	r2, r3, #3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d12a      	bne.n	8003d12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d122      	bne.n	8003d12 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d11a      	bne.n	8003d12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	0a5b      	lsrs	r3, r3, #9
 8003ce0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d111      	bne.n	8003d12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d108      	bne.n	8003d12 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	0e1b      	lsrs	r3, r3, #24
 8003d04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e024      	b.n	8003d60 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d16:	4b14      	ldr	r3, [pc, #80]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	08db      	lsrs	r3, r3, #3
 8003d1c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d01a      	beq.n	8003d5e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003d28:	4b0f      	ldr	r3, [pc, #60]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd fdd2 	bl	80018dc <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003d3a:	bf00      	nop
 8003d3c:	f7fd fdce 	bl	80018dc <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d0f9      	beq.n	8003d3c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4c:	4a06      	ldr	r2, [pc, #24]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003d52:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <HAL_RCC_OscConfig+0x86c>)
 8003d58:	f043 0310 	orr.w	r3, r3, #16
 8003d5c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	44020c00 	.word	0x44020c00

08003d6c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e19e      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	4b83      	ldr	r3, [pc, #524]	@ (8003f90 <HAL_RCC_ClockConfig+0x224>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d910      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b80      	ldr	r3, [pc, #512]	@ (8003f90 <HAL_RCC_ClockConfig+0x224>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 020f 	bic.w	r2, r3, #15
 8003d96:	497e      	ldr	r1, [pc, #504]	@ (8003f90 <HAL_RCC_ClockConfig+0x224>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f90 <HAL_RCC_ClockConfig+0x224>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e186      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d012      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	4b74      	ldr	r3, [pc, #464]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d909      	bls.n	8003de2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003dce:	4b71      	ldr	r3, [pc, #452]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	496d      	ldr	r1, [pc, #436]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d012      	beq.n	8003e14 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	4b68      	ldr	r3, [pc, #416]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d909      	bls.n	8003e14 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003e00:	4b64      	ldr	r3, [pc, #400]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	4961      	ldr	r1, [pc, #388]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	4b5b      	ldr	r3, [pc, #364]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d908      	bls.n	8003e42 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003e30:	4b58      	ldr	r3, [pc, #352]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4955      	ldr	r1, [pc, #340]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d010      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	4b50      	ldr	r3, [pc, #320]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d908      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f023 020f 	bic.w	r2, r3, #15
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	494a      	ldr	r1, [pc, #296]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8093 	beq.w	8003fa4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003e86:	4b43      	ldr	r3, [pc, #268]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d121      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e113      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d115      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e107      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003eb6:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0fb      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec6:	4b33      	ldr	r3, [pc, #204]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e0f3      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f023 0203 	bic.w	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	492c      	ldr	r1, [pc, #176]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee8:	f7fd fcf8 	bl	80018dc <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d112      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7fd fcf0 	bl	80018dc <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0d7      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f0e:	4b21      	ldr	r3, [pc, #132]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f003 0318 	and.w	r3, r3, #24
 8003f16:	2b18      	cmp	r3, #24
 8003f18:	d1ee      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x18c>
 8003f1a:	e043      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d112      	bne.n	8003f4a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003f26:	f7fd fcd9 	bl	80018dc <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e0c0      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f3c:	4b15      	ldr	r3, [pc, #84]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 0318 	and.w	r3, r3, #24
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d1ee      	bne.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>
 8003f48:	e02c      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d122      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003f54:	f7fd fcc2 	bl	80018dc <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e0a9      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <HAL_RCC_ClockConfig+0x228>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f003 0318 	and.w	r3, r3, #24
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d1ee      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x1e8>
 8003f76:	e015      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fd fcb0 	bl	80018dc <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d906      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e097      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
 8003f8e:	bf00      	nop
 8003f90:	40022000 	.word	0x40022000
 8003f94:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f98:	4b4b      	ldr	r3, [pc, #300]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f003 0318 	and.w	r3, r3, #24
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e9      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	4b44      	ldr	r3, [pc, #272]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d208      	bcs.n	8003fd2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003fc0:	4b41      	ldr	r3, [pc, #260]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 020f 	bic.w	r2, r3, #15
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	493e      	ldr	r1, [pc, #248]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80040cc <HAL_RCC_ClockConfig+0x360>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d210      	bcs.n	8004002 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80040cc <HAL_RCC_ClockConfig+0x360>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 020f 	bic.w	r2, r3, #15
 8003fe8:	4938      	ldr	r1, [pc, #224]	@ (80040cc <HAL_RCC_ClockConfig+0x360>)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff0:	4b36      	ldr	r3, [pc, #216]	@ (80040cc <HAL_RCC_ClockConfig+0x360>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e05d      	b.n	80040be <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d010      	beq.n	8004030 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	4b2d      	ldr	r3, [pc, #180]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800401a:	429a      	cmp	r2, r3
 800401c:	d208      	bcs.n	8004030 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800401e:	4b2a      	ldr	r3, [pc, #168]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4927      	ldr	r1, [pc, #156]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 800402c:	4313      	orrs	r3, r2
 800402e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	4b21      	ldr	r3, [pc, #132]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800404a:	429a      	cmp	r2, r3
 800404c:	d209      	bcs.n	8004062 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800404e:	4b1e      	ldr	r3, [pc, #120]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	491a      	ldr	r1, [pc, #104]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	d012      	beq.n	8004094 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800407c:	429a      	cmp	r2, r3
 800407e:	d209      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004080:	4b11      	ldr	r3, [pc, #68]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	490e      	ldr	r1, [pc, #56]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8004090:	4313      	orrs	r3, r2
 8004092:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004094:	f000 f822 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	490b      	ldr	r1, [pc, #44]	@ (80040d0 <HAL_RCC_ClockConfig+0x364>)
 80040a4:	5ccb      	ldrb	r3, [r1, r3]
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <HAL_RCC_ClockConfig+0x368>)
 80040ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80040ae:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <HAL_RCC_ClockConfig+0x36c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fd fb88 	bl	80017c8 <HAL_InitTick>
 80040b8:	4603      	mov	r3, r0
 80040ba:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80040bc:	7afb      	ldrb	r3, [r7, #11]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	44020c00 	.word	0x44020c00
 80040cc:	40022000 	.word	0x40022000
 80040d0:	080053bc 	.word	0x080053bc
 80040d4:	20000000 	.word	0x20000000
 80040d8:	20000004 	.word	0x20000004

080040dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	@ 0x24
 80040e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80040e2:	4b8c      	ldr	r3, [pc, #560]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f003 0318 	and.w	r3, r3, #24
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d102      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80040ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x23c>)
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e107      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040f4:	4b87      	ldr	r3, [pc, #540]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f003 0318 	and.w	r3, r3, #24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d112      	bne.n	8004126 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004100:	4b84      	ldr	r3, [pc, #528]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800410c:	4b81      	ldr	r3, [pc, #516]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	08db      	lsrs	r3, r3, #3
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	4a81      	ldr	r2, [pc, #516]	@ (800431c <HAL_RCC_GetSysClockFreq+0x240>)
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	e0f1      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004120:	4b7e      	ldr	r3, [pc, #504]	@ (800431c <HAL_RCC_GetSysClockFreq+0x240>)
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	e0ee      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004126:	4b7b      	ldr	r3, [pc, #492]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f003 0318 	and.w	r3, r3, #24
 800412e:	2b10      	cmp	r3, #16
 8004130:	d102      	bne.n	8004138 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004132:	4b7b      	ldr	r3, [pc, #492]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x244>)
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	e0e5      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004138:	4b76      	ldr	r3, [pc, #472]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f003 0318 	and.w	r3, r3, #24
 8004140:	2b18      	cmp	r3, #24
 8004142:	f040 80dd 	bne.w	8004300 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004146:	4b73      	ldr	r3, [pc, #460]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004150:	4b70      	ldr	r3, [pc, #448]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800415a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800415c:	4b6d      	ldr	r3, [pc, #436]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004168:	4b6a      	ldr	r3, [pc, #424]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 800416a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	ee07 3a90 	vmov	s15, r3
 800417c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004180:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80b7 	beq.w	80042fa <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d003      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0xbe>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d056      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0x16a>
 8004198:	e077      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800419a:	4b5e      	ldr	r3, [pc, #376]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02d      	beq.n	8004202 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	08db      	lsrs	r3, r3, #3
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	4a5a      	ldr	r2, [pc, #360]	@ (800431c <HAL_RCC_GetSysClockFreq+0x240>)
 80041b2:	fa22 f303 	lsr.w	r3, r2, r3
 80041b6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d0:	4b50      	ldr	r3, [pc, #320]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 80041d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80041e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80041e4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004324 <HAL_RCC_GetSysClockFreq+0x248>
 80041e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80041f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004200:	e065      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004328 <HAL_RCC_GetSysClockFreq+0x24c>
 8004210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004214:	4b3f      	ldr	r3, [pc, #252]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 8004216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421c:	ee07 3a90 	vmov	s15, r3
 8004220:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004224:	ed97 6a02 	vldr	s12, [r7, #8]
 8004228:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004324 <HAL_RCC_GetSysClockFreq+0x248>
 800422c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004230:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004234:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004238:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800423c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004240:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004244:	e043      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	ee07 3a90 	vmov	s15, r3
 800424c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004250:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800432c <HAL_RCC_GetSysClockFreq+0x250>
 8004254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004258:	4b2e      	ldr	r3, [pc, #184]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 800425a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004260:	ee07 3a90 	vmov	s15, r3
 8004264:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004268:	ed97 6a02 	vldr	s12, [r7, #8]
 800426c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004324 <HAL_RCC_GetSysClockFreq+0x248>
 8004270:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004274:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004278:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800427c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004284:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004288:	e021      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004294:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004330 <HAL_RCC_GetSysClockFreq+0x254>
 8004298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429c:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 800429e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80042b0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004324 <HAL_RCC_GetSysClockFreq+0x248>
 80042b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80042bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80042cc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80042ce:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x238>)
 80042d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d2:	0a5b      	lsrs	r3, r3, #9
 80042d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d8:	3301      	adds	r3, #1
 80042da:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042e6:	edd7 6a06 	vldr	s13, [r7, #24]
 80042ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f2:	ee17 3a90 	vmov	r3, s15
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e004      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	e001      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004300:	4b06      	ldr	r3, [pc, #24]	@ (800431c <HAL_RCC_GetSysClockFreq+0x240>)
 8004302:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004304:	69fb      	ldr	r3, [r7, #28]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3724      	adds	r7, #36	@ 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	44020c00 	.word	0x44020c00
 8004318:	003d0900 	.word	0x003d0900
 800431c:	03d09000 	.word	0x03d09000
 8004320:	017d7840 	.word	0x017d7840
 8004324:	46000000 	.word	0x46000000
 8004328:	4c742400 	.word	0x4c742400
 800432c:	4bbebc20 	.word	0x4bbebc20
 8004330:	4a742400 	.word	0x4a742400

08004334 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004338:	f7ff fed0 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004342:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004346:	4907      	ldr	r1, [pc, #28]	@ (8004364 <HAL_RCC_GetHCLKFreq+0x30>)
 8004348:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800434a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800434e:	fa22 f303 	lsr.w	r3, r2, r3
 8004352:	4a05      	ldr	r2, [pc, #20]	@ (8004368 <HAL_RCC_GetHCLKFreq+0x34>)
 8004354:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004356:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <HAL_RCC_GetHCLKFreq+0x34>)
 8004358:	681b      	ldr	r3, [r3, #0]
}
 800435a:	4618      	mov	r0, r3
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	44020c00 	.word	0x44020c00
 8004364:	080053bc 	.word	0x080053bc
 8004368:	20000000 	.word	0x20000000

0800436c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e049      	b.n	8004412 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fd f86c 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 fbe4 	bl	8004b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e033      	b.n	800449c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a19      	ldr	r2, [pc, #100]	@ (80044a8 <HAL_TIM_Base_Start+0x8c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_TIM_Base_Start+0x3e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444e:	d004      	beq.n	800445a <HAL_TIM_Base_Start+0x3e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a15      	ldr	r2, [pc, #84]	@ (80044ac <HAL_TIM_Base_Start+0x90>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d115      	bne.n	8004486 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	4b13      	ldr	r3, [pc, #76]	@ (80044b0 <HAL_TIM_Base_Start+0x94>)
 8004462:	4013      	ands	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b06      	cmp	r3, #6
 800446a:	d015      	beq.n	8004498 <HAL_TIM_Base_Start+0x7c>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004472:	d011      	beq.n	8004498 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004484:	e008      	b.n	8004498 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e000      	b.n	800449a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40000400 	.word	0x40000400
 80044b0:	00010007 	.word	0x00010007

080044b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e049      	b.n	800455a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f841 	bl	8004562 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f000 fb40 	bl	8004b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_TIM_PWM_Start+0x24>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	e03c      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d109      	bne.n	80045b6 <HAL_TIM_PWM_Start+0x3e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	bf14      	ite	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	2300      	moveq	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	e02f      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d109      	bne.n	80045d0 <HAL_TIM_PWM_Start+0x58>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e022      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d109      	bne.n	80045ea <HAL_TIM_PWM_Start+0x72>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	bf14      	ite	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	2300      	moveq	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	e015      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d109      	bne.n	8004604 <HAL_TIM_PWM_Start+0x8c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e008      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e06f      	b.n	80046fe <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_TIM_PWM_Start+0xb6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800462c:	e023      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d104      	bne.n	800463e <HAL_TIM_PWM_Start+0xc6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800463c:	e01b      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Start+0xd6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800464c:	e013      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0xe6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800465c:	e00b      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b10      	cmp	r3, #16
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0xf6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800466c:	e003      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2201      	movs	r2, #1
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fdc6 	bl	8005210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1f      	ldr	r2, [pc, #124]	@ (8004708 <HAL_TIM_PWM_Start+0x190>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d107      	bne.n	800469e <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a19      	ldr	r2, [pc, #100]	@ (8004708 <HAL_TIM_PWM_Start+0x190>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_TIM_PWM_Start+0x144>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b0:	d004      	beq.n	80046bc <HAL_TIM_PWM_Start+0x144>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a15      	ldr	r2, [pc, #84]	@ (800470c <HAL_TIM_PWM_Start+0x194>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d115      	bne.n	80046e8 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <HAL_TIM_PWM_Start+0x198>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d015      	beq.n	80046fa <HAL_TIM_PWM_Start+0x182>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d4:	d011      	beq.n	80046fa <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0201 	orr.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e6:	e008      	b.n	80046fa <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e000      	b.n	80046fc <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40000400 	.word	0x40000400
 8004710:	00010007 	.word	0x00010007

08004714 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800472e:	2302      	movs	r3, #2
 8004730:	e0ff      	b.n	8004932 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b14      	cmp	r3, #20
 800473e:	f200 80f0 	bhi.w	8004922 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004742:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	0800479d 	.word	0x0800479d
 800474c:	08004923 	.word	0x08004923
 8004750:	08004923 	.word	0x08004923
 8004754:	08004923 	.word	0x08004923
 8004758:	080047dd 	.word	0x080047dd
 800475c:	08004923 	.word	0x08004923
 8004760:	08004923 	.word	0x08004923
 8004764:	08004923 	.word	0x08004923
 8004768:	0800481f 	.word	0x0800481f
 800476c:	08004923 	.word	0x08004923
 8004770:	08004923 	.word	0x08004923
 8004774:	08004923 	.word	0x08004923
 8004778:	0800485f 	.word	0x0800485f
 800477c:	08004923 	.word	0x08004923
 8004780:	08004923 	.word	0x08004923
 8004784:	08004923 	.word	0x08004923
 8004788:	080048a1 	.word	0x080048a1
 800478c:	08004923 	.word	0x08004923
 8004790:	08004923 	.word	0x08004923
 8004794:	08004923 	.word	0x08004923
 8004798:	080048e1 	.word	0x080048e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fa4e 	bl	8004c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0208 	orr.w	r2, r2, #8
 80047b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0204 	bic.w	r2, r2, #4
 80047c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6999      	ldr	r1, [r3, #24]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	619a      	str	r2, [r3, #24]
      break;
 80047da:	e0a5      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fa96 	bl	8004d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6999      	ldr	r1, [r3, #24]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	021a      	lsls	r2, r3, #8
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	619a      	str	r2, [r3, #24]
      break;
 800481c:	e084      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fae3 	bl	8004df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0208 	orr.w	r2, r2, #8
 8004838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0204 	bic.w	r2, r2, #4
 8004848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	61da      	str	r2, [r3, #28]
      break;
 800485c:	e064      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fb2f 	bl	8004ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69d9      	ldr	r1, [r3, #28]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	021a      	lsls	r2, r3, #8
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	61da      	str	r2, [r3, #28]
      break;
 800489e:	e043      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fb7c 	bl	8004fa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0208 	orr.w	r2, r2, #8
 80048ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0204 	bic.w	r2, r2, #4
 80048ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048de:	e023      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fba8 	bl	800503c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800490a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	021a      	lsls	r2, r3, #8
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004920:	e002      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
      break;
 8004926:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004930:	7dfb      	ldrb	r3, [r7, #23]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop

0800493c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIM_ConfigClockSource+0x1c>
 8004954:	2302      	movs	r3, #2
 8004956:	e0fe      	b.n	8004b56 <HAL_TIM_ConfigClockSource+0x21a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004976:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800497a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004982:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004994:	f000 80c9 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 8004998:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800499c:	f200 80ce 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 80049a0:	4a6f      	ldr	r2, [pc, #444]	@ (8004b60 <HAL_TIM_ConfigClockSource+0x224>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f000 80c1 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 80049a8:	4a6d      	ldr	r2, [pc, #436]	@ (8004b60 <HAL_TIM_ConfigClockSource+0x224>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f200 80c6 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 80049b0:	4a6c      	ldr	r2, [pc, #432]	@ (8004b64 <HAL_TIM_ConfigClockSource+0x228>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f000 80b9 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 80049b8:	4a6a      	ldr	r2, [pc, #424]	@ (8004b64 <HAL_TIM_ConfigClockSource+0x228>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f200 80be 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 80049c0:	4a69      	ldr	r2, [pc, #420]	@ (8004b68 <HAL_TIM_ConfigClockSource+0x22c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f000 80b1 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 80049c8:	4a67      	ldr	r2, [pc, #412]	@ (8004b68 <HAL_TIM_ConfigClockSource+0x22c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f200 80b6 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 80049d0:	4a66      	ldr	r2, [pc, #408]	@ (8004b6c <HAL_TIM_ConfigClockSource+0x230>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	f000 80a9 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 80049d8:	4a64      	ldr	r2, [pc, #400]	@ (8004b6c <HAL_TIM_ConfigClockSource+0x230>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	f200 80ae 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 80049e0:	4a63      	ldr	r2, [pc, #396]	@ (8004b70 <HAL_TIM_ConfigClockSource+0x234>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	f000 80a1 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 80049e8:	4a61      	ldr	r2, [pc, #388]	@ (8004b70 <HAL_TIM_ConfigClockSource+0x234>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	f200 80a6 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 80049f0:	4a60      	ldr	r2, [pc, #384]	@ (8004b74 <HAL_TIM_ConfigClockSource+0x238>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	f000 8099 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 80049f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004b74 <HAL_TIM_ConfigClockSource+0x238>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f200 809e 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004a04:	f000 8091 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 8004a08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004a0c:	f200 8096 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a14:	f000 8089 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 8004a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1c:	f200 808e 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a24:	d03e      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x168>
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2a:	f200 8087 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a32:	f000 8086 	beq.w	8004b42 <HAL_TIM_ConfigClockSource+0x206>
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3a:	d87f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a3c:	2b70      	cmp	r3, #112	@ 0x70
 8004a3e:	d01a      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x13a>
 8004a40:	2b70      	cmp	r3, #112	@ 0x70
 8004a42:	d87b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a44:	2b60      	cmp	r3, #96	@ 0x60
 8004a46:	d050      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x1ae>
 8004a48:	2b60      	cmp	r3, #96	@ 0x60
 8004a4a:	d877      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a4c:	2b50      	cmp	r3, #80	@ 0x50
 8004a4e:	d03c      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x18e>
 8004a50:	2b50      	cmp	r3, #80	@ 0x50
 8004a52:	d873      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a54:	2b40      	cmp	r3, #64	@ 0x40
 8004a56:	d058      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x1ce>
 8004a58:	2b40      	cmp	r3, #64	@ 0x40
 8004a5a:	d86f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a5c:	2b30      	cmp	r3, #48	@ 0x30
 8004a5e:	d064      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 8004a60:	2b30      	cmp	r3, #48	@ 0x30
 8004a62:	d86b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d060      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d867      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x200>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05c      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d05a      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x1ee>
 8004a74:	e062      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a86:	f000 fba3 	bl	80051d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	609a      	str	r2, [r3, #8]
      break;
 8004aa2:	e04f      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab4:	f000 fb8c 	bl	80051d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e03c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fafe 	bl	80050d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2150      	movs	r1, #80	@ 0x50
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fb57 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e02c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 fb1d 	bl	8005136 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2160      	movs	r1, #96	@ 0x60
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fb47 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 8004b08:	e01c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b16:	461a      	mov	r2, r3
 8004b18:	f000 fade 	bl	80050d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2140      	movs	r1, #64	@ 0x40
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fb37 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f000 fb2e 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 8004b3a:	e003      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8004b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	00100070 	.word	0x00100070
 8004b64:	00100060 	.word	0x00100060
 8004b68:	00100050 	.word	0x00100050
 8004b6c:	00100040 	.word	0x00100040
 8004b70:	00100030 	.word	0x00100030
 8004b74:	00100020 	.word	0x00100020

08004b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c3c <TIM_Base_SetConfig+0xc4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0x28>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0x28>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a29      	ldr	r2, [pc, #164]	@ (8004c40 <TIM_Base_SetConfig+0xc8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d108      	bne.n	8004bb2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a21      	ldr	r2, [pc, #132]	@ (8004c3c <TIM_Base_SetConfig+0xc4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_Base_SetConfig+0x52>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc0:	d003      	beq.n	8004bca <TIM_Base_SetConfig+0x52>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c40 <TIM_Base_SetConfig+0xc8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d108      	bne.n	8004bdc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a0e      	ldr	r2, [pc, #56]	@ (8004c3c <TIM_Base_SetConfig+0xc4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d103      	bne.n	8004c10 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d105      	bne.n	8004c2e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f023 0201 	bic.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	611a      	str	r2, [r3, #16]
  }
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40000400 	.word	0x40000400

08004c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f023 0201 	bic.w	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f023 0302 	bic.w	r3, r3, #2
 8004c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d10 <TIM_OC1_SetConfig+0xcc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d10c      	bne.n	8004cbe <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0308 	bic.w	r3, r3, #8
 8004caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f023 0304 	bic.w	r3, r3, #4
 8004cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a13      	ldr	r2, [pc, #76]	@ (8004d10 <TIM_OC1_SetConfig+0xcc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d111      	bne.n	8004cea <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	621a      	str	r2, [r3, #32]
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40012c00 	.word	0x40012c00

08004d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f023 0210 	bic.w	r2, r3, #16
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0320 	bic.w	r3, r3, #32
 8004d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a1e      	ldr	r2, [pc, #120]	@ (8004dec <TIM_OC2_SetConfig+0xd8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10d      	bne.n	8004d94 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a15      	ldr	r2, [pc, #84]	@ (8004dec <TIM_OC2_SetConfig+0xd8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d113      	bne.n	8004dc4 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00

08004df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec4 <TIM_OC3_SetConfig+0xd4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d10d      	bne.n	8004e6e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a14      	ldr	r2, [pc, #80]	@ (8004ec4 <TIM_OC3_SetConfig+0xd4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d113      	bne.n	8004e9e <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00

08004ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	031b      	lsls	r3, r3, #12
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa0 <TIM_OC4_SetConfig+0xd8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d10d      	bne.n	8004f48 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	031b      	lsls	r3, r3, #12
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a15      	ldr	r2, [pc, #84]	@ (8004fa0 <TIM_OC4_SetConfig+0xd8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d113      	bne.n	8004f78 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	019b      	lsls	r3, r3, #6
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40012c00 	.word	0x40012c00

08004fa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8005038 <TIM_OC5_SetConfig+0x94>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d109      	bne.n	8005012 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	621a      	str	r2, [r3, #32]
}
 800502c:	bf00      	nop
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40012c00 	.word	0x40012c00

0800503c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	051b      	lsls	r3, r3, #20
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a10      	ldr	r2, [pc, #64]	@ (80050d4 <TIM_OC6_SetConfig+0x98>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d109      	bne.n	80050ac <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800509e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	029b      	lsls	r3, r3, #10
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40012c00 	.word	0x40012c00

080050d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0201 	bic.w	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 030a 	bic.w	r3, r3, #10
 8005114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005136:	b480      	push	{r7}
 8005138:	b087      	sub	sp, #28
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f023 0210 	bic.w	r2, r3, #16
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	031b      	lsls	r3, r3, #12
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005172:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80051ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f043 0307 	orr.w	r3, r3, #7
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	021a      	lsls	r2, r3, #8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2201      	movs	r2, #1
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1a      	ldr	r2, [r3, #32]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	43db      	mvns	r3, r3
 8005232:	401a      	ands	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	431a      	orrs	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005270:	2302      	movs	r3, #2
 8005272:	e051      	b.n	8005318 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a22      	ldr	r2, [pc, #136]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d108      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a14      	ldr	r2, [pc, #80]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d009      	beq.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e0:	d004      	beq.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a10      	ldr	r2, [pc, #64]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d10c      	bne.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40000400 	.word	0x40000400

0800532c <memset>:
 800532c:	4402      	add	r2, r0
 800532e:	4603      	mov	r3, r0
 8005330:	4293      	cmp	r3, r2
 8005332:	d100      	bne.n	8005336 <memset+0xa>
 8005334:	4770      	bx	lr
 8005336:	f803 1b01 	strb.w	r1, [r3], #1
 800533a:	e7f9      	b.n	8005330 <memset+0x4>

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4d0d      	ldr	r5, [pc, #52]	@ (8005374 <__libc_init_array+0x38>)
 8005340:	2600      	movs	r6, #0
 8005342:	4c0d      	ldr	r4, [pc, #52]	@ (8005378 <__libc_init_array+0x3c>)
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	4d0b      	ldr	r5, [pc, #44]	@ (800537c <__libc_init_array+0x40>)
 800534e:	2600      	movs	r6, #0
 8005350:	4c0b      	ldr	r4, [pc, #44]	@ (8005380 <__libc_init_array+0x44>)
 8005352:	f000 f817 	bl	8005384 <_init>
 8005356:	1b64      	subs	r4, r4, r5
 8005358:	10a4      	asrs	r4, r4, #2
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f855 3b04 	ldr.w	r3, [r5], #4
 8005364:	3601      	adds	r6, #1
 8005366:	4798      	blx	r3
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f855 3b04 	ldr.w	r3, [r5], #4
 800536e:	3601      	adds	r6, #1
 8005370:	4798      	blx	r3
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	080053cc 	.word	0x080053cc
 8005378:	080053cc 	.word	0x080053cc
 800537c:	080053cc 	.word	0x080053cc
 8005380:	080053d0 	.word	0x080053d0

08005384 <_init>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr

08005390 <_fini>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr
