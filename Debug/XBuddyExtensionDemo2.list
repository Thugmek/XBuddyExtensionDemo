
XBuddyExtensionDemo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee0  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003138  08003138  00004138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003168  08003168  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003168  08003168  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003168  08003168  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003168  08003168  00004168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800316c  0800316c  0000416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003170  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  0800317c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800317c  000050c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c15a  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001865  00000000  00000000  0001119c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00012a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000936  00000000  00000000  00013600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f299  00000000  00000000  00013f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d170  00000000  00000000  000331cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c846a  00000000  00000000  0004033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001087a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003288  00000000  00000000  001087ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0010ba74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08003120 	.word	0x08003120

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08003120 	.word	0x08003120

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b099      	sub	sp, #100	@ 0x64
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 fc89 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f8c3 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f000 fa53 	bl	8000750 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002aa:	f000 f91f 	bl	80004ec <MX_ICACHE_Init>
  MX_TIM2_Init();
 80002ae:	f000 f929 	bl	8000504 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002b2:	f000 f9bf 	bl	8000634 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002b6:	2100      	movs	r1, #0
 80002b8:	4854      	ldr	r0, [pc, #336]	@ (800040c <main+0x174>)
 80002ba:	f002 f82b 	bl	8002314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80002be:	2104      	movs	r1, #4
 80002c0:	4852      	ldr	r0, [pc, #328]	@ (800040c <main+0x174>)
 80002c2:	f002 f827 	bl	8002314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80002c6:	2108      	movs	r1, #8
 80002c8:	4850      	ldr	r0, [pc, #320]	@ (800040c <main+0x174>)
 80002ca:	f002 f823 	bl	8002314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80002ce:	210c      	movs	r1, #12
 80002d0:	484e      	ldr	r0, [pc, #312]	@ (800040c <main+0x174>)
 80002d2:	f002 f81f 	bl	8002314 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002d6:	2100      	movs	r1, #0
 80002d8:	484d      	ldr	r0, [pc, #308]	@ (8000410 <main+0x178>)
 80002da:	f002 f81b 	bl	8002314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002de:	2104      	movs	r1, #4
 80002e0:	484b      	ldr	r0, [pc, #300]	@ (8000410 <main+0x178>)
 80002e2:	f002 f817 	bl	8002314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002e6:	2108      	movs	r1, #8
 80002e8:	4849      	ldr	r0, [pc, #292]	@ (8000410 <main+0x178>)
 80002ea:	f002 f813 	bl	8002314 <HAL_TIM_PWM_Start>

  const float color_red[4] = 	{0,0,0,1};
 80002ee:	f04f 0300 	mov.w	r3, #0
 80002f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80002fa:	f04f 0300 	mov.w	r3, #0
 80002fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000300:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000304:	653b      	str	r3, [r7, #80]	@ 0x50
  const float color_green[4] = 	{0,0,1,0};
 8000306:	f04f 0300 	mov.w	r3, #0
 800030a:	637b      	str	r3, [r7, #52]	@ 0x34
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000312:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000318:	f04f 0300 	mov.w	r3, #0
 800031c:	643b      	str	r3, [r7, #64]	@ 0x40
  const float color_blue[4] = 	{0,1,0,0};
 800031e:	f04f 0300 	mov.w	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	@ 0x24
 8000324:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800032a:	f04f 0300 	mov.w	r3, #0
 800032e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	633b      	str	r3, [r7, #48]	@ 0x30
  const float color_yellow[4] = {0,0,1,1};
 8000336:	4b37      	ldr	r3, [pc, #220]	@ (8000414 <main+0x17c>)
 8000338:	f107 0414 	add.w	r4, r7, #20
 800033c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800033e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const float color_white[4] = 	{0,1,1,1};
 8000342:	4b35      	ldr	r3, [pc, #212]	@ (8000418 <main+0x180>)
 8000344:	1d3c      	adds	r4, r7, #4
 8000346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const int blink_delay_ms = 2000;
 800034c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000350:	65fb      	str	r3, [r7, #92]	@ 0x5c

  const float led_power = 0.8;
 8000352:	4b32      	ldr	r3, [pc, #200]	@ (800041c <main+0x184>)
 8000354:	65bb      	str	r3, [r7, #88]	@ 0x58
  const float fan_power = 0.35;
 8000356:	4b32      	ldr	r3, [pc, #200]	@ (8000420 <main+0x188>)
 8000358:	657b      	str	r3, [r7, #84]	@ 0x54
	  /*TIM2->CCR1 = 2000; //D_PWM_W
	  TIM2->CCR2 = 2000; //D_PWM_B
	  TIM2->CCR3 = 2000; //D_PWM_G
	  TIM2->CCR4 = 2000; //D_PWM_R*/

	  TIM3->CCR1 = (int)(65532*led_power); //D_PWM_STRIP - 80% PWM
 800035a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800035e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000424 <main+0x18c>
 8000362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800036a:	4b2f      	ldr	r3, [pc, #188]	@ (8000428 <main+0x190>)
 800036c:	ee17 2a90 	vmov	r2, s15
 8000370:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR2 = 65532 - (int)(65532*fan_power); //D_FAN2_PWM - 55% PWM (value inverted)
 8000372:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000376:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8000424 <main+0x18c>
 800037a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800037e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000382:	ee17 3a90 	vmov	r3, s15
 8000386:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800038a:	33fc      	adds	r3, #252	@ 0xfc
 800038c:	4a26      	ldr	r2, [pc, #152]	@ (8000428 <main+0x190>)
 800038e:	6393      	str	r3, [r2, #56]	@ 0x38
	  TIM3->CCR3 = 65532 - (int)(65532*fan_power); //D_FAN1_PWM - 55% PWM (value inverted)
 8000390:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000394:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000424 <main+0x18c>
 8000398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800039c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003a0:	ee17 3a90 	vmov	r3, s15
 80003a4:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80003a8:	33fc      	adds	r3, #252	@ 0xfc
 80003aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000428 <main+0x190>)
 80003ac:	63d3      	str	r3, [r2, #60]	@ 0x3c

	  while (1){
		  set_wbgr_strip_color(color_white);
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fa45 	bl	8000840 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 80003b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fcb9 	bl	8000d30 <HAL_Delay>
		  set_wbgr_strip_color(color_blue);
 80003be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fa3c 	bl	8000840 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 80003c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fcb0 	bl	8000d30 <HAL_Delay>
		  set_wbgr_strip_color(color_green);
 80003d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 fa33 	bl	8000840 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 80003da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fca7 	bl	8000d30 <HAL_Delay>
		  set_wbgr_strip_color(color_yellow);
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fa2a 	bl	8000840 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 80003ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fc9e 	bl	8000d30 <HAL_Delay>
		  set_wbgr_strip_color(color_red);
 80003f4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fa21 	bl	8000840 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 80003fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fc95 	bl	8000d30 <HAL_Delay>
		  set_wbgr_strip_color(color_white);
 8000406:	bf00      	nop
 8000408:	e7d1      	b.n	80003ae <main+0x116>
 800040a:	bf00      	nop
 800040c:	20000028 	.word	0x20000028
 8000410:	20000074 	.word	0x20000074
 8000414:	08003138 	.word	0x08003138
 8000418:	08003148 	.word	0x08003148
 800041c:	3f4ccccd 	.word	0x3f4ccccd
 8000420:	3eb33333 	.word	0x3eb33333
 8000424:	477ffc00 	.word	0x477ffc00
 8000428:	40000400 	.word	0x40000400

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b09c      	sub	sp, #112	@ 0x70
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0320 	add.w	r3, r7, #32
 8000436:	2250      	movs	r2, #80	@ 0x50
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fe44 	bl	80030c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	611a      	str	r2, [r3, #16]
 8000450:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000452:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <SystemClock_Config+0xb8>)
 8000454:	691b      	ldr	r3, [r3, #16]
 8000456:	4a23      	ldr	r2, [pc, #140]	@ (80004e4 <SystemClock_Config+0xb8>)
 8000458:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800045c:	6113      	str	r3, [r2, #16]
 800045e:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <SystemClock_Config+0xb8>)
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800046a:	bf00      	nop
 800046c:	4b1d      	ldr	r3, [pc, #116]	@ (80004e4 <SystemClock_Config+0xb8>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f003 0308 	and.w	r3, r3, #8
 8000474:	2b08      	cmp	r3, #8
 8000476:	d1f9      	bne.n	800046c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000478:	2302      	movs	r3, #2
 800047a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000480:	2308      	movs	r3, #8
 8000482:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000484:	2340      	movs	r3, #64	@ 0x40
 8000486:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000488:	2300      	movs	r3, #0
 800048a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048c:	f107 0320 	add.w	r3, r7, #32
 8000490:	4618      	mov	r0, r3
 8000492:	f000 ff4f 	bl	8001334 <HAL_RCC_OscConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800049c:	f000 fa18 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	231f      	movs	r3, #31
 80004a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 fb70 	bl	8001ba4 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80004ca:	f000 fa01 	bl	80008d0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <SystemClock_Config+0xbc>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <SystemClock_Config+0xbc>)
 80004d4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	3770      	adds	r7, #112	@ 0x70
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	44020800 	.word	0x44020800
 80004e8:	40022000 	.word	0x40022000

080004ec <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004f0:	f000 ff10 	bl	8001314 <HAL_ICACHE_Enable>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80004fa:	f000 f9e9 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08e      	sub	sp, #56	@ 0x38
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000518:	f107 031c 	add.w	r3, r7, #28
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000536:	4b3e      	ldr	r3, [pc, #248]	@ (8000630 <MX_TIM2_Init+0x12c>)
 8000538:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800053c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800053e:	4b3c      	ldr	r3, [pc, #240]	@ (8000630 <MX_TIM2_Init+0x12c>)
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b3a      	ldr	r3, [pc, #232]	@ (8000630 <MX_TIM2_Init+0x12c>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800054a:	4b39      	ldr	r3, [pc, #228]	@ (8000630 <MX_TIM2_Init+0x12c>)
 800054c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000550:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000552:	4b37      	ldr	r3, [pc, #220]	@ (8000630 <MX_TIM2_Init+0x12c>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000558:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <MX_TIM2_Init+0x12c>)
 800055a:	2280      	movs	r2, #128	@ 0x80
 800055c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800055e:	4834      	ldr	r0, [pc, #208]	@ (8000630 <MX_TIM2_Init+0x12c>)
 8000560:	f001 fe20 	bl	80021a4 <HAL_TIM_Base_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800056a:	f000 f9b1 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000572:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000574:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000578:	4619      	mov	r1, r3
 800057a:	482d      	ldr	r0, [pc, #180]	@ (8000630 <MX_TIM2_Init+0x12c>)
 800057c:	f002 f8ac 	bl	80026d8 <HAL_TIM_ConfigClockSource>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000586:	f000 f9a3 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800058a:	4829      	ldr	r0, [pc, #164]	@ (8000630 <MX_TIM2_Init+0x12c>)
 800058c:	f001 fe61 	bl	8002252 <HAL_TIM_PWM_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000596:	f000 f99b 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	4619      	mov	r1, r3
 80005a8:	4821      	ldr	r0, [pc, #132]	@ (8000630 <MX_TIM2_Init+0x12c>)
 80005aa:	f002 fd25 	bl	8002ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80005b4:	f000 f98c 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b8:	2360      	movs	r3, #96	@ 0x60
 80005ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	4619      	mov	r1, r3
 80005ce:	4818      	ldr	r0, [pc, #96]	@ (8000630 <MX_TIM2_Init+0x12c>)
 80005d0:	f001 ff6e 	bl	80024b0 <HAL_TIM_PWM_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80005da:	f000 f979 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2204      	movs	r2, #4
 80005e2:	4619      	mov	r1, r3
 80005e4:	4812      	ldr	r0, [pc, #72]	@ (8000630 <MX_TIM2_Init+0x12c>)
 80005e6:	f001 ff63 	bl	80024b0 <HAL_TIM_PWM_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80005f0:	f000 f96e 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	2208      	movs	r2, #8
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_TIM2_Init+0x12c>)
 80005fc:	f001 ff58 	bl	80024b0 <HAL_TIM_PWM_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000606:	f000 f963 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	220c      	movs	r2, #12
 800060e:	4619      	mov	r1, r3
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <MX_TIM2_Init+0x12c>)
 8000612:	f001 ff4d 	bl	80024b0 <HAL_TIM_PWM_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 800061c:	f000 f958 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000620:	4803      	ldr	r0, [pc, #12]	@ (8000630 <MX_TIM2_Init+0x12c>)
 8000622:	f000 f99b 	bl	800095c <HAL_TIM_MspPostInit>

}
 8000626:	bf00      	nop
 8000628:	3738      	adds	r7, #56	@ 0x38
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000028 	.word	0x20000028

08000634 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	@ 0x38
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000666:	4b38      	ldr	r3, [pc, #224]	@ (8000748 <MX_TIM3_Init+0x114>)
 8000668:	4a38      	ldr	r2, [pc, #224]	@ (800074c <MX_TIM3_Init+0x118>)
 800066a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800066c:	4b36      	ldr	r3, [pc, #216]	@ (8000748 <MX_TIM3_Init+0x114>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <MX_TIM3_Init+0x114>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000678:	4b33      	ldr	r3, [pc, #204]	@ (8000748 <MX_TIM3_Init+0x114>)
 800067a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800067e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b31      	ldr	r3, [pc, #196]	@ (8000748 <MX_TIM3_Init+0x114>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <MX_TIM3_Init+0x114>)
 8000688:	2280      	movs	r2, #128	@ 0x80
 800068a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800068c:	482e      	ldr	r0, [pc, #184]	@ (8000748 <MX_TIM3_Init+0x114>)
 800068e:	f001 fd89 	bl	80021a4 <HAL_TIM_Base_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000698:	f000 f91a 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4827      	ldr	r0, [pc, #156]	@ (8000748 <MX_TIM3_Init+0x114>)
 80006aa:	f002 f815 	bl	80026d8 <HAL_TIM_ConfigClockSource>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80006b4:	f000 f90c 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006b8:	4823      	ldr	r0, [pc, #140]	@ (8000748 <MX_TIM3_Init+0x114>)
 80006ba:	f001 fdca 	bl	8002252 <HAL_TIM_PWM_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80006c4:	f000 f904 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	481c      	ldr	r0, [pc, #112]	@ (8000748 <MX_TIM3_Init+0x114>)
 80006d8:	f002 fc8e 	bl	8002ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80006e2:	f000 f8f5 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e6:	2360      	movs	r3, #96	@ 0x60
 80006e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	4619      	mov	r1, r3
 80006fc:	4812      	ldr	r0, [pc, #72]	@ (8000748 <MX_TIM3_Init+0x114>)
 80006fe:	f001 fed7 	bl	80024b0 <HAL_TIM_PWM_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000708:	f000 f8e2 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2204      	movs	r2, #4
 8000710:	4619      	mov	r1, r3
 8000712:	480d      	ldr	r0, [pc, #52]	@ (8000748 <MX_TIM3_Init+0x114>)
 8000714:	f001 fecc 	bl	80024b0 <HAL_TIM_PWM_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800071e:	f000 f8d7 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	2208      	movs	r2, #8
 8000726:	4619      	mov	r1, r3
 8000728:	4807      	ldr	r0, [pc, #28]	@ (8000748 <MX_TIM3_Init+0x114>)
 800072a:	f001 fec1 	bl	80024b0 <HAL_TIM_PWM_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000734:	f000 f8cc 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <MX_TIM3_Init+0x114>)
 800073a:	f000 f90f 	bl	800095c <HAL_TIM_MspPostInit>

}
 800073e:	bf00      	nop
 8000740:	3738      	adds	r7, #56	@ 0x38
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000074 	.word	0x20000074
 800074c:	40000400 	.word	0x40000400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b33      	ldr	r3, [pc, #204]	@ (8000834 <MX_GPIO_Init+0xe4>)
 8000768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800076c:	4a31      	ldr	r2, [pc, #196]	@ (8000834 <MX_GPIO_Init+0xe4>)
 800076e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000772:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000776:	4b2f      	ldr	r3, [pc, #188]	@ (8000834 <MX_GPIO_Init+0xe4>)
 8000778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800077c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <MX_GPIO_Init+0xe4>)
 8000786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800078a:	4a2a      	ldr	r2, [pc, #168]	@ (8000834 <MX_GPIO_Init+0xe4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000794:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <MX_GPIO_Init+0xe4>)
 8000796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <MX_GPIO_Init+0xe4>)
 80007a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a8:	4a22      	ldr	r2, [pc, #136]	@ (8000834 <MX_GPIO_Init+0xe4>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_GPIO_Init+0xe4>)
 80007b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 80007c6:	481c      	ldr	r0, [pc, #112]	@ (8000838 <MX_GPIO_Init+0xe8>)
 80007c8:	f000 fd8c 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d2:	481a      	ldr	r0, [pc, #104]	@ (800083c <MX_GPIO_Init+0xec>)
 80007d4:	f000 fd86 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d8:	2301      	movs	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	4813      	ldr	r0, [pc, #76]	@ (8000838 <MX_GPIO_Init+0xe8>)
 80007ec:	f000 fc28 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 80007f0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80007f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	480b      	ldr	r0, [pc, #44]	@ (8000838 <MX_GPIO_Init+0xe8>)
 800080a:	f000 fc19 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800080e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_GPIO_Init+0xec>)
 8000828:	f000 fc0a 	bl	8001040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	44020c00 	.word	0x44020c00
 8000838:	42020400 	.word	0x42020400
 800083c:	42020000 	.word	0x42020000

08000840 <set_wbgr_strip_color>:

/* USER CODE BEGIN 4 */
void set_wbgr_strip_color(const float* color){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = (int)(65532 * color[0]); //D_PWM_W
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	edd3 7a00 	vldr	s15, [r3]
 800084e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80008cc <set_wbgr_strip_color+0x8c>
 8000852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800085e:	ee17 2a90 	vmov	r2, s15
 8000862:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = (int)(65532 * color[1]); //D_PWM_B
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3304      	adds	r3, #4
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80008cc <set_wbgr_strip_color+0x8c>
 8000870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000878:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800087c:	ee17 2a90 	vmov	r2, s15
 8000880:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2->CCR3 = (int)(65532 * color[2]); //D_PWM_G
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3308      	adds	r3, #8
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80008cc <set_wbgr_strip_color+0x8c>
 800088e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000896:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800089a:	ee17 2a90 	vmov	r2, s15
 800089e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = (int)(65532 * color[3]); //D_PWM_R
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	330c      	adds	r3, #12
 80008a4:	edd3 7a00 	vldr	s15, [r3]
 80008a8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80008cc <set_wbgr_strip_color+0x8c>
 80008ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b8:	ee17 2a90 	vmov	r2, s15
 80008bc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	477ffc00 	.word	0x477ffc00

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008fc:	d10f      	bne.n	800091e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_TIM_Base_MspInit+0x68>)
 8000900:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000904:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <HAL_TIM_Base_MspInit+0x68>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_TIM_Base_MspInit+0x68>)
 8000910:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800091c:	e013      	b.n	8000946 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <HAL_TIM_Base_MspInit+0x6c>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d10e      	bne.n	8000946 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000928:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_TIM_Base_MspInit+0x68>)
 800092a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800092e:	4a09      	ldr	r2, [pc, #36]	@ (8000954 <HAL_TIM_Base_MspInit+0x68>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_TIM_Base_MspInit+0x68>)
 800093a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	44020c00 	.word	0x44020c00
 8000958:	40000400 	.word	0x40000400

0800095c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800097c:	d11f      	bne.n	80009be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <HAL_TIM_MspPostInit+0xb4>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000984:	4a22      	ldr	r2, [pc, #136]	@ (8000a10 <HAL_TIM_MspPostInit+0xb4>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <HAL_TIM_MspPostInit+0xb4>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800099c:	230f      	movs	r3, #15
 800099e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ac:	2301      	movs	r3, #1
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4817      	ldr	r0, [pc, #92]	@ (8000a14 <HAL_TIM_MspPostInit+0xb8>)
 80009b8:	f000 fb42 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009bc:	e024      	b.n	8000a08 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <HAL_TIM_MspPostInit+0xbc>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d11f      	bne.n	8000a08 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <HAL_TIM_MspPostInit+0xb4>)
 80009ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ce:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <HAL_TIM_MspPostInit+0xb4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <HAL_TIM_MspPostInit+0xb4>)
 80009da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80009e6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009f8:	2302      	movs	r3, #2
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <HAL_TIM_MspPostInit+0xb8>)
 8000a04:	f000 fb1c 	bl	8001040 <HAL_GPIO_Init>
}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	@ 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	44020c00 	.word	0x44020c00
 8000a14:	42020000 	.word	0x42020000
 8000a18:	40000400 	.word	0x40000400

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 f93d 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a82:	4b30      	ldr	r3, [pc, #192]	@ (8000b44 <SystemInit+0xc8>)
 8000a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a88:	4a2e      	ldr	r2, [pc, #184]	@ (8000b44 <SystemInit+0xc8>)
 8000a8a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a8e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <SystemInit+0xcc>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <SystemInit+0xcc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <SystemInit+0xcc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <SystemInit+0xcc>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4927      	ldr	r1, [pc, #156]	@ (8000b48 <SystemInit+0xcc>)
 8000aaa:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <SystemInit+0xd0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <SystemInit+0xcc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <SystemInit+0xcc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000abc:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <SystemInit+0xcc>)
 8000abe:	4a24      	ldr	r2, [pc, #144]	@ (8000b50 <SystemInit+0xd4>)
 8000ac0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <SystemInit+0xcc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <SystemInit+0xcc>)
 8000aca:	4a21      	ldr	r2, [pc, #132]	@ (8000b50 <SystemInit+0xd4>)
 8000acc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <SystemInit+0xcc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <SystemInit+0xcc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <SystemInit+0xcc>)
 8000ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ade:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <SystemInit+0xcc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <SystemInit+0xc8>)
 8000ae8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000aec:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <SystemInit+0xd8>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000af6:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000afe:	d003      	beq.n	8000b08 <SystemInit+0x8c>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000b06:	d117      	bne.n	8000b38 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <SystemInit+0xd8>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d005      	beq.n	8000b20 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <SystemInit+0xd8>)
 8000b16:	4a10      	ldr	r2, [pc, #64]	@ (8000b58 <SystemInit+0xdc>)
 8000b18:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <SystemInit+0xd8>)
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b5c <SystemInit+0xe0>)
 8000b1e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <SystemInit+0xd8>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	4a0b      	ldr	r2, [pc, #44]	@ (8000b54 <SystemInit+0xd8>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <SystemInit+0xd8>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <SystemInit+0xd8>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	61d3      	str	r3, [r2, #28]
  }
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00
 8000b48:	44020c00 	.word	0x44020c00
 8000b4c:	fae2eae3 	.word	0xfae2eae3
 8000b50:	01010280 	.word	0x01010280
 8000b54:	40022000 	.word	0x40022000
 8000b58:	08192a3b 	.word	0x08192a3b
 8000b5c:	4c5d6e7f 	.word	0x4c5d6e7f

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b66:	e003      	b.n	8000b70 <LoopCopyDataInit>

08000b68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b6e:	3104      	adds	r1, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b70:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b78:	d3f6      	bcc.n	8000b68 <CopyDataInit>
	ldr	r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b7c:	e002      	b.n	8000b84 <LoopFillZerobss>

08000b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b80:	f842 3b04 	str.w	r3, [r2], #4

08000b84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <LoopForever+0x16>)
	cmp	r2, r3
 8000b86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b88:	d3f9      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ff77 	bl	8000a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f002 faa3 	bl	80030d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fb81 	bl	8000298 <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b98:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000b9c:	08003170 	.word	0x08003170
	ldr	r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ba4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ba8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bac:	200000c4 	.word	0x200000c4

08000bb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f96c 	bl	8000e96 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000bbe:	f001 f9a9 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <HAL_Init+0x44>)
 8000bc6:	6a1b      	ldr	r3, [r3, #32]
 8000bc8:	f003 030f 	and.w	r3, r3, #15
 8000bcc:	490b      	ldr	r1, [pc, #44]	@ (8000bfc <HAL_Init+0x48>)
 8000bce:	5ccb      	ldrb	r3, [r1, r3]
 8000bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_Init+0x4c>)
 8000bd6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f000 f9a3 	bl	8000f24 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f810 	bl	8000c04 <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e002      	b.n	8000bf4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bee:	f7ff fe75 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	44020c00 	.word	0x44020c00
 8000bfc:	08003158 	.word	0x08003158
 8000c00:	20000000 	.word	0x20000000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c10:	4b33      	ldr	r3, [pc, #204]	@ (8000ce0 <HAL_InitTick+0xdc>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e05c      	b.n	8000cd6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c1c:	4b31      	ldr	r3, [pc, #196]	@ (8000ce4 <HAL_InitTick+0xe0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d10c      	bne.n	8000c42 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000c28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <HAL_InitTick+0xe4>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <HAL_InitTick+0xdc>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	e037      	b.n	8000cb2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000c42:	f000 f9c7 	bl	8000fd4 <HAL_SYSTICK_GetCLKSourceConfig>
 8000c46:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d023      	beq.n	8000c96 <HAL_InitTick+0x92>
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d82d      	bhi.n	8000cb0 <HAL_InitTick+0xac>
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_InitTick+0x5e>
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d00d      	beq.n	8000c7c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000c60:	e026      	b.n	8000cb0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <HAL_InitTick+0xe4>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <HAL_InitTick+0xdc>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000c70:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c78:	60fb      	str	r3, [r7, #12]
        break;
 8000c7a:	e01a      	b.n	8000cb2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <HAL_InitTick+0xdc>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c8a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	60fb      	str	r3, [r7, #12]
        break;
 8000c94:	e00d      	b.n	8000cb2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c96:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0xdc>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ca4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cac:	60fb      	str	r3, [r7, #12]
        break;
 8000cae:	e000      	b.n	8000cb2 <HAL_InitTick+0xae>
        break;
 8000cb0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f000 f914 	bl	8000ee0 <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e009      	b.n	8000cd6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cca:	f000 f8ef 	bl	8000eac <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000cce:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_InitTick+0xe8>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	e000e010 	.word	0xe000e010
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200000c0 	.word	0x200000c0

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200000c0 	.word	0x200000c0

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	@ (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	@ (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	@ 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	@ 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff6a 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eba:	f7ff ff81 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000ebe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f7ff ffb3 	bl	8000e30 <NVIC_EncodePriority>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff82 	bl	8000ddc <__NVIC_SetPriority>
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00d      	b.n	8000f12 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_SYSTICK_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000efe:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_SYSTICK_Config+0x40>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_SYSTICK_Config+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <HAL_SYSTICK_Config+0x40>)
 8000f0a:	f043 0303 	orr.w	r3, r3, #3
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d844      	bhi.n	8000fbc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000f32:	a201      	add	r2, pc, #4	@ (adr r2, 8000f38 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000f5b 	.word	0x08000f5b
 8000f3c:	08000f79 	.word	0x08000f79
 8000f40:	08000f9b 	.word	0x08000f9b
 8000f44:	08000fbd 	.word	0x08000fbd
 8000f48:	08000f4d 	.word	0x08000f4d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1e      	ldr	r2, [pc, #120]	@ (8000fcc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6013      	str	r3, [r2, #0]
      break;
 8000f58:	e031      	b.n	8000fbe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000f66:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f6c:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f6e:	f023 030c 	bic.w	r3, r3, #12
 8000f72:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000f76:	e022      	b.n	8000fbe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f7e:	f023 0304 	bic.w	r3, r3, #4
 8000f82:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f8a:	f023 030c 	bic.w	r3, r3, #12
 8000f8e:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000f98:	e011      	b.n	8000fbe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fac:	f023 030c 	bic.w	r3, r3, #12
 8000fb0:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000fba:	e000      	b.n	8000fbe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000fbc:	bf00      	nop
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010
 8000fd0:	44020c00 	.word	0x44020c00

08000fd4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e01e      	b.n	800102a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000fee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d00f      	beq.n	800101e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b08      	cmp	r3, #8
 8001002:	d80f      	bhi.n	8001024 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b04      	cmp	r3, #4
 800100e:	d003      	beq.n	8001018 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001010:	e008      	b.n	8001024 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
        break;
 8001016:	e008      	b.n	800102a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001018:	2301      	movs	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
        break;
 800101c:	e005      	b.n	800102a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
        break;
 8001022:	e002      	b.n	800102a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
        break;
 8001028:	bf00      	nop
    }
  }
  return systick_source;
 800102a:	687b      	ldr	r3, [r7, #4]
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e010 	.word	0xe000e010
 800103c:	44020c00 	.word	0x44020c00

08001040 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800104e:	e136      	b.n	80012be <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8128 	beq.w	80012b8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x38>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b12      	cmp	r3, #18
 8001076:	d125      	bne.n	80010c4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f003 020f 	and.w	r2, r3, #15
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	6979      	ldr	r1, [r7, #20]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4013      	ands	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d00b      	beq.n	8001118 <HAL_GPIO_Init+0xd8>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d007      	beq.n	8001118 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110c:	2b11      	cmp	r3, #17
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b12      	cmp	r3, #18
 8001116:	d130      	bne.n	800117a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	4313      	orrs	r3, r2
 8001140:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114e:	2201      	movs	r2, #1
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	4013      	ands	r3, r2
 800115c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 0201 	and.w	r2, r3, #1
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4313      	orrs	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d017      	beq.n	80011b2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	4013      	ands	r3, r2
 8001198:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d07c      	beq.n	80012b8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011be:	4a47      	ldr	r2, [pc, #284]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3318      	adds	r3, #24
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	4013      	ands	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	0a9a      	lsrs	r2, r3, #10
 80011e6:	4b3e      	ldr	r3, [pc, #248]	@ (80012e0 <HAL_GPIO_Init+0x2a0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	f002 0203 	and.w	r2, r2, #3
 80011f0:	00d2      	lsls	r2, r2, #3
 80011f2:	4093      	lsls	r3, r2
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011fa:	4938      	ldr	r1, [pc, #224]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3318      	adds	r3, #24
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001208:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800122c:	4a2b      	ldr	r2, [pc, #172]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001232:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4013      	ands	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001256:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800125c:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 800125e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001262:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	4013      	ands	r3, r2
 800126c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001282:	4a16      	ldr	r2, [pc, #88]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 800128c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001290:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_GPIO_Init+0x29c>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	3301      	adds	r3, #1
 80012bc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f47f aec1 	bne.w	8001050 <HAL_GPIO_Init+0x10>
  }
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	44022000 	.word	0x44022000
 80012e0:	002f7f7f 	.word	0x002f7f7f

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001300:	e002      	b.n	8001308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_ICACHE_Enable+0x1c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <HAL_ICACHE_Enable+0x1c>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40030400 	.word	0x40030400

08001334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	f000 bc28 	b.w	8001b98 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001348:	4b94      	ldr	r3, [pc, #592]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	f003 0318 	and.w	r3, r3, #24
 8001350:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001352:	4b92      	ldr	r3, [pc, #584]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	d05b      	beq.n	8001420 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b08      	cmp	r3, #8
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x46>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	2b18      	cmp	r3, #24
 8001372:	d114      	bne.n	800139e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d111      	bne.n	800139e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	f000 bc08 	b.w	8001b98 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001388:	4b84      	ldr	r3, [pc, #528]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	4981      	ldr	r1, [pc, #516]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001398:	4313      	orrs	r3, r2
 800139a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800139c:	e040      	b.n	8001420 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d023      	beq.n	80013ee <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013a6:	4b7d      	ldr	r3, [pc, #500]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7c      	ldr	r2, [pc, #496]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fcb1 	bl	8000d18 <HAL_GetTick>
 80013b6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80013ba:	f7ff fcad 	bl	8000d18 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e3e5      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80013cc:	4b73      	ldr	r3, [pc, #460]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80013d8:	4b70      	ldr	r3, [pc, #448]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	041b      	lsls	r3, r3, #16
 80013e6:	496d      	ldr	r1, [pc, #436]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	618b      	str	r3, [r1, #24]
 80013ec:	e018      	b.n	8001420 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013ee:	4b6b      	ldr	r3, [pc, #428]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6a      	ldr	r2, [pc, #424]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80013f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fc8d 	bl	8000d18 <HAL_GetTick>
 80013fe:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001402:	f7ff fc89 	bl	8000d18 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e3c1      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001414:	4b61      	ldr	r3, [pc, #388]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80a0 	beq.w	800156e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	2b10      	cmp	r3, #16
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x10c>
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b18      	cmp	r3, #24
 8001438:	d109      	bne.n	800144e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	f040 8092 	bne.w	800156e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e3a4      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001456:	d106      	bne.n	8001466 <HAL_RCC_OscConfig+0x132>
 8001458:	4b50      	ldr	r3, [pc, #320]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a4f      	ldr	r2, [pc, #316]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 800145e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e058      	b.n	8001518 <HAL_RCC_OscConfig+0x1e4>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d112      	bne.n	8001494 <HAL_RCC_OscConfig+0x160>
 800146e:	4b4b      	ldr	r3, [pc, #300]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a4a      	ldr	r2, [pc, #296]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b48      	ldr	r3, [pc, #288]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a47      	ldr	r2, [pc, #284]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001480:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b45      	ldr	r3, [pc, #276]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a44      	ldr	r2, [pc, #272]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e041      	b.n	8001518 <HAL_RCC_OscConfig+0x1e4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800149c:	d112      	bne.n	80014c4 <HAL_RCC_OscConfig+0x190>
 800149e:	4b3f      	ldr	r3, [pc, #252]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a3e      	ldr	r2, [pc, #248]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b3c      	ldr	r3, [pc, #240]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a3b      	ldr	r2, [pc, #236]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b39      	ldr	r3, [pc, #228]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a38      	ldr	r2, [pc, #224]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e029      	b.n	8001518 <HAL_RCC_OscConfig+0x1e4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80014cc:	d112      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1c0>
 80014ce:	4b33      	ldr	r3, [pc, #204]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a32      	ldr	r2, [pc, #200]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b30      	ldr	r3, [pc, #192]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a2f      	ldr	r2, [pc, #188]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a2c      	ldr	r2, [pc, #176]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e011      	b.n	8001518 <HAL_RCC_OscConfig+0x1e4>
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a28      	ldr	r2, [pc, #160]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 80014fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b26      	ldr	r3, [pc, #152]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a25      	ldr	r2, [pc, #148]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a22      	ldr	r2, [pc, #136]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001512:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fbfa 	bl	8000d18 <HAL_GetTick>
 8001524:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001528:	f7ff fbf6 	bl	8000d18 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	@ 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e32e      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x1f4>
 8001546:	e012      	b.n	800156e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fbe6 	bl	8000d18 <HAL_GetTick>
 800154c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001550:	f7ff fbe2 	bl	8000d18 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	@ 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e31a      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_RCC_OscConfig+0x268>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 809a 	beq.w	80016b0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x25a>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	2b18      	cmp	r3, #24
 8001586:	d149      	bne.n	800161c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d146      	bne.n	800161c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d104      	bne.n	80015a0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e2fe      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
 800159a:	bf00      	nop
 800159c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d11c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80015a6:	4b9a      	ldr	r3, [pc, #616]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0218 	and.w	r2, r3, #24
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d014      	beq.n	80015e0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80015b6:	4b96      	ldr	r3, [pc, #600]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 0218 	bic.w	r2, r3, #24
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	4993      	ldr	r1, [pc, #588]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80015c8:	f000 fdd0 	bl	800216c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015cc:	4b91      	ldr	r3, [pc, #580]	@ (8001814 <HAL_RCC_OscConfig+0x4e0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fb17 	bl	8000c04 <HAL_InitTick>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e2db      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb9a 	bl	8000d18 <HAL_GetTick>
 80015e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fb96 	bl	8000d18 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e2ce      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015fa:	4b85      	ldr	r3, [pc, #532]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001606:	4b82      	ldr	r3, [pc, #520]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	497e      	ldr	r1, [pc, #504]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800161a:	e049      	b.n	80016b0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d02c      	beq.n	800167e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001624:	4b7a      	ldr	r3, [pc, #488]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 0218 	bic.w	r2, r3, #24
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	4977      	ldr	r1, [pc, #476]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001636:	4b76      	ldr	r3, [pc, #472]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a75      	ldr	r2, [pc, #468]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fb69 	bl	8000d18 <HAL_GetTick>
 8001646:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800164a:	f7ff fb65 	bl	8000d18 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e29d      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165c:	4b6c      	ldr	r3, [pc, #432]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001668:	4b69      	ldr	r3, [pc, #420]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	4966      	ldr	r1, [pc, #408]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001678:	4313      	orrs	r3, r2
 800167a:	610b      	str	r3, [r1, #16]
 800167c:	e018      	b.n	80016b0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b64      	ldr	r3, [pc, #400]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a63      	ldr	r2, [pc, #396]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fb45 	bl	8000d18 <HAL_GetTick>
 800168e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001692:	f7ff fb41 	bl	8000d18 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e279      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a4:	4b5a      	ldr	r3, [pc, #360]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d03c      	beq.n	8001736 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01c      	beq.n	80016fe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c4:	4b52      	ldr	r3, [pc, #328]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80016c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016ca:	4a51      	ldr	r2, [pc, #324]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80016cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fb20 	bl	8000d18 <HAL_GetTick>
 80016d8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fb1c 	bl	8000d18 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e254      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016ee:	4b48      	ldr	r3, [pc, #288]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80016f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ef      	beq.n	80016dc <HAL_RCC_OscConfig+0x3a8>
 80016fc:	e01b      	b.n	8001736 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fe:	4b44      	ldr	r3, [pc, #272]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001704:	4a42      	ldr	r2, [pc, #264]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001706:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800170a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f7ff fb03 	bl	8000d18 <HAL_GetTick>
 8001712:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001716:	f7ff faff 	bl	8000d18 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e237      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001728:	4b39      	ldr	r3, [pc, #228]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 800172a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800172e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ef      	bne.n	8001716 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80d2 	beq.w	80018e8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001744:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_RCC_OscConfig+0x4e4>)
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d118      	bne.n	8001782 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001750:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <HAL_RCC_OscConfig+0x4e4>)
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	4a30      	ldr	r2, [pc, #192]	@ (8001818 <HAL_RCC_OscConfig+0x4e4>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175c:	f7ff fadc 	bl	8000d18 <HAL_GetTick>
 8001760:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001764:	f7ff fad8 	bl	8000d18 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e210      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001776:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <HAL_RCC_OscConfig+0x4e4>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d108      	bne.n	800179c <HAL_RCC_OscConfig+0x468>
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 800178c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001790:	4a1f      	ldr	r2, [pc, #124]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800179a:	e074      	b.n	8001886 <HAL_RCC_OscConfig+0x552>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d118      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4a2>
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017aa:	4a19      	ldr	r2, [pc, #100]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ba:	4a15      	ldr	r2, [pc, #84]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ca:	4a11      	ldr	r2, [pc, #68]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017d4:	e057      	b.n	8001886 <HAL_RCC_OscConfig+0x552>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d11e      	bne.n	800181c <HAL_RCC_OscConfig+0x4e8>
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017f4:	4a06      	ldr	r2, [pc, #24]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80017f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001804:	4a02      	ldr	r2, [pc, #8]	@ (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x552>
 8001810:	44020c00 	.word	0x44020c00
 8001814:	20000004 	.word	0x20000004
 8001818:	44020800 	.word	0x44020800
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b85      	cmp	r3, #133	@ 0x85
 8001822:	d118      	bne.n	8001856 <HAL_RCC_OscConfig+0x522>
 8001824:	4ba2      	ldr	r3, [pc, #648]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800182a:	4aa1      	ldr	r2, [pc, #644]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001834:	4b9e      	ldr	r3, [pc, #632]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800183a:	4a9d      	ldr	r2, [pc, #628]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001840:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001844:	4b9a      	ldr	r3, [pc, #616]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800184a:	4a99      	ldr	r2, [pc, #612]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001854:	e017      	b.n	8001886 <HAL_RCC_OscConfig+0x552>
 8001856:	4b96      	ldr	r3, [pc, #600]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800185c:	4a94      	ldr	r2, [pc, #592]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001866:	4b92      	ldr	r3, [pc, #584]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800186c:	4a90      	ldr	r2, [pc, #576]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 800186e:	f023 0304 	bic.w	r3, r3, #4
 8001872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001876:	4b8e      	ldr	r3, [pc, #568]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800187c:	4a8c      	ldr	r2, [pc, #560]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 800187e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001882:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d016      	beq.n	80018bc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff fa43 	bl	8000d18 <HAL_GetTick>
 8001892:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fa3f 	bl	8000d18 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e175      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ac:	4b80      	ldr	r3, [pc, #512]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 80018ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0ed      	beq.n	8001896 <HAL_RCC_OscConfig+0x562>
 80018ba:	e015      	b.n	80018e8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fa2c 	bl	8000d18 <HAL_GetTick>
 80018c0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff fa28 	bl	8000d18 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e15e      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018da:	4b75      	ldr	r3, [pc, #468]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 80018dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ed      	bne.n	80018c4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d036      	beq.n	8001962 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d019      	beq.n	8001930 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018fc:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6b      	ldr	r2, [pc, #428]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001902:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fa06 	bl	8000d18 <HAL_GetTick>
 800190c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001910:	f7ff fa02 	bl	8000d18 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e13a      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001922:	4b63      	ldr	r3, [pc, #396]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x5dc>
 800192e:	e018      	b.n	8001962 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001930:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5e      	ldr	r2, [pc, #376]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001936:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800193a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff f9ec 	bl	8000d18 <HAL_GetTick>
 8001940:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001944:	f7ff f9e8 	bl	8000d18 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e120      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001956:	4b56      	ldr	r3, [pc, #344]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8115 	beq.w	8001b96 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b18      	cmp	r3, #24
 8001970:	f000 80af 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	2b02      	cmp	r3, #2
 800197a:	f040 8086 	bne.w	8001a8a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800197e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff f9c5 	bl	8000d18 <HAL_GetTick>
 800198e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001992:	f7ff f9c1 	bl	8000d18 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0f9      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80019a4:	4b42      	ldr	r3, [pc, #264]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80019b0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 80019b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80019b8:	f023 0303 	bic.w	r3, r3, #3
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019c4:	0212      	lsls	r2, r2, #8
 80019c6:	430a      	orrs	r2, r1
 80019c8:	4939      	ldr	r1, [pc, #228]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	628b      	str	r3, [r1, #40]	@ 0x28
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019dc:	3b01      	subs	r3, #1
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	3b01      	subs	r3, #1
 80019ea:	041b      	lsls	r3, r3, #16
 80019ec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	3b01      	subs	r3, #1
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80019fe:	492c      	ldr	r1, [pc, #176]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001a04:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	4a29      	ldr	r2, [pc, #164]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a0a:	f023 0310 	bic.w	r3, r3, #16
 8001a0e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a14:	4a26      	ldr	r2, [pc, #152]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001a1a:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1e:	4a24      	ldr	r2, [pc, #144]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a20:	f043 0310 	orr.w	r3, r3, #16
 8001a24:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001a26:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2a:	f023 020c 	bic.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	491f      	ldr	r1, [pc, #124]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3c:	f023 0220 	bic.w	r2, r3, #32
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a44:	491a      	ldr	r1, [pc, #104]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4e:	4a18      	ldr	r2, [pc, #96]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a54:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a15      	ldr	r2, [pc, #84]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f959 	bl	8000d18 <HAL_GetTick>
 8001a66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff f955 	bl	8000d18 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e08d      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x736>
 8001a88:	e085      	b.n	8001b96 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <HAL_RCC_OscConfig+0x77c>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f93f 	bl	8000d18 <HAL_GetTick>
 8001a9a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f93b 	bl	8000d18 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d903      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e073      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
 8001ab0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ee      	bne.n	8001a9e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001ac0:	4b37      	ldr	r3, [pc, #220]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	4a36      	ldr	r2, [pc, #216]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001ac6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001aca:	f023 0303 	bic.w	r3, r3, #3
 8001ace:	6293      	str	r3, [r2, #40]	@ 0x28
 8001ad0:	e061      	b.n	8001b96 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001ad2:	4b33      	ldr	r3, [pc, #204]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ad8:	4b31      	ldr	r3, [pc, #196]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001adc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d031      	beq.n	8001b4a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d12a      	bne.n	8001b4a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d122      	bne.n	8001b4a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b0e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d11a      	bne.n	8001b4a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	0a5b      	lsrs	r3, r3, #9
 8001b18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b20:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d111      	bne.n	8001b4a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b32:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d108      	bne.n	8001b4a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	0e1b      	lsrs	r3, r3, #24
 8001b3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e024      	b.n	8001b98 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d01a      	beq.n	8001b96 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001b66:	f023 0310 	bic.w	r3, r3, #16
 8001b6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f8d4 	bl	8000d18 <HAL_GetTick>
 8001b70:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001b72:	bf00      	nop
 8001b74:	f7ff f8d0 	bl	8000d18 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d0f9      	beq.n	8001b74 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4a06      	ldr	r2, [pc, #24]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001b8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_RCC_OscConfig+0x86c>)
 8001b90:	f043 0310 	orr.w	r3, r3, #16
 8001b94:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	44020c00 	.word	0x44020c00

08001ba4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e19e      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b83      	ldr	r3, [pc, #524]	@ (8001dc8 <HAL_RCC_ClockConfig+0x224>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d910      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b80      	ldr	r3, [pc, #512]	@ (8001dc8 <HAL_RCC_ClockConfig+0x224>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 020f 	bic.w	r2, r3, #15
 8001bce:	497e      	ldr	r1, [pc, #504]	@ (8001dc8 <HAL_RCC_ClockConfig+0x224>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc8 <HAL_RCC_ClockConfig+0x224>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e186      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d012      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	4b74      	ldr	r3, [pc, #464]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d909      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001c06:	4b71      	ldr	r3, [pc, #452]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	496d      	ldr	r1, [pc, #436]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d012      	beq.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	4b68      	ldr	r3, [pc, #416]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d909      	bls.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001c38:	4b64      	ldr	r3, [pc, #400]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4961      	ldr	r1, [pc, #388]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d010      	beq.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d908      	bls.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001c68:	4b58      	ldr	r3, [pc, #352]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4955      	ldr	r1, [pc, #340]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d010      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	4b50      	ldr	r3, [pc, #320]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d908      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001c96:	4b4d      	ldr	r3, [pc, #308]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	f023 020f 	bic.w	r2, r3, #15
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	494a      	ldr	r1, [pc, #296]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8093 	beq.w	8001ddc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cbe:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d121      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e113      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d115      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e107      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001cee:	4b37      	ldr	r3, [pc, #220]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0fb      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cfe:	4b33      	ldr	r3, [pc, #204]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0f3      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f023 0203 	bic.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	492c      	ldr	r1, [pc, #176]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d20:	f7fe fffa 	bl	8000d18 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d112      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7fe fff2 	bl	8000d18 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0d7      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 0318 	and.w	r3, r3, #24
 8001d4e:	2b18      	cmp	r3, #24
 8001d50:	d1ee      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x18c>
 8001d52:	e043      	b.n	8001ddc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d112      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5e:	f7fe ffdb 	bl	8000d18 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0c0      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	f003 0318 	and.w	r3, r3, #24
 8001d7c:	2b10      	cmp	r3, #16
 8001d7e:	d1ee      	bne.n	8001d5e <HAL_RCC_ClockConfig+0x1ba>
 8001d80:	e02c      	b.n	8001ddc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d122      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7fe ffc4 	bl	8000d18 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e0a9      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_RCC_ClockConfig+0x228>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0318 	and.w	r3, r3, #24
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d1ee      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
 8001dae:	e015      	b.n	8001ddc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe ffb2 	bl	8000d18 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d906      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e097      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
 8001dc6:	bf00      	nop
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f003 0318 	and.w	r3, r3, #24
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e9      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	4b44      	ldr	r3, [pc, #272]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d208      	bcs.n	8001e0a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001df8:	4b41      	ldr	r3, [pc, #260]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f023 020f 	bic.w	r2, r3, #15
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	493e      	ldr	r1, [pc, #248]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f04 <HAL_RCC_ClockConfig+0x360>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d210      	bcs.n	8001e3a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e18:	4b3a      	ldr	r3, [pc, #232]	@ (8001f04 <HAL_RCC_ClockConfig+0x360>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 020f 	bic.w	r2, r3, #15
 8001e20:	4938      	ldr	r1, [pc, #224]	@ (8001f04 <HAL_RCC_ClockConfig+0x360>)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e28:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <HAL_RCC_ClockConfig+0x360>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e05d      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d208      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001e56:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4927      	ldr	r1, [pc, #156]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d012      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d209      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001e86:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	491a      	ldr	r1, [pc, #104]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d012      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d209      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	490e      	ldr	r1, [pc, #56]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ecc:	f000 f822 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_RCC_ClockConfig+0x35c>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	490b      	ldr	r1, [pc, #44]	@ (8001f08 <HAL_RCC_ClockConfig+0x364>)
 8001edc:	5ccb      	ldrb	r3, [r1, r3]
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_RCC_ClockConfig+0x368>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_RCC_ClockConfig+0x36c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fe8a 	bl	8000c04 <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	44020c00 	.word	0x44020c00
 8001f04:	40022000 	.word	0x40022000
 8001f08:	08003158 	.word	0x08003158
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001f1a:	4b8c      	ldr	r3, [pc, #560]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 0318 	and.w	r3, r3, #24
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f26:	4b8a      	ldr	r3, [pc, #552]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	e107      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2c:	4b87      	ldr	r3, [pc, #540]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f003 0318 	and.w	r3, r3, #24
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d112      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001f38:	4b84      	ldr	r3, [pc, #528]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001f44:	4b81      	ldr	r3, [pc, #516]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	4a81      	ldr	r2, [pc, #516]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e0f1      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001f58:	4b7e      	ldr	r3, [pc, #504]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	e0ee      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0318 	and.w	r3, r3, #24
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x244>)
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e0e5      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	4b76      	ldr	r3, [pc, #472]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 0318 	and.w	r3, r3, #24
 8001f78:	2b18      	cmp	r3, #24
 8001f7a:	f040 80dd 	bne.w	8002138 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001f7e:	4b73      	ldr	r3, [pc, #460]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001f88:	4b70      	ldr	r3, [pc, #448]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001f94:	4b6d      	ldr	r3, [pc, #436]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80b7 	beq.w	8002132 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d056      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x16a>
 8001fd0:	e077      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001fd2:	4b5e      	ldr	r3, [pc, #376]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d02d      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001fde:	4b5b      	ldr	r3, [pc, #364]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	08db      	lsrs	r3, r3, #3
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x240>)
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002008:	4b50      	ldr	r3, [pc, #320]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 800200a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002018:	ed97 6a02 	vldr	s12, [r7, #8]
 800201c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800215c <HAL_RCC_GetSysClockFreq+0x248>
 8002020:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002024:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800202c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002034:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002038:	e065      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002044:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002160 <HAL_RCC_GetSysClockFreq+0x24c>
 8002048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800204c:	4b3f      	ldr	r3, [pc, #252]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 800204e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800205c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002060:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800215c <HAL_RCC_GetSysClockFreq+0x248>
 8002064:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002068:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800206c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002070:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800207c:	e043      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002088:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002164 <HAL_RCC_GetSysClockFreq+0x250>
 800208c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002090:	4b2e      	ldr	r3, [pc, #184]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8002092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80020a4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800215c <HAL_RCC_GetSysClockFreq+0x248>
 80020a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80020c0:	e021      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020cc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002168 <HAL_RCC_GetSysClockFreq+0x254>
 80020d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 80020d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80020e8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800215c <HAL_RCC_GetSysClockFreq+0x248>
 80020ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002100:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002104:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_RCC_GetSysClockFreq+0x238>)
 8002108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210a:	0a5b      	lsrs	r3, r3, #9
 800210c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002110:	3301      	adds	r3, #1
 8002112:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800211e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800212a:	ee17 3a90 	vmov	r3, s15
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	e004      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e001      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x240>)
 800213a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800213c:	69fb      	ldr	r3, [r7, #28]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	@ 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	44020c00 	.word	0x44020c00
 8002150:	003d0900 	.word	0x003d0900
 8002154:	03d09000 	.word	0x03d09000
 8002158:	017d7840 	.word	0x017d7840
 800215c:	46000000 	.word	0x46000000
 8002160:	4c742400 	.word	0x4c742400
 8002164:	4bbebc20 	.word	0x4bbebc20
 8002168:	4a742400 	.word	0x4a742400

0800216c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002170:	f7ff fed0 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800217a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800217e:	4907      	ldr	r1, [pc, #28]	@ (800219c <HAL_RCC_GetHCLKFreq+0x30>)
 8002180:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002182:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <HAL_RCC_GetHCLKFreq+0x34>)
 800218c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800218e:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002190:	681b      	ldr	r3, [r3, #0]
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	44020c00 	.word	0x44020c00
 800219c:	08003158 	.word	0x08003158
 80021a0:	20000000 	.word	0x20000000

080021a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e049      	b.n	800224a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fb8e 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3304      	adds	r3, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f000 fb96 	bl	8002914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e049      	b.n	80022f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f841 	bl	8002300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3304      	adds	r3, #4
 800228e:	4619      	mov	r1, r3
 8002290:	4610      	mov	r0, r2
 8002292:	f000 fb3f 	bl	8002914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_TIM_PWM_Start+0x24>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	bf14      	ite	ne
 8002330:	2301      	movne	r3, #1
 8002332:	2300      	moveq	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e03c      	b.n	80023b2 <HAL_TIM_PWM_Start+0x9e>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b04      	cmp	r3, #4
 800233c:	d109      	bne.n	8002352 <HAL_TIM_PWM_Start+0x3e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e02f      	b.n	80023b2 <HAL_TIM_PWM_Start+0x9e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b08      	cmp	r3, #8
 8002356:	d109      	bne.n	800236c <HAL_TIM_PWM_Start+0x58>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e022      	b.n	80023b2 <HAL_TIM_PWM_Start+0x9e>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d109      	bne.n	8002386 <HAL_TIM_PWM_Start+0x72>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	bf14      	ite	ne
 800237e:	2301      	movne	r3, #1
 8002380:	2300      	moveq	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	e015      	b.n	80023b2 <HAL_TIM_PWM_Start+0x9e>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b10      	cmp	r3, #16
 800238a:	d109      	bne.n	80023a0 <HAL_TIM_PWM_Start+0x8c>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	bf14      	ite	ne
 8002398:	2301      	movne	r3, #1
 800239a:	2300      	moveq	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e008      	b.n	80023b2 <HAL_TIM_PWM_Start+0x9e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	bf14      	ite	ne
 80023ac:	2301      	movne	r3, #1
 80023ae:	2300      	moveq	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06f      	b.n	800249a <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Start+0xb6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023c8:	e023      	b.n	8002412 <HAL_TIM_PWM_Start+0xfe>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Start+0xc6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023d8:	e01b      	b.n	8002412 <HAL_TIM_PWM_Start+0xfe>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d104      	bne.n	80023ea <HAL_TIM_PWM_Start+0xd6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023e8:	e013      	b.n	8002412 <HAL_TIM_PWM_Start+0xfe>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d104      	bne.n	80023fa <HAL_TIM_PWM_Start+0xe6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023f8:	e00b      	b.n	8002412 <HAL_TIM_PWM_Start+0xfe>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d104      	bne.n	800240a <HAL_TIM_PWM_Start+0xf6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002408:	e003      	b.n	8002412 <HAL_TIM_PWM_Start+0xfe>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2201      	movs	r2, #1
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fdc6 	bl	8002fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <HAL_TIM_PWM_Start+0x190>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d107      	bne.n	800243a <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a19      	ldr	r2, [pc, #100]	@ (80024a4 <HAL_TIM_PWM_Start+0x190>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_TIM_PWM_Start+0x144>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800244c:	d004      	beq.n	8002458 <HAL_TIM_PWM_Start+0x144>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <HAL_TIM_PWM_Start+0x194>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d115      	bne.n	8002484 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_TIM_PWM_Start+0x198>)
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d015      	beq.n	8002496 <HAL_TIM_PWM_Start+0x182>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002470:	d011      	beq.n	8002496 <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002482:	e008      	b.n	8002496 <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e000      	b.n	8002498 <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400
 80024ac:	00010007 	.word	0x00010007

080024b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0ff      	b.n	80026ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b14      	cmp	r3, #20
 80024da:	f200 80f0 	bhi.w	80026be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80024de:	a201      	add	r2, pc, #4	@ (adr r2, 80024e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	08002539 	.word	0x08002539
 80024e8:	080026bf 	.word	0x080026bf
 80024ec:	080026bf 	.word	0x080026bf
 80024f0:	080026bf 	.word	0x080026bf
 80024f4:	08002579 	.word	0x08002579
 80024f8:	080026bf 	.word	0x080026bf
 80024fc:	080026bf 	.word	0x080026bf
 8002500:	080026bf 	.word	0x080026bf
 8002504:	080025bb 	.word	0x080025bb
 8002508:	080026bf 	.word	0x080026bf
 800250c:	080026bf 	.word	0x080026bf
 8002510:	080026bf 	.word	0x080026bf
 8002514:	080025fb 	.word	0x080025fb
 8002518:	080026bf 	.word	0x080026bf
 800251c:	080026bf 	.word	0x080026bf
 8002520:	080026bf 	.word	0x080026bf
 8002524:	0800263d 	.word	0x0800263d
 8002528:	080026bf 	.word	0x080026bf
 800252c:	080026bf 	.word	0x080026bf
 8002530:	080026bf 	.word	0x080026bf
 8002534:	0800267d 	.word	0x0800267d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fa4e 	bl	80029e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0208 	orr.w	r2, r2, #8
 8002552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0204 	bic.w	r2, r2, #4
 8002562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6999      	ldr	r1, [r3, #24]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	619a      	str	r2, [r3, #24]
      break;
 8002576:	e0a5      	b.n	80026c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fa96 	bl	8002ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6999      	ldr	r1, [r3, #24]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	619a      	str	r2, [r3, #24]
      break;
 80025b8:	e084      	b.n	80026c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fae3 	bl	8002b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0208 	orr.w	r2, r2, #8
 80025d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0204 	bic.w	r2, r2, #4
 80025e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69d9      	ldr	r1, [r3, #28]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	61da      	str	r2, [r3, #28]
      break;
 80025f8:	e064      	b.n	80026c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fb2f 	bl	8002c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69d9      	ldr	r1, [r3, #28]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	021a      	lsls	r2, r3, #8
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	61da      	str	r2, [r3, #28]
      break;
 800263a:	e043      	b.n	80026c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fb7c 	bl	8002d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0208 	orr.w	r2, r2, #8
 8002656:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0204 	bic.w	r2, r2, #4
 8002666:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800267a:	e023      	b.n	80026c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fba8 	bl	8002dd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002696:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	021a      	lsls	r2, r3, #8
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80026bc:	e002      	b.n	80026c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
      break;
 80026c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop

080026d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_TIM_ConfigClockSource+0x1c>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e0fe      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x21a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002712:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800271e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002730:	f000 80c9 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002738:	f200 80ce 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 800273c:	4a6f      	ldr	r2, [pc, #444]	@ (80028fc <HAL_TIM_ConfigClockSource+0x224>)
 800273e:	4293      	cmp	r3, r2
 8002740:	f000 80c1 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002744:	4a6d      	ldr	r2, [pc, #436]	@ (80028fc <HAL_TIM_ConfigClockSource+0x224>)
 8002746:	4293      	cmp	r3, r2
 8002748:	f200 80c6 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 800274c:	4a6c      	ldr	r2, [pc, #432]	@ (8002900 <HAL_TIM_ConfigClockSource+0x228>)
 800274e:	4293      	cmp	r3, r2
 8002750:	f000 80b9 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002754:	4a6a      	ldr	r2, [pc, #424]	@ (8002900 <HAL_TIM_ConfigClockSource+0x228>)
 8002756:	4293      	cmp	r3, r2
 8002758:	f200 80be 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 800275c:	4a69      	ldr	r2, [pc, #420]	@ (8002904 <HAL_TIM_ConfigClockSource+0x22c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	f000 80b1 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002764:	4a67      	ldr	r2, [pc, #412]	@ (8002904 <HAL_TIM_ConfigClockSource+0x22c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	f200 80b6 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 800276c:	4a66      	ldr	r2, [pc, #408]	@ (8002908 <HAL_TIM_ConfigClockSource+0x230>)
 800276e:	4293      	cmp	r3, r2
 8002770:	f000 80a9 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002774:	4a64      	ldr	r2, [pc, #400]	@ (8002908 <HAL_TIM_ConfigClockSource+0x230>)
 8002776:	4293      	cmp	r3, r2
 8002778:	f200 80ae 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 800277c:	4a63      	ldr	r2, [pc, #396]	@ (800290c <HAL_TIM_ConfigClockSource+0x234>)
 800277e:	4293      	cmp	r3, r2
 8002780:	f000 80a1 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002784:	4a61      	ldr	r2, [pc, #388]	@ (800290c <HAL_TIM_ConfigClockSource+0x234>)
 8002786:	4293      	cmp	r3, r2
 8002788:	f200 80a6 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 800278c:	4a60      	ldr	r2, [pc, #384]	@ (8002910 <HAL_TIM_ConfigClockSource+0x238>)
 800278e:	4293      	cmp	r3, r2
 8002790:	f000 8099 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002794:	4a5e      	ldr	r2, [pc, #376]	@ (8002910 <HAL_TIM_ConfigClockSource+0x238>)
 8002796:	4293      	cmp	r3, r2
 8002798:	f200 809e 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 800279c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80027a0:	f000 8091 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 80027a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80027a8:	f200 8096 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 80027ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027b0:	f000 8089 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 80027b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027b8:	f200 808e 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 80027bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c0:	d03e      	beq.n	8002840 <HAL_TIM_ConfigClockSource+0x168>
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c6:	f200 8087 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ce:	f000 8086 	beq.w	80028de <HAL_TIM_ConfigClockSource+0x206>
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d6:	d87f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 80027d8:	2b70      	cmp	r3, #112	@ 0x70
 80027da:	d01a      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x13a>
 80027dc:	2b70      	cmp	r3, #112	@ 0x70
 80027de:	d87b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 80027e0:	2b60      	cmp	r3, #96	@ 0x60
 80027e2:	d050      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x1ae>
 80027e4:	2b60      	cmp	r3, #96	@ 0x60
 80027e6:	d877      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 80027e8:	2b50      	cmp	r3, #80	@ 0x50
 80027ea:	d03c      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x18e>
 80027ec:	2b50      	cmp	r3, #80	@ 0x50
 80027ee:	d873      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 80027f0:	2b40      	cmp	r3, #64	@ 0x40
 80027f2:	d058      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x1ce>
 80027f4:	2b40      	cmp	r3, #64	@ 0x40
 80027f6:	d86f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 80027f8:	2b30      	cmp	r3, #48	@ 0x30
 80027fa:	d064      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 80027fc:	2b30      	cmp	r3, #48	@ 0x30
 80027fe:	d86b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d060      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d867      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x200>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05c      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 800280c:	2b10      	cmp	r3, #16
 800280e:	d05a      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002810:	e062      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002822:	f000 fba3 	bl	8002f6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
      break;
 800283e:	e04f      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002850:	f000 fb8c 	bl	8002f6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002862:	609a      	str	r2, [r3, #8]
      break;
 8002864:	e03c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	461a      	mov	r2, r3
 8002874:	f000 fafe 	bl	8002e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2150      	movs	r1, #80	@ 0x50
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fb57 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 8002884:	e02c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002892:	461a      	mov	r2, r3
 8002894:	f000 fb1d 	bl	8002ed2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2160      	movs	r1, #96	@ 0x60
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fb47 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 80028a4:	e01c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 fade 	bl	8002e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2140      	movs	r1, #64	@ 0x40
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fb37 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 80028c4:	e00c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f000 fb2e 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 80028d6:	e003      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e000      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80028de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	00100070 	.word	0x00100070
 8002900:	00100060 	.word	0x00100060
 8002904:	00100050 	.word	0x00100050
 8002908:	00100040 	.word	0x00100040
 800290c:	00100030 	.word	0x00100030
 8002910:	00100020 	.word	0x00100020

08002914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a2c      	ldr	r2, [pc, #176]	@ (80029d8 <TIM_Base_SetConfig+0xc4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <TIM_Base_SetConfig+0x28>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002932:	d003      	beq.n	800293c <TIM_Base_SetConfig+0x28>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a29      	ldr	r2, [pc, #164]	@ (80029dc <TIM_Base_SetConfig+0xc8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a21      	ldr	r2, [pc, #132]	@ (80029d8 <TIM_Base_SetConfig+0xc4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_Base_SetConfig+0x52>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800295c:	d003      	beq.n	8002966 <TIM_Base_SetConfig+0x52>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a1e      	ldr	r2, [pc, #120]	@ (80029dc <TIM_Base_SetConfig+0xc8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d108      	bne.n	8002978 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0e      	ldr	r2, [pc, #56]	@ (80029d8 <TIM_Base_SetConfig+0xc4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d105      	bne.n	80029ca <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f023 0201 	bic.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]
  }
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400

080029e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f023 0201 	bic.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f023 0302 	bic.w	r3, r3, #2
 8002a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aac <TIM_OC1_SetConfig+0xcc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10c      	bne.n	8002a5a <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0308 	bic.w	r3, r3, #8
 8002a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 0304 	bic.w	r3, r3, #4
 8002a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a13      	ldr	r2, [pc, #76]	@ (8002aac <TIM_OC1_SetConfig+0xcc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d111      	bne.n	8002a86 <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	621a      	str	r2, [r3, #32]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40012c00 	.word	0x40012c00

08002ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 0210 	bic.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f023 0320 	bic.w	r3, r3, #32
 8002afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b88 <TIM_OC2_SetConfig+0xd8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10d      	bne.n	8002b30 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <TIM_OC2_SetConfig+0xd8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d113      	bne.n	8002b60 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40012c00 	.word	0x40012c00

08002b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c60 <TIM_OC3_SetConfig+0xd4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10d      	bne.n	8002c0a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <TIM_OC3_SetConfig+0xd4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d113      	bne.n	8002c3a <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	621a      	str	r2, [r3, #32]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40012c00 	.word	0x40012c00

08002c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	031b      	lsls	r3, r3, #12
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d3c <TIM_OC4_SetConfig+0xd8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d10d      	bne.n	8002ce4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	031b      	lsls	r3, r3, #12
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a15      	ldr	r2, [pc, #84]	@ (8002d3c <TIM_OC4_SetConfig+0xd8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d113      	bne.n	8002d14 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cf2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002cfa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	621a      	str	r2, [r3, #32]
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40012c00 	.word	0x40012c00

08002d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd4 <TIM_OC5_SetConfig+0x94>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d109      	bne.n	8002dae <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40012c00 	.word	0x40012c00

08002dd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	051b      	lsls	r3, r3, #20
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a10      	ldr	r2, [pc, #64]	@ (8002e70 <TIM_OC6_SetConfig+0x98>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d109      	bne.n	8002e48 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	029b      	lsls	r3, r3, #10
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40012c00 	.word	0x40012c00

08002e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f023 030a 	bic.w	r3, r3, #10
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b087      	sub	sp, #28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f023 0210 	bic.w	r2, r3, #16
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	031b      	lsls	r3, r3, #12
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	621a      	str	r2, [r3, #32]
}
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f043 0307 	orr.w	r3, r3, #7
 8002f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	021a      	lsls	r2, r3, #8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a1a      	ldr	r2, [r3, #32]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a1a      	ldr	r2, [r3, #32]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800300c:	2302      	movs	r3, #2
 800300e:	e051      	b.n	80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a22      	ldr	r2, [pc, #136]	@ (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d108      	bne.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003040:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a14      	ldr	r2, [pc, #80]	@ (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307c:	d004      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a10      	ldr	r2, [pc, #64]	@ (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d10c      	bne.n	80030a2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800308e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	4313      	orrs	r3, r2
 8003098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40000400 	.word	0x40000400

080030c8 <memset>:
 80030c8:	4402      	add	r2, r0
 80030ca:	4603      	mov	r3, r0
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d100      	bne.n	80030d2 <memset+0xa>
 80030d0:	4770      	bx	lr
 80030d2:	f803 1b01 	strb.w	r1, [r3], #1
 80030d6:	e7f9      	b.n	80030cc <memset+0x4>

080030d8 <__libc_init_array>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	4d0d      	ldr	r5, [pc, #52]	@ (8003110 <__libc_init_array+0x38>)
 80030dc:	2600      	movs	r6, #0
 80030de:	4c0d      	ldr	r4, [pc, #52]	@ (8003114 <__libc_init_array+0x3c>)
 80030e0:	1b64      	subs	r4, r4, r5
 80030e2:	10a4      	asrs	r4, r4, #2
 80030e4:	42a6      	cmp	r6, r4
 80030e6:	d109      	bne.n	80030fc <__libc_init_array+0x24>
 80030e8:	4d0b      	ldr	r5, [pc, #44]	@ (8003118 <__libc_init_array+0x40>)
 80030ea:	2600      	movs	r6, #0
 80030ec:	4c0b      	ldr	r4, [pc, #44]	@ (800311c <__libc_init_array+0x44>)
 80030ee:	f000 f817 	bl	8003120 <_init>
 80030f2:	1b64      	subs	r4, r4, r5
 80030f4:	10a4      	asrs	r4, r4, #2
 80030f6:	42a6      	cmp	r6, r4
 80030f8:	d105      	bne.n	8003106 <__libc_init_array+0x2e>
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003100:	3601      	adds	r6, #1
 8003102:	4798      	blx	r3
 8003104:	e7ee      	b.n	80030e4 <__libc_init_array+0xc>
 8003106:	f855 3b04 	ldr.w	r3, [r5], #4
 800310a:	3601      	adds	r6, #1
 800310c:	4798      	blx	r3
 800310e:	e7f2      	b.n	80030f6 <__libc_init_array+0x1e>
 8003110:	08003168 	.word	0x08003168
 8003114:	08003168 	.word	0x08003168
 8003118:	08003168 	.word	0x08003168
 800311c:	0800316c 	.word	0x0800316c

08003120 <_init>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr

0800312c <_fini>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	bf00      	nop
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr
