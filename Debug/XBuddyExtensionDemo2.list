
XBuddyExtensionDemo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080030bc  080030bc  000040bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ec  080030ec  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080030ec  080030ec  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030ec  080030ec  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ec  080030ec  000040ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030f0  080030f0  000040f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003100  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003100  000050c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c13e  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001865  00000000  00000000  00011180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  000129e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000936  00000000  00000000  000135e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f299  00000000  00000000  00013f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d143  00000000  00000000  000331af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8456  00000000  00000000  000402f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003288  00000000  00000000  0010878c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0010ba14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	080030a4 	.word	0x080030a4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	080030a4 	.word	0x080030a4

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b097      	sub	sp, #92	@ 0x5c
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 fc4b 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f89b 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f000 fa2b 	bl	8000700 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002aa:	f000 f8f7 	bl	800049c <MX_ICACHE_Init>
  MX_TIM2_Init();
 80002ae:	f000 f901 	bl	80004b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002b2:	f000 f997 	bl	80005e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002b6:	2100      	movs	r1, #0
 80002b8:	4843      	ldr	r0, [pc, #268]	@ (80003c8 <main+0x130>)
 80002ba:	f001 ffed 	bl	8002298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80002be:	2104      	movs	r1, #4
 80002c0:	4841      	ldr	r0, [pc, #260]	@ (80003c8 <main+0x130>)
 80002c2:	f001 ffe9 	bl	8002298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80002c6:	2108      	movs	r1, #8
 80002c8:	483f      	ldr	r0, [pc, #252]	@ (80003c8 <main+0x130>)
 80002ca:	f001 ffe5 	bl	8002298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80002ce:	210c      	movs	r1, #12
 80002d0:	483d      	ldr	r0, [pc, #244]	@ (80003c8 <main+0x130>)
 80002d2:	f001 ffe1 	bl	8002298 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002d6:	2100      	movs	r1, #0
 80002d8:	483c      	ldr	r0, [pc, #240]	@ (80003cc <main+0x134>)
 80002da:	f001 ffdd 	bl	8002298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002de:	2104      	movs	r1, #4
 80002e0:	483a      	ldr	r0, [pc, #232]	@ (80003cc <main+0x134>)
 80002e2:	f001 ffd9 	bl	8002298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002e6:	2108      	movs	r1, #8
 80002e8:	4838      	ldr	r0, [pc, #224]	@ (80003cc <main+0x134>)
 80002ea:	f001 ffd5 	bl	8002298 <HAL_TIM_PWM_Start>

  const float color_red[4] = 	{0,0,0,1};
 80002ee:	f04f 0300 	mov.w	r3, #0
 80002f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80002fa:	f04f 0300 	mov.w	r3, #0
 80002fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000300:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000304:	653b      	str	r3, [r7, #80]	@ 0x50
  const float color_green[4] = 	{0,0,1,0};
 8000306:	f04f 0300 	mov.w	r3, #0
 800030a:	637b      	str	r3, [r7, #52]	@ 0x34
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000312:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000318:	f04f 0300 	mov.w	r3, #0
 800031c:	643b      	str	r3, [r7, #64]	@ 0x40
  const float color_blue[4] = 	{0,1,0,0};
 800031e:	f04f 0300 	mov.w	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	@ 0x24
 8000324:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800032a:	f04f 0300 	mov.w	r3, #0
 800032e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	633b      	str	r3, [r7, #48]	@ 0x30
  const float color_yellow[4] = {0,0,1,1};
 8000336:	4b26      	ldr	r3, [pc, #152]	@ (80003d0 <main+0x138>)
 8000338:	f107 0414 	add.w	r4, r7, #20
 800033c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800033e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const float color_white[4] = 	{0,1,1,1};
 8000342:	4b24      	ldr	r3, [pc, #144]	@ (80003d4 <main+0x13c>)
 8000344:	1d3c      	adds	r4, r7, #4
 8000346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const int blink_delay_ms = 2000;
 800034c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000350:	657b      	str	r3, [r7, #84]	@ 0x54
	  /*TIM2->CCR1 = 2000; //D_PWM_W
	  TIM2->CCR2 = 2000; //D_PWM_B
	  TIM2->CCR3 = 2000; //D_PWM_G
	  TIM2->CCR4 = 2000; //D_PWM_R*/

	  TIM3->CCR1 = 52425; //D_PWM_STRIP - 80% PWM
 8000352:	4b21      	ldr	r3, [pc, #132]	@ (80003d8 <main+0x140>)
 8000354:	f64c 42c9 	movw	r2, #52425	@ 0xccc9
 8000358:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR2 = 65532 - 36042; //D_FAN2_PWM - 55% PWM (value inverted)
 800035a:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <main+0x140>)
 800035c:	f247 3232 	movw	r2, #29490	@ 0x7332
 8000360:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM3->CCR3 = 65532 - 36042; //D_FAN1_PWM - 55% PWM (value inverted)
 8000362:	4b1d      	ldr	r3, [pc, #116]	@ (80003d8 <main+0x140>)
 8000364:	f247 3232 	movw	r2, #29490	@ 0x7332
 8000368:	63da      	str	r2, [r3, #60]	@ 0x3c

	  while (1){
		  set_wbgr_strip_color(color_white);
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fa29 	bl	80007c4 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fc9d 	bl	8000cb4 <HAL_Delay>
		  set_wbgr_strip_color(color_blue);
 800037a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fa20 	bl	80007c4 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fc94 	bl	8000cb4 <HAL_Delay>
		  set_wbgr_strip_color(color_green);
 800038c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fa17 	bl	80007c4 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fc8b 	bl	8000cb4 <HAL_Delay>
		  set_wbgr_strip_color(color_yellow);
 800039e:	f107 0314 	add.w	r3, r7, #20
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fa0e 	bl	80007c4 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 80003a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fc82 	bl	8000cb4 <HAL_Delay>
		  set_wbgr_strip_color(color_red);
 80003b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fa05 	bl	80007c4 <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 80003ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fc79 	bl	8000cb4 <HAL_Delay>
		  set_wbgr_strip_color(color_white);
 80003c2:	bf00      	nop
 80003c4:	e7d1      	b.n	800036a <main+0xd2>
 80003c6:	bf00      	nop
 80003c8:	20000028 	.word	0x20000028
 80003cc:	20000074 	.word	0x20000074
 80003d0:	080030bc 	.word	0x080030bc
 80003d4:	080030cc 	.word	0x080030cc
 80003d8:	40000400 	.word	0x40000400

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b09c      	sub	sp, #112	@ 0x70
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0320 	add.w	r3, r7, #32
 80003e6:	2250      	movs	r2, #80	@ 0x50
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 fe2e 	bl	800304c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	f107 0308 	add.w	r3, r7, #8
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
 8000400:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000402:	4b24      	ldr	r3, [pc, #144]	@ (8000494 <SystemClock_Config+0xb8>)
 8000404:	691b      	ldr	r3, [r3, #16]
 8000406:	4a23      	ldr	r2, [pc, #140]	@ (8000494 <SystemClock_Config+0xb8>)
 8000408:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800040c:	6113      	str	r3, [r2, #16]
 800040e:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <SystemClock_Config+0xb8>)
 8000410:	691b      	ldr	r3, [r3, #16]
 8000412:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800041a:	bf00      	nop
 800041c:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <SystemClock_Config+0xb8>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	f003 0308 	and.w	r3, r3, #8
 8000424:	2b08      	cmp	r3, #8
 8000426:	d1f9      	bne.n	800041c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000430:	2308      	movs	r3, #8
 8000432:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000434:	2340      	movs	r3, #64	@ 0x40
 8000436:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000438:	2300      	movs	r3, #0
 800043a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0320 	add.w	r3, r7, #32
 8000440:	4618      	mov	r0, r3
 8000442:	f000 ff39 	bl	80012b8 <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800044c:	f000 fa02 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	231f      	movs	r3, #31
 8000452:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000468:	f107 0308 	add.w	r3, r7, #8
 800046c:	2101      	movs	r1, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fb5a 	bl	8001b28 <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800047a:	f000 f9eb 	bl	8000854 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 800047e:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <SystemClock_Config+0xbc>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a05      	ldr	r2, [pc, #20]	@ (8000498 <SystemClock_Config+0xbc>)
 8000484:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000488:	6013      	str	r3, [r2, #0]
}
 800048a:	bf00      	nop
 800048c:	3770      	adds	r7, #112	@ 0x70
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	44020800 	.word	0x44020800
 8000498:	40022000 	.word	0x40022000

0800049c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004a0:	f000 fefa 	bl	8001298 <HAL_ICACHE_Enable>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80004aa:	f000 f9d3 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08e      	sub	sp, #56	@ 0x38
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d4:	463b      	mov	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e6:	4b3e      	ldr	r3, [pc, #248]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 80004e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004ee:	4b3c      	ldr	r3, [pc, #240]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b3a      	ldr	r3, [pc, #232]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004fa:	4b39      	ldr	r3, [pc, #228]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 80004fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000500:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000502:	4b37      	ldr	r3, [pc, #220]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000508:	4b35      	ldr	r3, [pc, #212]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 800050a:	2280      	movs	r2, #128	@ 0x80
 800050c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800050e:	4834      	ldr	r0, [pc, #208]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 8000510:	f001 fe0a 	bl	8002128 <HAL_TIM_Base_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800051a:	f000 f99b 	bl	8000854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000522:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000524:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000528:	4619      	mov	r1, r3
 800052a:	482d      	ldr	r0, [pc, #180]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 800052c:	f002 f896 	bl	800265c <HAL_TIM_ConfigClockSource>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000536:	f000 f98d 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800053a:	4829      	ldr	r0, [pc, #164]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 800053c:	f001 fe4b 	bl	80021d6 <HAL_TIM_PWM_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000546:	f000 f985 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	4619      	mov	r1, r3
 8000558:	4821      	ldr	r0, [pc, #132]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 800055a:	f002 fd0f 	bl	8002f7c <HAL_TIMEx_MasterConfigSynchronization>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000564:	f000 f976 	bl	8000854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000568:	2360      	movs	r3, #96	@ 0x60
 800056a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	4619      	mov	r1, r3
 800057e:	4818      	ldr	r0, [pc, #96]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 8000580:	f001 ff58 	bl	8002434 <HAL_TIM_PWM_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800058a:	f000 f963 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	2204      	movs	r2, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4812      	ldr	r0, [pc, #72]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 8000596:	f001 ff4d 	bl	8002434 <HAL_TIM_PWM_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80005a0:	f000 f958 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	2208      	movs	r2, #8
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 80005ac:	f001 ff42 	bl	8002434 <HAL_TIM_PWM_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80005b6:	f000 f94d 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005ba:	463b      	mov	r3, r7
 80005bc:	220c      	movs	r2, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 80005c2:	f001 ff37 	bl	8002434 <HAL_TIM_PWM_ConfigChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80005cc:	f000 f942 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <MX_TIM2_Init+0x12c>)
 80005d2:	f000 f985 	bl	80008e0 <HAL_TIM_MspPostInit>

}
 80005d6:	bf00      	nop
 80005d8:	3738      	adds	r7, #56	@ 0x38
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000028 	.word	0x20000028

080005e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08e      	sub	sp, #56	@ 0x38
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000616:	4b38      	ldr	r3, [pc, #224]	@ (80006f8 <MX_TIM3_Init+0x114>)
 8000618:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_TIM3_Init+0x118>)
 800061a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800061c:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_TIM3_Init+0x114>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <MX_TIM3_Init+0x114>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000628:	4b33      	ldr	r3, [pc, #204]	@ (80006f8 <MX_TIM3_Init+0x114>)
 800062a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800062e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000630:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_TIM3_Init+0x114>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000636:	4b30      	ldr	r3, [pc, #192]	@ (80006f8 <MX_TIM3_Init+0x114>)
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800063c:	482e      	ldr	r0, [pc, #184]	@ (80006f8 <MX_TIM3_Init+0x114>)
 800063e:	f001 fd73 	bl	8002128 <HAL_TIM_Base_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000648:	f000 f904 	bl	8000854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800064c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000650:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000656:	4619      	mov	r1, r3
 8000658:	4827      	ldr	r0, [pc, #156]	@ (80006f8 <MX_TIM3_Init+0x114>)
 800065a:	f001 ffff 	bl	800265c <HAL_TIM_ConfigClockSource>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000664:	f000 f8f6 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000668:	4823      	ldr	r0, [pc, #140]	@ (80006f8 <MX_TIM3_Init+0x114>)
 800066a:	f001 fdb4 	bl	80021d6 <HAL_TIM_PWM_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000674:	f000 f8ee 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	481c      	ldr	r0, [pc, #112]	@ (80006f8 <MX_TIM3_Init+0x114>)
 8000688:	f002 fc78 	bl	8002f7c <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000692:	f000 f8df 	bl	8000854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000696:	2360      	movs	r3, #96	@ 0x60
 8000698:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	4619      	mov	r1, r3
 80006ac:	4812      	ldr	r0, [pc, #72]	@ (80006f8 <MX_TIM3_Init+0x114>)
 80006ae:	f001 fec1 	bl	8002434 <HAL_TIM_PWM_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80006b8:	f000 f8cc 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	2204      	movs	r2, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_TIM3_Init+0x114>)
 80006c4:	f001 feb6 	bl	8002434 <HAL_TIM_PWM_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80006ce:	f000 f8c1 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	2208      	movs	r2, #8
 80006d6:	4619      	mov	r1, r3
 80006d8:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <MX_TIM3_Init+0x114>)
 80006da:	f001 feab 	bl	8002434 <HAL_TIM_PWM_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80006e4:	f000 f8b6 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <MX_TIM3_Init+0x114>)
 80006ea:	f000 f8f9 	bl	80008e0 <HAL_TIM_MspPostInit>

}
 80006ee:	bf00      	nop
 80006f0:	3738      	adds	r7, #56	@ 0x38
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000074 	.word	0x20000074
 80006fc:	40000400 	.word	0x40000400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <MX_GPIO_Init+0xbc>)
 8000718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071c:	4a27      	ldr	r2, [pc, #156]	@ (80007bc <MX_GPIO_Init+0xbc>)
 800071e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000722:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000726:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <MX_GPIO_Init+0xbc>)
 8000728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800072c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_GPIO_Init+0xbc>)
 8000736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800073a:	4a20      	ldr	r2, [pc, #128]	@ (80007bc <MX_GPIO_Init+0xbc>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_GPIO_Init+0xbc>)
 8000746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_GPIO_Init+0xbc>)
 8000754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <MX_GPIO_Init+0xbc>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_GPIO_Init+0xbc>)
 8000764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 8000776:	4812      	ldr	r0, [pc, #72]	@ (80007c0 <MX_GPIO_Init+0xc0>)
 8000778:	f000 fd76 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800077c:	2301      	movs	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_GPIO_Init+0xc0>)
 8000790:	f000 fc18 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 8000794:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_GPIO_Init+0xc0>)
 80007ae:	f000 fc09 	bl	8000fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	3720      	adds	r7, #32
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	44020c00 	.word	0x44020c00
 80007c0:	42020400 	.word	0x42020400

080007c4 <set_wbgr_strip_color>:

/* USER CODE BEGIN 4 */
void set_wbgr_strip_color(const float* color){
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = (int)(65532 * color[0]); //D_PWM_W
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	edd3 7a00 	vldr	s15, [r3]
 80007d2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000850 <set_wbgr_strip_color+0x8c>
 80007d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007e2:	ee17 2a90 	vmov	r2, s15
 80007e6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = (int)(65532 * color[1]); //D_PWM_B
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3304      	adds	r3, #4
 80007ec:	edd3 7a00 	vldr	s15, [r3]
 80007f0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000850 <set_wbgr_strip_color+0x8c>
 80007f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000800:	ee17 2a90 	vmov	r2, s15
 8000804:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2->CCR3 = (int)(65532 * color[2]); //D_PWM_G
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3308      	adds	r3, #8
 800080a:	edd3 7a00 	vldr	s15, [r3]
 800080e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000850 <set_wbgr_strip_color+0x8c>
 8000812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800081a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800081e:	ee17 2a90 	vmov	r2, s15
 8000822:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = (int)(65532 * color[3]); //D_PWM_R
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	330c      	adds	r3, #12
 8000828:	edd3 7a00 	vldr	s15, [r3]
 800082c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000850 <set_wbgr_strip_color+0x8c>
 8000830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000838:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800083c:	ee17 2a90 	vmov	r2, s15
 8000840:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	477ffc00 	.word	0x477ffc00

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <Error_Handler+0x8>

08000860 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000880:	d10f      	bne.n	80008a2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_TIM_Base_MspInit+0x68>)
 8000884:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000888:	4a13      	ldr	r2, [pc, #76]	@ (80008d8 <HAL_TIM_Base_MspInit+0x68>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <HAL_TIM_Base_MspInit+0x68>)
 8000894:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008a0:	e013      	b.n	80008ca <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <HAL_TIM_Base_MspInit+0x6c>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d10e      	bne.n	80008ca <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <HAL_TIM_Base_MspInit+0x68>)
 80008ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80008b2:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <HAL_TIM_Base_MspInit+0x68>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_TIM_Base_MspInit+0x68>)
 80008be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	44020c00 	.word	0x44020c00
 80008dc:	40000400 	.word	0x40000400

080008e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000900:	d11f      	bne.n	8000942 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <HAL_TIM_MspPostInit+0xb4>)
 8000904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000908:	4a22      	ldr	r2, [pc, #136]	@ (8000994 <HAL_TIM_MspPostInit+0xb4>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000912:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <HAL_TIM_MspPostInit+0xb4>)
 8000914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000920:	230f      	movs	r3, #15
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000930:	2301      	movs	r3, #1
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4817      	ldr	r0, [pc, #92]	@ (8000998 <HAL_TIM_MspPostInit+0xb8>)
 800093c:	f000 fb42 	bl	8000fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000940:	e024      	b.n	800098c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a15      	ldr	r2, [pc, #84]	@ (800099c <HAL_TIM_MspPostInit+0xbc>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d11f      	bne.n	800098c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <HAL_TIM_MspPostInit+0xb4>)
 800094e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000952:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <HAL_TIM_MspPostInit+0xb4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800095c:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_TIM_MspPostInit+0xb4>)
 800095e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800096a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800097c:	2302      	movs	r3, #2
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4804      	ldr	r0, [pc, #16]	@ (8000998 <HAL_TIM_MspPostInit+0xb8>)
 8000988:	f000 fb1c 	bl	8000fc4 <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	@ 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	44020c00 	.word	0x44020c00
 8000998:	42020000 	.word	0x42020000
 800099c:	40000400 	.word	0x40000400

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <MemManage_Handler+0x4>

080009b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 f93d 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a06:	4b30      	ldr	r3, [pc, #192]	@ (8000ac8 <SystemInit+0xc8>)
 8000a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac8 <SystemInit+0xc8>)
 8000a0e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <SystemInit+0xcc>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <SystemInit+0xcc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a22:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <SystemInit+0xcc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000a28:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <SystemInit+0xcc>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4927      	ldr	r1, [pc, #156]	@ (8000acc <SystemInit+0xcc>)
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <SystemInit+0xd0>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <SystemInit+0xcc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000a3a:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <SystemInit+0xcc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000a40:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <SystemInit+0xcc>)
 8000a42:	4a24      	ldr	r2, [pc, #144]	@ (8000ad4 <SystemInit+0xd4>)
 8000a44:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000a46:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <SystemInit+0xcc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <SystemInit+0xcc>)
 8000a4e:	4a21      	ldr	r2, [pc, #132]	@ (8000ad4 <SystemInit+0xd4>)
 8000a50:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <SystemInit+0xcc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000a58:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <SystemInit+0xcc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000acc <SystemInit+0xcc>)
 8000a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <SystemInit+0xcc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <SystemInit+0xc8>)
 8000a6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a70:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <SystemInit+0xd8>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000a7a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000a82:	d003      	beq.n	8000a8c <SystemInit+0x8c>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000a8a:	d117      	bne.n	8000abc <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <SystemInit+0xd8>)
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d005      	beq.n	8000aa4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <SystemInit+0xd8>)
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <SystemInit+0xdc>)
 8000a9c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <SystemInit+0xd8>)
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <SystemInit+0xe0>)
 8000aa2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <SystemInit+0xd8>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <SystemInit+0xd8>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <SystemInit+0xd8>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <SystemInit+0xd8>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	61d3      	str	r3, [r2, #28]
  }
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	44020c00 	.word	0x44020c00
 8000ad0:	fae2eae3 	.word	0xfae2eae3
 8000ad4:	01010280 	.word	0x01010280
 8000ad8:	40022000 	.word	0x40022000
 8000adc:	08192a3b 	.word	0x08192a3b
 8000ae0:	4c5d6e7f 	.word	0x4c5d6e7f

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ae8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aea:	e003      	b.n	8000af4 <LoopCopyDataInit>

08000aec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000aee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000af0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000af2:	3104      	adds	r1, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000af4:	480b      	ldr	r0, [pc, #44]	@ (8000b24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000af8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000afa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000afc:	d3f6      	bcc.n	8000aec <CopyDataInit>
	ldr	r2, =_sbss
 8000afe:	4a0b      	ldr	r2, [pc, #44]	@ (8000b2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b00:	e002      	b.n	8000b08 <LoopFillZerobss>

08000b02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b04:	f842 3b04 	str.w	r3, [r2], #4

08000b08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <LoopForever+0x16>)
	cmp	r2, r3
 8000b0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b0c:	d3f9      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0e:	f7ff ff77 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 faa3 	bl	800305c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b16:	f7ff fbbf 	bl	8000298 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b1c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000b20:	080030f4 	.word	0x080030f4
	ldr	r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b28:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b2c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b30:	200000c4 	.word	0x200000c4

08000b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f96c 	bl	8000e1a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000b42:	f001 f9a9 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8000b46:	4602      	mov	r2, r0
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <HAL_Init+0x44>)
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	490b      	ldr	r1, [pc, #44]	@ (8000b80 <HAL_Init+0x48>)
 8000b52:	5ccb      	ldrb	r3, [r1, r3]
 8000b54:	fa22 f303 	lsr.w	r3, r2, r3
 8000b58:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <HAL_Init+0x4c>)
 8000b5a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b5c:	2004      	movs	r0, #4
 8000b5e:	f000 f9a3 	bl	8000ea8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f810 	bl	8000b88 <HAL_InitTick>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e002      	b.n	8000b78 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b72:	f7ff fe75 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	44020c00 	.word	0x44020c00
 8000b80:	080030dc 	.word	0x080030dc
 8000b84:	20000000 	.word	0x20000000

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000b94:	4b33      	ldr	r3, [pc, #204]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e05c      	b.n	8000c5a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000ba0:	4b31      	ldr	r3, [pc, #196]	@ (8000c68 <HAL_InitTick+0xe0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d10c      	bne.n	8000bc6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000bac:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <HAL_InitTick+0xe4>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e037      	b.n	8000c36 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000bc6:	f000 f9c7 	bl	8000f58 <HAL_SYSTICK_GetCLKSourceConfig>
 8000bca:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d023      	beq.n	8000c1a <HAL_InitTick+0x92>
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d82d      	bhi.n	8000c34 <HAL_InitTick+0xac>
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_InitTick+0x5e>
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d00d      	beq.n	8000c00 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000be4:	e026      	b.n	8000c34 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000be6:	4b21      	ldr	r3, [pc, #132]	@ (8000c6c <HAL_InitTick+0xe4>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000bf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	60fb      	str	r3, [r7, #12]
        break;
 8000bfe:	e01a      	b.n	8000c36 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c00:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c0e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	60fb      	str	r3, [r7, #12]
        break;
 8000c18:	e00d      	b.n	8000c36 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c30:	60fb      	str	r3, [r7, #12]
        break;
 8000c32:	e000      	b.n	8000c36 <HAL_InitTick+0xae>
        break;
 8000c34:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f000 f914 	bl	8000e64 <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e009      	b.n	8000c5a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c46:	2200      	movs	r2, #0
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c4e:	f000 f8ef 	bl	8000e30 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000c52:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_InitTick+0xe8>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	e000e010 	.word	0xe000e010
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200000c0 	.word	0x200000c0

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000c0 	.word	0x200000c0

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	@ (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	@ 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	@ 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff6a 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3e:	f7ff ff81 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	68b9      	ldr	r1, [r7, #8]
 8000e48:	6978      	ldr	r0, [r7, #20]
 8000e4a:	f7ff ffb3 	bl	8000db4 <NVIC_EncodePriority>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff82 	bl	8000d60 <__NVIC_SetPriority>
}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00d      	b.n	8000e96 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <HAL_SYSTICK_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_SYSTICK_Config+0x40>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_SYSTICK_Config+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <HAL_SYSTICK_Config+0x40>)
 8000e8e:	f043 0303 	orr.w	r3, r3, #3
 8000e92:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d844      	bhi.n	8000f40 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ebc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebc:	08000edf 	.word	0x08000edf
 8000ec0:	08000efd 	.word	0x08000efd
 8000ec4:	08000f1f 	.word	0x08000f1f
 8000ec8:	08000f41 	.word	0x08000f41
 8000ecc:	08000ed1 	.word	0x08000ed1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6013      	str	r3, [r2, #0]
      break;
 8000edc:	e031      	b.n	8000f42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000eec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ef0:	4a18      	ldr	r2, [pc, #96]	@ (8000f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ef2:	f023 030c 	bic.w	r3, r3, #12
 8000ef6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000efa:	e022      	b.n	8000f42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f02:	f023 0304 	bic.w	r3, r3, #4
 8000f06:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f0e:	f023 030c 	bic.w	r3, r3, #12
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000f1c:	e011      	b.n	8000f42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f24:	f023 0304 	bic.w	r3, r3, #4
 8000f28:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f30:	f023 030c 	bic.w	r3, r3, #12
 8000f34:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000f3e:	e000      	b.n	8000f42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000f40:	bf00      	nop
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e010 	.word	0xe000e010
 8000f54:	44020c00 	.word	0x44020c00

08000f58 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	e01e      	b.n	8000fae <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000f72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d00f      	beq.n	8000fa2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d80f      	bhi.n	8000fa8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d003      	beq.n	8000f9c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000f94:	e008      	b.n	8000fa8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
        break;
 8000f9a:	e008      	b.n	8000fae <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
        break;
 8000fa0:	e005      	b.n	8000fae <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	607b      	str	r3, [r7, #4]
        break;
 8000fa6:	e002      	b.n	8000fae <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
        break;
 8000fac:	bf00      	nop
    }
  }
  return systick_source;
 8000fae:	687b      	ldr	r3, [r7, #4]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e010 	.word	0xe000e010
 8000fc0:	44020c00 	.word	0x44020c00

08000fc4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000fd2:	e136      	b.n	8001242 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8128 	beq.w	800123c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x38>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b12      	cmp	r3, #18
 8000ffa:	d125      	bne.n	8001048 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4013      	ands	r3, r2
 800101e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	f003 020f 	and.w	r2, r3, #15
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	4313      	orrs	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	6979      	ldr	r1, [r7, #20]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	4313      	orrs	r3, r2
 8001074:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d00b      	beq.n	800109c <HAL_GPIO_Init+0xd8>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d007      	beq.n	800109c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001090:	2b11      	cmp	r3, #17
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b12      	cmp	r3, #18
 800109a:	d130      	bne.n	80010fe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010d2:	2201      	movs	r2, #1
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	4013      	ands	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	f003 0201 	and.w	r2, r3, #1
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d017      	beq.n	8001136 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	4013      	ands	r3, r2
 800111c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4313      	orrs	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d07c      	beq.n	800123c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001142:	4a47      	ldr	r2, [pc, #284]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3318      	adds	r3, #24
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	4013      	ands	r3, r2
 8001164:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	0a9a      	lsrs	r2, r3, #10
 800116a:	4b3e      	ldr	r3, [pc, #248]	@ (8001264 <HAL_GPIO_Init+0x2a0>)
 800116c:	4013      	ands	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	f002 0203 	and.w	r2, r2, #3
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	4093      	lsls	r3, r2
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	4313      	orrs	r3, r2
 800117c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800117e:	4938      	ldr	r1, [pc, #224]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3318      	adds	r3, #24
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800118c:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80011b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4013      	ands	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80011da:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 80011e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4013      	ands	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001206:	4a16      	ldr	r2, [pc, #88]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 8001210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001214:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4013      	ands	r3, r2
 800121e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001234:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	3301      	adds	r3, #1
 8001240:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	f47f aec1 	bne.w	8000fd4 <HAL_GPIO_Init+0x10>
  }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	44022000 	.word	0x44022000
 8001264:	002f7f7f 	.word	0x002f7f7f

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001284:	e002      	b.n	800128c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_ICACHE_Enable+0x1c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <HAL_ICACHE_Enable+0x1c>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40030400 	.word	0x40030400

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f000 bc28 	b.w	8001b1c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012cc:	4b94      	ldr	r3, [pc, #592]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f003 0318 	and.w	r3, r3, #24
 80012d4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80012d6:	4b92      	ldr	r3, [pc, #584]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80012d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d05b      	beq.n	80013a4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x46>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	2b18      	cmp	r3, #24
 80012f6:	d114      	bne.n	8001322 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d111      	bne.n	8001322 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f000 bc08 	b.w	8001b1c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800130c:	4b84      	ldr	r3, [pc, #528]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	041b      	lsls	r3, r3, #16
 800131a:	4981      	ldr	r1, [pc, #516]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800131c:	4313      	orrs	r3, r2
 800131e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001320:	e040      	b.n	80013a4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d023      	beq.n	8001372 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800132a:	4b7d      	ldr	r3, [pc, #500]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a7c      	ldr	r2, [pc, #496]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001336:	f7ff fcb1 	bl	8000c9c <HAL_GetTick>
 800133a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800133e:	f7ff fcad 	bl	8000c9c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e3e5      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001350:	4b73      	ldr	r3, [pc, #460]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800135c:	4b70      	ldr	r3, [pc, #448]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	041b      	lsls	r3, r3, #16
 800136a:	496d      	ldr	r1, [pc, #436]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800136c:	4313      	orrs	r3, r2
 800136e:	618b      	str	r3, [r1, #24]
 8001370:	e018      	b.n	80013a4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001372:	4b6b      	ldr	r3, [pc, #428]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6a      	ldr	r2, [pc, #424]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800137c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fc8d 	bl	8000c9c <HAL_GetTick>
 8001382:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001386:	f7ff fc89 	bl	8000c9c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e3c1      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001398:	4b61      	ldr	r3, [pc, #388]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80a0 	beq.w	80014f2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	2b10      	cmp	r3, #16
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_OscConfig+0x10c>
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b18      	cmp	r3, #24
 80013bc:	d109      	bne.n	80013d2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f040 8092 	bne.w	80014f2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e3a4      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x132>
 80013dc:	4b50      	ldr	r3, [pc, #320]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e058      	b.n	800149c <HAL_RCC_OscConfig+0x1e4>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_OscConfig+0x160>
 80013f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80013f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b48      	ldr	r3, [pc, #288]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a47      	ldr	r2, [pc, #284]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001404:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b45      	ldr	r3, [pc, #276]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a44      	ldr	r2, [pc, #272]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001410:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e041      	b.n	800149c <HAL_RCC_OscConfig+0x1e4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001420:	d112      	bne.n	8001448 <HAL_RCC_OscConfig+0x190>
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a3e      	ldr	r2, [pc, #248]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a3b      	ldr	r2, [pc, #236]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001434:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a38      	ldr	r2, [pc, #224]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e029      	b.n	800149c <HAL_RCC_OscConfig+0x1e4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
 8001452:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a32      	ldr	r2, [pc, #200]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2f      	ldr	r2, [pc, #188]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001464:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a2c      	ldr	r2, [pc, #176]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e011      	b.n	800149c <HAL_RCC_OscConfig+0x1e4>
 8001478:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a25      	ldr	r2, [pc, #148]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a22      	ldr	r2, [pc, #136]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001496:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800149a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fbfa 	bl	8000c9c <HAL_GetTick>
 80014a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fbf6 	bl	8000c9c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	@ 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e32e      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x1f4>
 80014ca:	e012      	b.n	80014f2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbe6 	bl	8000c9c <HAL_GetTick>
 80014d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fbe2 	bl	8000c9c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e31a      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 809a 	beq.w	8001634 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x25a>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	2b18      	cmp	r3, #24
 800150a:	d149      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d146      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d104      	bne.n	8001524 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e2fe      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
 800151e:	bf00      	nop
 8001520:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11c      	bne.n	8001564 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800152a:	4b9a      	ldr	r3, [pc, #616]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0218 	and.w	r2, r3, #24
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	429a      	cmp	r2, r3
 8001538:	d014      	beq.n	8001564 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800153a:	4b96      	ldr	r3, [pc, #600]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 0218 	bic.w	r2, r3, #24
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	4993      	ldr	r1, [pc, #588]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800154c:	f000 fdd0 	bl	80020f0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001550:	4b91      	ldr	r3, [pc, #580]	@ (8001798 <HAL_RCC_OscConfig+0x4e0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fb17 	bl	8000b88 <HAL_InitTick>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e2db      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fb9a 	bl	8000c9c <HAL_GetTick>
 8001568:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800156c:	f7ff fb96 	bl	8000c9c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e2ce      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800157e:	4b85      	ldr	r3, [pc, #532]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800158a:	4b82      	ldr	r3, [pc, #520]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	041b      	lsls	r3, r3, #16
 8001598:	497e      	ldr	r1, [pc, #504]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800159a:	4313      	orrs	r3, r2
 800159c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800159e:	e049      	b.n	8001634 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d02c      	beq.n	8001602 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80015a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 0218 	bic.w	r2, r3, #24
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	4977      	ldr	r1, [pc, #476]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80015ba:	4b76      	ldr	r3, [pc, #472]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a75      	ldr	r2, [pc, #468]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb69 	bl	8000c9c <HAL_GetTick>
 80015ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fb65 	bl	8000c9c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e29d      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80015ec:	4b69      	ldr	r3, [pc, #420]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	4966      	ldr	r1, [pc, #408]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	610b      	str	r3, [r1, #16]
 8001600:	e018      	b.n	8001634 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001602:	4b64      	ldr	r3, [pc, #400]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a63      	ldr	r2, [pc, #396]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff fb45 	bl	8000c9c <HAL_GetTick>
 8001612:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001616:	f7ff fb41 	bl	8000c9c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e279      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001628:	4b5a      	ldr	r3, [pc, #360]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d03c      	beq.n	80016ba <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01c      	beq.n	8001682 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001648:	4b52      	ldr	r3, [pc, #328]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800164a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800164e:	4a51      	ldr	r2, [pc, #324]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001650:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001654:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fb20 	bl	8000c9c <HAL_GetTick>
 800165c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001660:	f7ff fb1c 	bl	8000c9c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e254      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001672:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ef      	beq.n	8001660 <HAL_RCC_OscConfig+0x3a8>
 8001680:	e01b      	b.n	80016ba <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001682:	4b44      	ldr	r3, [pc, #272]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001688:	4a42      	ldr	r2, [pc, #264]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800168a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800168e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001692:	f7ff fb03 	bl	8000c9c <HAL_GetTick>
 8001696:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800169a:	f7ff faff 	bl	8000c9c <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e237      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016ac:	4b39      	ldr	r3, [pc, #228]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80016ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ef      	bne.n	800169a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80d2 	beq.w	800186c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80016c8:	4b34      	ldr	r3, [pc, #208]	@ (800179c <HAL_RCC_OscConfig+0x4e4>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d118      	bne.n	8001706 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80016d4:	4b31      	ldr	r3, [pc, #196]	@ (800179c <HAL_RCC_OscConfig+0x4e4>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	4a30      	ldr	r2, [pc, #192]	@ (800179c <HAL_RCC_OscConfig+0x4e4>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fadc 	bl	8000c9c <HAL_GetTick>
 80016e4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff fad8 	bl	8000c9c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e210      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80016fa:	4b28      	ldr	r3, [pc, #160]	@ (800179c <HAL_RCC_OscConfig+0x4e4>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_RCC_OscConfig+0x468>
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001714:	4a1f      	ldr	r2, [pc, #124]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800171e:	e074      	b.n	800180a <HAL_RCC_OscConfig+0x552>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d118      	bne.n	800175a <HAL_RCC_OscConfig+0x4a2>
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800172a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800172e:	4a19      	ldr	r2, [pc, #100]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800173a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800173e:	4a15      	ldr	r2, [pc, #84]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800174a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800174e:	4a11      	ldr	r2, [pc, #68]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001758:	e057      	b.n	800180a <HAL_RCC_OscConfig+0x552>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d11e      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4e8>
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001778:	4a06      	ldr	r2, [pc, #24]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800177a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800177e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001782:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001788:	4a02      	ldr	r2, [pc, #8]	@ (8001794 <HAL_RCC_OscConfig+0x4dc>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001792:	e03a      	b.n	800180a <HAL_RCC_OscConfig+0x552>
 8001794:	44020c00 	.word	0x44020c00
 8001798:	20000004 	.word	0x20000004
 800179c:	44020800 	.word	0x44020800
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b85      	cmp	r3, #133	@ 0x85
 80017a6:	d118      	bne.n	80017da <HAL_RCC_OscConfig+0x522>
 80017a8:	4ba2      	ldr	r3, [pc, #648]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ae:	4aa1      	ldr	r2, [pc, #644]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017b8:	4b9e      	ldr	r3, [pc, #632]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017be:	4a9d      	ldr	r2, [pc, #628]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ce:	4a99      	ldr	r2, [pc, #612]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017d8:	e017      	b.n	800180a <HAL_RCC_OscConfig+0x552>
 80017da:	4b96      	ldr	r3, [pc, #600]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017e0:	4a94      	ldr	r2, [pc, #592]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017ea:	4b92      	ldr	r3, [pc, #584]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017f0:	4a90      	ldr	r2, [pc, #576]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017fa:	4b8e      	ldr	r3, [pc, #568]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80017fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001800:	4a8c      	ldr	r2, [pc, #560]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001806:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d016      	beq.n	8001840 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001812:	f7ff fa43 	bl	8000c9c <HAL_GetTick>
 8001816:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fa3f 	bl	8000c9c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e175      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001830:	4b80      	ldr	r3, [pc, #512]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0ed      	beq.n	800181a <HAL_RCC_OscConfig+0x562>
 800183e:	e015      	b.n	800186c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001840:	f7ff fa2c 	bl	8000c9c <HAL_GetTick>
 8001844:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001846:	e00a      	b.n	800185e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001848:	f7ff fa28 	bl	8000c9c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e15e      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800185e:	4b75      	ldr	r3, [pc, #468]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ed      	bne.n	8001848 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	2b00      	cmp	r3, #0
 8001876:	d036      	beq.n	80018e6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	2b00      	cmp	r3, #0
 800187e:	d019      	beq.n	80018b4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001880:	4b6c      	ldr	r3, [pc, #432]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a6b      	ldr	r2, [pc, #428]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001886:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800188a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff fa06 	bl	8000c9c <HAL_GetTick>
 8001890:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001894:	f7ff fa02 	bl	8000c9c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e13a      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80018a6:	4b63      	ldr	r3, [pc, #396]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x5dc>
 80018b2:	e018      	b.n	80018e6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a5e      	ldr	r2, [pc, #376]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80018ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff f9ec 	bl	8000c9c <HAL_GetTick>
 80018c4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80018c8:	f7ff f9e8 	bl	8000c9c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e120      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80018da:	4b56      	ldr	r3, [pc, #344]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8115 	beq.w	8001b1a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b18      	cmp	r3, #24
 80018f4:	f000 80af 	beq.w	8001a56 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	f040 8086 	bne.w	8001a0e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001902:	4b4c      	ldr	r3, [pc, #304]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a4b      	ldr	r2, [pc, #300]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001908:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff f9c5 	bl	8000c9c <HAL_GetTick>
 8001912:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001916:	f7ff f9c1 	bl	8000c9c <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0f9      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001928:	4b42      	ldr	r3, [pc, #264]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001934:	4b3f      	ldr	r3, [pc, #252]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800193c:	f023 0303 	bic.w	r3, r3, #3
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001948:	0212      	lsls	r2, r2, #8
 800194a:	430a      	orrs	r2, r1
 800194c:	4939      	ldr	r1, [pc, #228]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 800194e:	4313      	orrs	r3, r2
 8001950:	628b      	str	r3, [r1, #40]	@ 0x28
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001956:	3b01      	subs	r3, #1
 8001958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001960:	3b01      	subs	r3, #1
 8001962:	025b      	lsls	r3, r3, #9
 8001964:	b29b      	uxth	r3, r3
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196c:	3b01      	subs	r3, #1
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	3b01      	subs	r3, #1
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001982:	492c      	ldr	r1, [pc, #176]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001984:	4313      	orrs	r3, r2
 8001986:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	4a29      	ldr	r2, [pc, #164]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 800198e:	f023 0310 	bic.w	r3, r3, #16
 8001992:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001998:	4a26      	ldr	r2, [pc, #152]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800199e:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a2:	4a24      	ldr	r2, [pc, #144]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019a4:	f043 0310 	orr.w	r3, r3, #16
 80019a8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	f023 020c 	bic.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	491f      	ldr	r1, [pc, #124]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c0:	f023 0220 	bic.w	r2, r3, #32
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c8:	491a      	ldr	r1, [pc, #104]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a15      	ldr	r2, [pc, #84]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f959 	bl	8000c9c <HAL_GetTick>
 80019ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80019ee:	f7ff f955 	bl	8000c9c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e08d      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x736>
 8001a0c:	e085      	b.n	8001b1a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_RCC_OscConfig+0x77c>)
 8001a14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f93f 	bl	8000c9c <HAL_GetTick>
 8001a1e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f93b 	bl	8000c9c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d903      	bls.n	8001a38 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e073      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
 8001a34:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a38:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ee      	bne.n	8001a22 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001a44:	4b37      	ldr	r3, [pc, #220]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	4a36      	ldr	r2, [pc, #216]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001a4a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001a4e:	f023 0303 	bic.w	r3, r3, #3
 8001a52:	6293      	str	r3, [r2, #40]	@ 0x28
 8001a54:	e061      	b.n	8001b1a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001a56:	4b33      	ldr	r3, [pc, #204]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a5c:	4b31      	ldr	r3, [pc, #196]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a60:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d031      	beq.n	8001ace <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d12a      	bne.n	8001ace <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d122      	bne.n	8001ace <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a92:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d11a      	bne.n	8001ace <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	0a5b      	lsrs	r3, r3, #9
 8001a9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d111      	bne.n	8001ace <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d108      	bne.n	8001ace <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	0e1b      	lsrs	r3, r3, #24
 8001ac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e024      	b.n	8001b1c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d01a      	beq.n	8001b1a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001aea:	f023 0310 	bic.w	r3, r3, #16
 8001aee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff f8d4 	bl	8000c9c <HAL_GetTick>
 8001af4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001af6:	bf00      	nop
 8001af8:	f7ff f8d0 	bl	8000c9c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d0f9      	beq.n	8001af8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b08:	4a06      	ldr	r2, [pc, #24]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b12:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <HAL_RCC_OscConfig+0x86c>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	44020c00 	.word	0x44020c00

08001b28 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e19e      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b83      	ldr	r3, [pc, #524]	@ (8001d4c <HAL_RCC_ClockConfig+0x224>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d910      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b80      	ldr	r3, [pc, #512]	@ (8001d4c <HAL_RCC_ClockConfig+0x224>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 020f 	bic.w	r2, r3, #15
 8001b52:	497e      	ldr	r1, [pc, #504]	@ (8001d4c <HAL_RCC_ClockConfig+0x224>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d4c <HAL_RCC_ClockConfig+0x224>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e186      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d012      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	4b74      	ldr	r3, [pc, #464]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d909      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001b8a:	4b71      	ldr	r3, [pc, #452]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	496d      	ldr	r1, [pc, #436]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	4b68      	ldr	r3, [pc, #416]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d909      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001bbc:	4b64      	ldr	r3, [pc, #400]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	4961      	ldr	r1, [pc, #388]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d908      	bls.n	8001bfe <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001bec:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4955      	ldr	r1, [pc, #340]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d010      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	4b50      	ldr	r3, [pc, #320]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d908      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	f023 020f 	bic.w	r2, r3, #15
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	494a      	ldr	r1, [pc, #296]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8093 	beq.w	8001d60 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001c42:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e113      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e107      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001c72:	4b37      	ldr	r3, [pc, #220]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0fb      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c82:	4b33      	ldr	r3, [pc, #204]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0f3      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001c92:	4b2f      	ldr	r3, [pc, #188]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	492c      	ldr	r1, [pc, #176]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca4:	f7fe fffa 	bl	8000c9c <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d112      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7fe fff2 	bl	8000c9c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0d7      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0318 	and.w	r3, r3, #24
 8001cd2:	2b18      	cmp	r3, #24
 8001cd4:	d1ee      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x18c>
 8001cd6:	e043      	b.n	8001d60 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d112      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce2:	f7fe ffdb 	bl	8000c9c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0c0      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f003 0318 	and.w	r3, r3, #24
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d1ee      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0x1ba>
 8001d04:	e02c      	b.n	8001d60 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d122      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7fe ffc4 	bl	8000c9c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0a9      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_RCC_ClockConfig+0x228>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 0318 	and.w	r3, r3, #24
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d1ee      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x1e8>
 8001d32:	e015      	b.n	8001d60 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7fe ffb2 	bl	8000c9c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d906      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e097      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
 8001d4a:	bf00      	nop
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d54:	4b4b      	ldr	r3, [pc, #300]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f003 0318 	and.w	r3, r3, #24
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e9      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d010      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b44      	ldr	r3, [pc, #272]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d208      	bcs.n	8001d8e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001d7c:	4b41      	ldr	r3, [pc, #260]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f023 020f 	bic.w	r2, r3, #15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	493e      	ldr	r1, [pc, #248]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e88 <HAL_RCC_ClockConfig+0x360>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d210      	bcs.n	8001dbe <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <HAL_RCC_ClockConfig+0x360>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 020f 	bic.w	r2, r3, #15
 8001da4:	4938      	ldr	r1, [pc, #224]	@ (8001e88 <HAL_RCC_ClockConfig+0x360>)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dac:	4b36      	ldr	r3, [pc, #216]	@ (8001e88 <HAL_RCC_ClockConfig+0x360>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e05d      	b.n	8001e7a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	4b2d      	ldr	r3, [pc, #180]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d208      	bcs.n	8001dec <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001dda:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4927      	ldr	r1, [pc, #156]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d012      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d209      	bcs.n	8001e1e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	491a      	ldr	r1, [pc, #104]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d209      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001e3c:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	490e      	ldr	r1, [pc, #56]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e50:	f000 f822 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <HAL_RCC_ClockConfig+0x35c>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	490b      	ldr	r1, [pc, #44]	@ (8001e8c <HAL_RCC_ClockConfig+0x364>)
 8001e60:	5ccb      	ldrb	r3, [r1, r3]
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <HAL_RCC_ClockConfig+0x368>)
 8001e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_RCC_ClockConfig+0x36c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fe8a 	bl	8000b88 <HAL_InitTick>
 8001e74:	4603      	mov	r3, r0
 8001e76:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001e78:	7afb      	ldrb	r3, [r7, #11]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	44020c00 	.word	0x44020c00
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	080030dc 	.word	0x080030dc
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	@ 0x24
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001e9e:	4b8c      	ldr	r3, [pc, #560]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 0318 	and.w	r3, r3, #24
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001eaa:	4b8a      	ldr	r3, [pc, #552]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e107      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb0:	4b87      	ldr	r3, [pc, #540]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f003 0318 	and.w	r3, r3, #24
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d112      	bne.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001ebc:	4b84      	ldr	r3, [pc, #528]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001ec8:	4b81      	ldr	r3, [pc, #516]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	08db      	lsrs	r3, r3, #3
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	4a81      	ldr	r2, [pc, #516]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x240>)
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e0f1      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001edc:	4b7e      	ldr	r3, [pc, #504]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x240>)
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	e0ee      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee2:	4b7b      	ldr	r3, [pc, #492]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0318 	and.w	r3, r3, #24
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eee:	4b7b      	ldr	r3, [pc, #492]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x244>)
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e0e5      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef4:	4b76      	ldr	r3, [pc, #472]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f003 0318 	and.w	r3, r3, #24
 8001efc:	2b18      	cmp	r3, #24
 8001efe:	f040 80dd 	bne.w	80020bc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001f02:	4b73      	ldr	r3, [pc, #460]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001f0c:	4b70      	ldr	r3, [pc, #448]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f16:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001f18:	4b6d      	ldr	r3, [pc, #436]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001f24:	4b6a      	ldr	r3, [pc, #424]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f3c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80b7 	beq.w	80020b6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0xbe>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d056      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x16a>
 8001f54:	e077      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001f56:	4b5e      	ldr	r3, [pc, #376]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d02d      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001f62:	4b5b      	ldr	r3, [pc, #364]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	08db      	lsrs	r3, r3, #3
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	4a5a      	ldr	r2, [pc, #360]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8c:	4b50      	ldr	r3, [pc, #320]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fa0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80020e0 <HAL_RCC_GetSysClockFreq+0x248>
 8001fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001fbc:	e065      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80020e4 <HAL_RCC_GetSysClockFreq+0x24c>
 8001fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fe0:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fe4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80020e0 <HAL_RCC_GetSysClockFreq+0x248>
 8001fe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002000:	e043      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80020e8 <HAL_RCC_GetSysClockFreq+0x250>
 8002010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002014:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002024:	ed97 6a02 	vldr	s12, [r7, #8]
 8002028:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80020e0 <HAL_RCC_GetSysClockFreq+0x248>
 800202c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002030:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002038:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800203c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002040:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002044:	e021      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002050:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80020ec <HAL_RCC_GetSysClockFreq+0x254>
 8002054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002058:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 800205a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002068:	ed97 6a02 	vldr	s12, [r7, #8]
 800206c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80020e0 <HAL_RCC_GetSysClockFreq+0x248>
 8002070:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002074:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002078:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800207c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002084:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002088:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800208a:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x238>)
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208e:	0a5b      	lsrs	r3, r3, #9
 8002090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002094:	3301      	adds	r3, #1
 8002096:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a2:	edd7 6a06 	vldr	s13, [r7, #24]
 80020a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ae:	ee17 3a90 	vmov	r3, s15
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	e004      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e001      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x240>)
 80020be:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80020c0:	69fb      	ldr	r3, [r7, #28]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	@ 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	44020c00 	.word	0x44020c00
 80020d4:	003d0900 	.word	0x003d0900
 80020d8:	03d09000 	.word	0x03d09000
 80020dc:	017d7840 	.word	0x017d7840
 80020e0:	46000000 	.word	0x46000000
 80020e4:	4c742400 	.word	0x4c742400
 80020e8:	4bbebc20 	.word	0x4bbebc20
 80020ec:	4a742400 	.word	0x4a742400

080020f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80020f4:	f7ff fed0 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b08      	ldr	r3, [pc, #32]	@ (800211c <HAL_RCC_GetHCLKFreq+0x2c>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80020fe:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002102:	4907      	ldr	r1, [pc, #28]	@ (8002120 <HAL_RCC_GetHCLKFreq+0x30>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002106:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <HAL_RCC_GetHCLKFreq+0x34>)
 8002110:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002112:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <HAL_RCC_GetHCLKFreq+0x34>)
 8002114:	681b      	ldr	r3, [r3, #0]
}
 8002116:	4618      	mov	r0, r3
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	44020c00 	.word	0x44020c00
 8002120:	080030dc 	.word	0x080030dc
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e049      	b.n	80021ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe fb8e 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f000 fb96 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e049      	b.n	800227c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f841 	bl	8002284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f000 fb3f 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_TIM_PWM_Start+0x24>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	bf14      	ite	ne
 80022b4:	2301      	movne	r3, #1
 80022b6:	2300      	moveq	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	e03c      	b.n	8002336 <HAL_TIM_PWM_Start+0x9e>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d109      	bne.n	80022d6 <HAL_TIM_PWM_Start+0x3e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	e02f      	b.n	8002336 <HAL_TIM_PWM_Start+0x9e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d109      	bne.n	80022f0 <HAL_TIM_PWM_Start+0x58>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e022      	b.n	8002336 <HAL_TIM_PWM_Start+0x9e>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d109      	bne.n	800230a <HAL_TIM_PWM_Start+0x72>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e015      	b.n	8002336 <HAL_TIM_PWM_Start+0x9e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b10      	cmp	r3, #16
 800230e:	d109      	bne.n	8002324 <HAL_TIM_PWM_Start+0x8c>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e008      	b.n	8002336 <HAL_TIM_PWM_Start+0x9e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	bf14      	ite	ne
 8002330:	2301      	movne	r3, #1
 8002332:	2300      	moveq	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06f      	b.n	800241e <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d104      	bne.n	800234e <HAL_TIM_PWM_Start+0xb6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800234c:	e023      	b.n	8002396 <HAL_TIM_PWM_Start+0xfe>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d104      	bne.n	800235e <HAL_TIM_PWM_Start+0xc6>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800235c:	e01b      	b.n	8002396 <HAL_TIM_PWM_Start+0xfe>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b08      	cmp	r3, #8
 8002362:	d104      	bne.n	800236e <HAL_TIM_PWM_Start+0xd6>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800236c:	e013      	b.n	8002396 <HAL_TIM_PWM_Start+0xfe>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	d104      	bne.n	800237e <HAL_TIM_PWM_Start+0xe6>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800237c:	e00b      	b.n	8002396 <HAL_TIM_PWM_Start+0xfe>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b10      	cmp	r3, #16
 8002382:	d104      	bne.n	800238e <HAL_TIM_PWM_Start+0xf6>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800238c:	e003      	b.n	8002396 <HAL_TIM_PWM_Start+0xfe>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	6839      	ldr	r1, [r7, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fdc6 	bl	8002f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002428 <HAL_TIM_PWM_Start+0x190>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d107      	bne.n	80023be <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a19      	ldr	r2, [pc, #100]	@ (8002428 <HAL_TIM_PWM_Start+0x190>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_TIM_PWM_Start+0x144>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d0:	d004      	beq.n	80023dc <HAL_TIM_PWM_Start+0x144>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a15      	ldr	r2, [pc, #84]	@ (800242c <HAL_TIM_PWM_Start+0x194>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d115      	bne.n	8002408 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_TIM_PWM_Start+0x198>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d015      	beq.n	800241a <HAL_TIM_PWM_Start+0x182>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f4:	d011      	beq.n	800241a <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002406:	e008      	b.n	800241a <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e000      	b.n	800241c <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40012c00 	.word	0x40012c00
 800242c:	40000400 	.word	0x40000400
 8002430:	00010007 	.word	0x00010007

08002434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800244e:	2302      	movs	r3, #2
 8002450:	e0ff      	b.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b14      	cmp	r3, #20
 800245e:	f200 80f0 	bhi.w	8002642 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002462:	a201      	add	r2, pc, #4	@ (adr r2, 8002468 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002468:	080024bd 	.word	0x080024bd
 800246c:	08002643 	.word	0x08002643
 8002470:	08002643 	.word	0x08002643
 8002474:	08002643 	.word	0x08002643
 8002478:	080024fd 	.word	0x080024fd
 800247c:	08002643 	.word	0x08002643
 8002480:	08002643 	.word	0x08002643
 8002484:	08002643 	.word	0x08002643
 8002488:	0800253f 	.word	0x0800253f
 800248c:	08002643 	.word	0x08002643
 8002490:	08002643 	.word	0x08002643
 8002494:	08002643 	.word	0x08002643
 8002498:	0800257f 	.word	0x0800257f
 800249c:	08002643 	.word	0x08002643
 80024a0:	08002643 	.word	0x08002643
 80024a4:	08002643 	.word	0x08002643
 80024a8:	080025c1 	.word	0x080025c1
 80024ac:	08002643 	.word	0x08002643
 80024b0:	08002643 	.word	0x08002643
 80024b4:	08002643 	.word	0x08002643
 80024b8:	08002601 	.word	0x08002601
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fa4e 	bl	8002964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0208 	orr.w	r2, r2, #8
 80024d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0204 	bic.w	r2, r2, #4
 80024e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6999      	ldr	r1, [r3, #24]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	619a      	str	r2, [r3, #24]
      break;
 80024fa:	e0a5      	b.n	8002648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fa96 	bl	8002a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6999      	ldr	r1, [r3, #24]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	021a      	lsls	r2, r3, #8
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	619a      	str	r2, [r3, #24]
      break;
 800253c:	e084      	b.n	8002648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fae3 	bl	8002b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0208 	orr.w	r2, r2, #8
 8002558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0204 	bic.w	r2, r2, #4
 8002568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69d9      	ldr	r1, [r3, #28]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	61da      	str	r2, [r3, #28]
      break;
 800257c:	e064      	b.n	8002648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fb2f 	bl	8002be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69d9      	ldr	r1, [r3, #28]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	021a      	lsls	r2, r3, #8
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	61da      	str	r2, [r3, #28]
      break;
 80025be:	e043      	b.n	8002648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fb7c 	bl	8002cc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80025fe:	e023      	b.n	8002648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fba8 	bl	8002d5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800261a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002640:	e002      	b.n	8002648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
      break;
 8002646:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002650:	7dfb      	ldrb	r3, [r7, #23]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop

0800265c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_TIM_ConfigClockSource+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e0fe      	b.n	8002876 <HAL_TIM_ConfigClockSource+0x21a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002696:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800269a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026b4:	f000 80c9 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 80026b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026bc:	f200 80ce 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 80026c0:	4a6f      	ldr	r2, [pc, #444]	@ (8002880 <HAL_TIM_ConfigClockSource+0x224>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	f000 80c1 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 80026c8:	4a6d      	ldr	r2, [pc, #436]	@ (8002880 <HAL_TIM_ConfigClockSource+0x224>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	f200 80c6 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 80026d0:	4a6c      	ldr	r2, [pc, #432]	@ (8002884 <HAL_TIM_ConfigClockSource+0x228>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	f000 80b9 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 80026d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002884 <HAL_TIM_ConfigClockSource+0x228>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	f200 80be 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 80026e0:	4a69      	ldr	r2, [pc, #420]	@ (8002888 <HAL_TIM_ConfigClockSource+0x22c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	f000 80b1 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 80026e8:	4a67      	ldr	r2, [pc, #412]	@ (8002888 <HAL_TIM_ConfigClockSource+0x22c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	f200 80b6 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 80026f0:	4a66      	ldr	r2, [pc, #408]	@ (800288c <HAL_TIM_ConfigClockSource+0x230>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	f000 80a9 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 80026f8:	4a64      	ldr	r2, [pc, #400]	@ (800288c <HAL_TIM_ConfigClockSource+0x230>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	f200 80ae 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 8002700:	4a63      	ldr	r2, [pc, #396]	@ (8002890 <HAL_TIM_ConfigClockSource+0x234>)
 8002702:	4293      	cmp	r3, r2
 8002704:	f000 80a1 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 8002708:	4a61      	ldr	r2, [pc, #388]	@ (8002890 <HAL_TIM_ConfigClockSource+0x234>)
 800270a:	4293      	cmp	r3, r2
 800270c:	f200 80a6 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 8002710:	4a60      	ldr	r2, [pc, #384]	@ (8002894 <HAL_TIM_ConfigClockSource+0x238>)
 8002712:	4293      	cmp	r3, r2
 8002714:	f000 8099 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 8002718:	4a5e      	ldr	r2, [pc, #376]	@ (8002894 <HAL_TIM_ConfigClockSource+0x238>)
 800271a:	4293      	cmp	r3, r2
 800271c:	f200 809e 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 8002720:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002724:	f000 8091 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 8002728:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800272c:	f200 8096 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 8002730:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002734:	f000 8089 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 8002738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800273c:	f200 808e 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 8002740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002744:	d03e      	beq.n	80027c4 <HAL_TIM_ConfigClockSource+0x168>
 8002746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800274a:	f200 8087 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x200>
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002752:	f000 8086 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x206>
 8002756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275a:	d87f      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x200>
 800275c:	2b70      	cmp	r3, #112	@ 0x70
 800275e:	d01a      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x13a>
 8002760:	2b70      	cmp	r3, #112	@ 0x70
 8002762:	d87b      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x200>
 8002764:	2b60      	cmp	r3, #96	@ 0x60
 8002766:	d050      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x1ae>
 8002768:	2b60      	cmp	r3, #96	@ 0x60
 800276a:	d877      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x200>
 800276c:	2b50      	cmp	r3, #80	@ 0x50
 800276e:	d03c      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0x18e>
 8002770:	2b50      	cmp	r3, #80	@ 0x50
 8002772:	d873      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x200>
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	d058      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x1ce>
 8002778:	2b40      	cmp	r3, #64	@ 0x40
 800277a:	d86f      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x200>
 800277c:	2b30      	cmp	r3, #48	@ 0x30
 800277e:	d064      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 8002780:	2b30      	cmp	r3, #48	@ 0x30
 8002782:	d86b      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x200>
 8002784:	2b20      	cmp	r3, #32
 8002786:	d060      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 8002788:	2b20      	cmp	r3, #32
 800278a:	d867      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x200>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d05c      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 8002790:	2b10      	cmp	r3, #16
 8002792:	d05a      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x1ee>
 8002794:	e062      	b.n	800285c <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027a6:	f000 fba3 	bl	8002ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	609a      	str	r2, [r3, #8]
      break;
 80027c2:	e04f      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027d4:	f000 fb8c 	bl	8002ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027e6:	609a      	str	r2, [r3, #8]
      break;
 80027e8:	e03c      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f6:	461a      	mov	r2, r3
 80027f8:	f000 fafe 	bl	8002df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2150      	movs	r1, #80	@ 0x50
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fb57 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002808:	e02c      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002816:	461a      	mov	r2, r3
 8002818:	f000 fb1d 	bl	8002e56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2160      	movs	r1, #96	@ 0x60
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fb47 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002828:	e01c      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002836:	461a      	mov	r2, r3
 8002838:	f000 fade 	bl	8002df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2140      	movs	r1, #64	@ 0x40
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fb37 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002848:	e00c      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f000 fb2e 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 800285a:	e003      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      break;
 8002860:	e000      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8002862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	00100070 	.word	0x00100070
 8002884:	00100060 	.word	0x00100060
 8002888:	00100050 	.word	0x00100050
 800288c:	00100040 	.word	0x00100040
 8002890:	00100030 	.word	0x00100030
 8002894:	00100020 	.word	0x00100020

08002898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a2c      	ldr	r2, [pc, #176]	@ (800295c <TIM_Base_SetConfig+0xc4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d007      	beq.n	80028c0 <TIM_Base_SetConfig+0x28>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b6:	d003      	beq.n	80028c0 <TIM_Base_SetConfig+0x28>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a29      	ldr	r2, [pc, #164]	@ (8002960 <TIM_Base_SetConfig+0xc8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d108      	bne.n	80028d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a21      	ldr	r2, [pc, #132]	@ (800295c <TIM_Base_SetConfig+0xc4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d007      	beq.n	80028ea <TIM_Base_SetConfig+0x52>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e0:	d003      	beq.n	80028ea <TIM_Base_SetConfig+0x52>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002960 <TIM_Base_SetConfig+0xc8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d108      	bne.n	80028fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a0e      	ldr	r2, [pc, #56]	@ (800295c <TIM_Base_SetConfig+0xc4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d103      	bne.n	8002930 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d105      	bne.n	800294e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f023 0201 	bic.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	611a      	str	r2, [r3, #16]
  }
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400

08002964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f023 0201 	bic.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f023 0302 	bic.w	r3, r3, #2
 80029b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a1c      	ldr	r2, [pc, #112]	@ (8002a30 <TIM_OC1_SetConfig+0xcc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10c      	bne.n	80029de <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0308 	bic.w	r3, r3, #8
 80029ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a13      	ldr	r2, [pc, #76]	@ (8002a30 <TIM_OC1_SetConfig+0xcc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	621a      	str	r2, [r3, #32]
}
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00

08002a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 0210 	bic.w	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f023 0320 	bic.w	r3, r3, #32
 8002a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a1e      	ldr	r2, [pc, #120]	@ (8002b0c <TIM_OC2_SetConfig+0xd8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d10d      	bne.n	8002ab4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a15      	ldr	r2, [pc, #84]	@ (8002b0c <TIM_OC2_SetConfig+0xd8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d113      	bne.n	8002ae4 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	621a      	str	r2, [r3, #32]
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002be4 <TIM_OC3_SetConfig+0xd4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d10d      	bne.n	8002b8e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <TIM_OC3_SetConfig+0xd4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d113      	bne.n	8002bbe <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	621a      	str	r2, [r3, #32]
}
 8002bd8:	bf00      	nop
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40012c00 	.word	0x40012c00

08002be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	031b      	lsls	r3, r3, #12
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc0 <TIM_OC4_SetConfig+0xd8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10d      	bne.n	8002c68 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	031b      	lsls	r3, r3, #12
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a15      	ldr	r2, [pc, #84]	@ (8002cc0 <TIM_OC4_SetConfig+0xd8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d113      	bne.n	8002c98 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	019b      	lsls	r3, r3, #6
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40012c00 	.word	0x40012c00

08002cc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002d08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a0f      	ldr	r2, [pc, #60]	@ (8002d58 <TIM_OC5_SetConfig+0x94>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d109      	bne.n	8002d32 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	621a      	str	r2, [r3, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40012c00 	.word	0x40012c00

08002d5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	051b      	lsls	r3, r3, #20
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a10      	ldr	r2, [pc, #64]	@ (8002df4 <TIM_OC6_SetConfig+0x98>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d109      	bne.n	8002dcc <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40012c00 	.word	0x40012c00

08002df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f023 0201 	bic.w	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f023 030a 	bic.w	r3, r3, #10
 8002e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 0210 	bic.w	r2, r3, #16
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	031b      	lsls	r3, r3, #12
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f043 0307 	orr.w	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	021a      	lsls	r2, r3, #8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	609a      	str	r2, [r3, #8]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2201      	movs	r2, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1a      	ldr	r2, [r3, #32]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e051      	b.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a22      	ldr	r2, [pc, #136]	@ (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d108      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002fc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a14      	ldr	r2, [pc, #80]	@ (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003000:	d004      	beq.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a10      	ldr	r2, [pc, #64]	@ (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10c      	bne.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003012:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	4313      	orrs	r3, r2
 800301c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40000400 	.word	0x40000400

0800304c <memset>:
 800304c:	4402      	add	r2, r0
 800304e:	4603      	mov	r3, r0
 8003050:	4293      	cmp	r3, r2
 8003052:	d100      	bne.n	8003056 <memset+0xa>
 8003054:	4770      	bx	lr
 8003056:	f803 1b01 	strb.w	r1, [r3], #1
 800305a:	e7f9      	b.n	8003050 <memset+0x4>

0800305c <__libc_init_array>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4d0d      	ldr	r5, [pc, #52]	@ (8003094 <__libc_init_array+0x38>)
 8003060:	2600      	movs	r6, #0
 8003062:	4c0d      	ldr	r4, [pc, #52]	@ (8003098 <__libc_init_array+0x3c>)
 8003064:	1b64      	subs	r4, r4, r5
 8003066:	10a4      	asrs	r4, r4, #2
 8003068:	42a6      	cmp	r6, r4
 800306a:	d109      	bne.n	8003080 <__libc_init_array+0x24>
 800306c:	4d0b      	ldr	r5, [pc, #44]	@ (800309c <__libc_init_array+0x40>)
 800306e:	2600      	movs	r6, #0
 8003070:	4c0b      	ldr	r4, [pc, #44]	@ (80030a0 <__libc_init_array+0x44>)
 8003072:	f000 f817 	bl	80030a4 <_init>
 8003076:	1b64      	subs	r4, r4, r5
 8003078:	10a4      	asrs	r4, r4, #2
 800307a:	42a6      	cmp	r6, r4
 800307c:	d105      	bne.n	800308a <__libc_init_array+0x2e>
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	f855 3b04 	ldr.w	r3, [r5], #4
 8003084:	3601      	adds	r6, #1
 8003086:	4798      	blx	r3
 8003088:	e7ee      	b.n	8003068 <__libc_init_array+0xc>
 800308a:	f855 3b04 	ldr.w	r3, [r5], #4
 800308e:	3601      	adds	r6, #1
 8003090:	4798      	blx	r3
 8003092:	e7f2      	b.n	800307a <__libc_init_array+0x1e>
 8003094:	080030ec 	.word	0x080030ec
 8003098:	080030ec 	.word	0x080030ec
 800309c:	080030ec 	.word	0x080030ec
 80030a0:	080030f0 	.word	0x080030f0

080030a4 <_init>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr

080030b0 <_fini>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr
