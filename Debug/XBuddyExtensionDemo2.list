
XBuddyExtensionDemo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ec  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08005944  08005944  00006944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005978  08005978  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005978  08005978  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005978  08005978  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005978  08005978  00006978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800597c  0800597c  0000697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005980  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000005c  080059dc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080059dc  00007300  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011650  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f44  00000000  00000000  000186e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  0001a628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5d  00000000  00000000  0001b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fd0  00000000  00000000  0001c295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e6a  00000000  00000000  0003d265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9635  00000000  00000000  0004e0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  00127748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012c0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000005c 	.word	0x2000005c
 8000274:	00000000 	.word	0x00000000
 8000278:	0800592c 	.word	0x0800592c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000060 	.word	0x20000060
 8000294:	0800592c 	.word	0x0800592c

08000298 <__aeabi_drsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	e002      	b.n	80002a4 <__adddf3>
 800029e:	bf00      	nop

080002a0 <__aeabi_dsub>:
 80002a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a4 <__adddf3>:
 80002a4:	b530      	push	{r4, r5, lr}
 80002a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ae:	ea94 0f05 	teq	r4, r5
 80002b2:	bf08      	it	eq
 80002b4:	ea90 0f02 	teqeq	r0, r2
 80002b8:	bf1f      	itttt	ne
 80002ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ca:	f000 80e2 	beq.w	8000492 <__adddf3+0x1ee>
 80002ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d6:	bfb8      	it	lt
 80002d8:	426d      	neglt	r5, r5
 80002da:	dd0c      	ble.n	80002f6 <__adddf3+0x52>
 80002dc:	442c      	add	r4, r5
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	ea82 0000 	eor.w	r0, r2, r0
 80002ea:	ea83 0101 	eor.w	r1, r3, r1
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	2d36      	cmp	r5, #54	@ 0x36
 80002f8:	bf88      	it	hi
 80002fa:	bd30      	pophi	{r4, r5, pc}
 80002fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000300:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000304:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000308:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800030c:	d002      	beq.n	8000314 <__adddf3+0x70>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000318:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800031c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000320:	d002      	beq.n	8000328 <__adddf3+0x84>
 8000322:	4252      	negs	r2, r2
 8000324:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000328:	ea94 0f05 	teq	r4, r5
 800032c:	f000 80a7 	beq.w	800047e <__adddf3+0x1da>
 8000330:	f1a4 0401 	sub.w	r4, r4, #1
 8000334:	f1d5 0e20 	rsbs	lr, r5, #32
 8000338:	db0d      	blt.n	8000356 <__adddf3+0xb2>
 800033a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033e:	fa22 f205 	lsr.w	r2, r2, r5
 8000342:	1880      	adds	r0, r0, r2
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	fa03 f20e 	lsl.w	r2, r3, lr
 800034c:	1880      	adds	r0, r0, r2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	4159      	adcs	r1, r3
 8000354:	e00e      	b.n	8000374 <__adddf3+0xd0>
 8000356:	f1a5 0520 	sub.w	r5, r5, #32
 800035a:	f10e 0e20 	add.w	lr, lr, #32
 800035e:	2a01      	cmp	r2, #1
 8000360:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000364:	bf28      	it	cs
 8000366:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	18c0      	adds	r0, r0, r3
 8000370:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000374:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000378:	d507      	bpl.n	800038a <__adddf3+0xe6>
 800037a:	f04f 0e00 	mov.w	lr, #0
 800037e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000382:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000386:	eb6e 0101 	sbc.w	r1, lr, r1
 800038a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038e:	d31b      	bcc.n	80003c8 <__adddf3+0x124>
 8000390:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000394:	d30c      	bcc.n	80003b0 <__adddf3+0x10c>
 8000396:	0849      	lsrs	r1, r1, #1
 8000398:	ea5f 0030 	movs.w	r0, r0, rrx
 800039c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a0:	f104 0401 	add.w	r4, r4, #1
 80003a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003ac:	f080 809a 	bcs.w	80004e4 <__adddf3+0x240>
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b4:	bf08      	it	eq
 80003b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ba:	f150 0000 	adcs.w	r0, r0, #0
 80003be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c2:	ea41 0105 	orr.w	r1, r1, r5
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003cc:	4140      	adcs	r0, r0
 80003ce:	eb41 0101 	adc.w	r1, r1, r1
 80003d2:	3c01      	subs	r4, #1
 80003d4:	bf28      	it	cs
 80003d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003da:	d2e9      	bcs.n	80003b0 <__adddf3+0x10c>
 80003dc:	f091 0f00 	teq	r1, #0
 80003e0:	bf04      	itt	eq
 80003e2:	4601      	moveq	r1, r0
 80003e4:	2000      	moveq	r0, #0
 80003e6:	fab1 f381 	clz	r3, r1
 80003ea:	bf08      	it	eq
 80003ec:	3320      	addeq	r3, #32
 80003ee:	f1a3 030b 	sub.w	r3, r3, #11
 80003f2:	f1b3 0220 	subs.w	r2, r3, #32
 80003f6:	da0c      	bge.n	8000412 <__adddf3+0x16e>
 80003f8:	320c      	adds	r2, #12
 80003fa:	dd08      	ble.n	800040e <__adddf3+0x16a>
 80003fc:	f102 0c14 	add.w	ip, r2, #20
 8000400:	f1c2 020c 	rsb	r2, r2, #12
 8000404:	fa01 f00c 	lsl.w	r0, r1, ip
 8000408:	fa21 f102 	lsr.w	r1, r1, r2
 800040c:	e00c      	b.n	8000428 <__adddf3+0x184>
 800040e:	f102 0214 	add.w	r2, r2, #20
 8000412:	bfd8      	it	le
 8000414:	f1c2 0c20 	rsble	ip, r2, #32
 8000418:	fa01 f102 	lsl.w	r1, r1, r2
 800041c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000420:	bfdc      	itt	le
 8000422:	ea41 010c 	orrle.w	r1, r1, ip
 8000426:	4090      	lslle	r0, r2
 8000428:	1ae4      	subs	r4, r4, r3
 800042a:	bfa2      	ittt	ge
 800042c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000430:	4329      	orrge	r1, r5
 8000432:	bd30      	popge	{r4, r5, pc}
 8000434:	ea6f 0404 	mvn.w	r4, r4
 8000438:	3c1f      	subs	r4, #31
 800043a:	da1c      	bge.n	8000476 <__adddf3+0x1d2>
 800043c:	340c      	adds	r4, #12
 800043e:	dc0e      	bgt.n	800045e <__adddf3+0x1ba>
 8000440:	f104 0414 	add.w	r4, r4, #20
 8000444:	f1c4 0220 	rsb	r2, r4, #32
 8000448:	fa20 f004 	lsr.w	r0, r0, r4
 800044c:	fa01 f302 	lsl.w	r3, r1, r2
 8000450:	ea40 0003 	orr.w	r0, r0, r3
 8000454:	fa21 f304 	lsr.w	r3, r1, r4
 8000458:	ea45 0103 	orr.w	r1, r5, r3
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f1c4 040c 	rsb	r4, r4, #12
 8000462:	f1c4 0220 	rsb	r2, r4, #32
 8000466:	fa20 f002 	lsr.w	r0, r0, r2
 800046a:	fa01 f304 	lsl.w	r3, r1, r4
 800046e:	ea40 0003 	orr.w	r0, r0, r3
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	fa21 f004 	lsr.w	r0, r1, r4
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f094 0f00 	teq	r4, #0
 8000482:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000486:	bf06      	itte	eq
 8000488:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800048c:	3401      	addeq	r4, #1
 800048e:	3d01      	subne	r5, #1
 8000490:	e74e      	b.n	8000330 <__adddf3+0x8c>
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf18      	it	ne
 8000498:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049c:	d029      	beq.n	80004f2 <__adddf3+0x24e>
 800049e:	ea94 0f05 	teq	r4, r5
 80004a2:	bf08      	it	eq
 80004a4:	ea90 0f02 	teqeq	r0, r2
 80004a8:	d005      	beq.n	80004b6 <__adddf3+0x212>
 80004aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ae:	bf04      	itt	eq
 80004b0:	4619      	moveq	r1, r3
 80004b2:	4610      	moveq	r0, r2
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea91 0f03 	teq	r1, r3
 80004ba:	bf1e      	ittt	ne
 80004bc:	2100      	movne	r1, #0
 80004be:	2000      	movne	r0, #0
 80004c0:	bd30      	popne	{r4, r5, pc}
 80004c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c6:	d105      	bne.n	80004d4 <__adddf3+0x230>
 80004c8:	0040      	lsls	r0, r0, #1
 80004ca:	4149      	adcs	r1, r1
 80004cc:	bf28      	it	cs
 80004ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d8:	bf3c      	itt	cc
 80004da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004de:	bd30      	popcc	{r4, r5, pc}
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf1a      	itte	ne
 80004f8:	4619      	movne	r1, r3
 80004fa:	4610      	movne	r0, r2
 80004fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000500:	bf1c      	itt	ne
 8000502:	460b      	movne	r3, r1
 8000504:	4602      	movne	r2, r0
 8000506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050a:	bf06      	itte	eq
 800050c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000510:	ea91 0f03 	teqeq	r1, r3
 8000514:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	bf00      	nop

0800051c <__aeabi_ui2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f04f 0500 	mov.w	r5, #0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e750      	b.n	80003dc <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_i2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000554:	bf48      	it	mi
 8000556:	4240      	negmi	r0, r0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e73e      	b.n	80003dc <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_f2d>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056e:	bf1f      	itttt	ne
 8000570:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000574:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000578:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800057c:	4770      	bxne	lr
 800057e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000582:	bf08      	it	eq
 8000584:	4770      	bxeq	lr
 8000586:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800058a:	bf04      	itt	eq
 800058c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a0:	e71c      	b.n	80003dc <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aed8 	beq.w	800038a <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6bd      	b.n	800038a <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b099      	sub	sp, #100	@ 0x64
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c16:	f000 fe83 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1a:	f000 f8d1 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 fb1d 	bl	800125c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000c22:	f000 f995 	bl	8000f50 <MX_ICACHE_Init>
  MX_TIM2_Init();
 8000c26:	f000 f9f3 	bl	8001010 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c2a:	f000 fa89 	bl	8001140 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000c2e:	f000 f927 	bl	8000e80 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c32:	f000 f999 	bl	8000f68 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c36:	2100      	movs	r1, #0
 8000c38:	4857      	ldr	r0, [pc, #348]	@ (8000d98 <main+0x188>)
 8000c3a:	f003 fd71 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4855      	ldr	r0, [pc, #340]	@ (8000d98 <main+0x188>)
 8000c42:	f003 fd6d 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c46:	2108      	movs	r1, #8
 8000c48:	4853      	ldr	r0, [pc, #332]	@ (8000d98 <main+0x188>)
 8000c4a:	f003 fd69 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000c4e:	210c      	movs	r1, #12
 8000c50:	4851      	ldr	r0, [pc, #324]	@ (8000d98 <main+0x188>)
 8000c52:	f003 fd65 	bl	8004720 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c56:	2100      	movs	r1, #0
 8000c58:	4850      	ldr	r0, [pc, #320]	@ (8000d9c <main+0x18c>)
 8000c5a:	f003 fd61 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c5e:	2104      	movs	r1, #4
 8000c60:	484e      	ldr	r0, [pc, #312]	@ (8000d9c <main+0x18c>)
 8000c62:	f003 fd5d 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c66:	2108      	movs	r1, #8
 8000c68:	484c      	ldr	r0, [pc, #304]	@ (8000d9c <main+0x18c>)
 8000c6a:	f003 fd59 	bl	8004720 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8000c6e:	484c      	ldr	r0, [pc, #304]	@ (8000da0 <main+0x190>)
 8000c70:	f003 fca8 	bl	80045c4 <HAL_TIM_Base_Start>

    /* Start ADC in interrupt mode */
  HAL_ADC_Start_IT(&hadc1);
 8000c74:	484b      	ldr	r0, [pc, #300]	@ (8000da4 <main+0x194>)
 8000c76:	f001 facd 	bl	8002214 <HAL_ADC_Start_IT>

  const float color_red[4] = 	{0,0,0,1};
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c8c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000c90:	653b      	str	r3, [r7, #80]	@ 0x50
  const float color_green[4] = 	{0,0,1,0};
 8000c92:	f04f 0300 	mov.w	r3, #0
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c9e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	643b      	str	r3, [r7, #64]	@ 0x40
  const float color_blue[4] = 	{0,1,0,0};
 8000caa:	f04f 0300 	mov.w	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cb0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  const float color_yellow[4] = {0,0,1,1};
 8000cc2:	4b39      	ldr	r3, [pc, #228]	@ (8000da8 <main+0x198>)
 8000cc4:	f107 0414 	add.w	r4, r7, #20
 8000cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const float color_white[4] = 	{0,1,1,1};
 8000cce:	4b37      	ldr	r3, [pc, #220]	@ (8000dac <main+0x19c>)
 8000cd0:	1d3c      	adds	r4, r7, #4
 8000cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const int blink_delay_ms = 2000;
 8000cd8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c

  const float led_power = 0.8;
 8000cde:	4b34      	ldr	r3, [pc, #208]	@ (8000db0 <main+0x1a0>)
 8000ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
  const float fan_power = 0.35;
 8000ce2:	4b34      	ldr	r3, [pc, #208]	@ (8000db4 <main+0x1a4>)
 8000ce4:	657b      	str	r3, [r7, #84]	@ 0x54
	  /*TIM2->CCR1 = 2000; //D_PWM_W
	  TIM2->CCR2 = 2000; //D_PWM_B
	  TIM2->CCR3 = 2000; //D_PWM_G
	  TIM2->CCR4 = 2000; //D_PWM_R*/

	  TIM3->CCR1 = (int)(65532*led_power); //D_PWM_STRIP - 80% PWM
 8000ce6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000cea:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000db8 <main+0x1a8>
 8000cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cf6:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <main+0x1ac>)
 8000cf8:	ee17 2a90 	vmov	r2, s15
 8000cfc:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR2 = 65532 - (int)(65532*fan_power); //D_FAN2_PWM - 55% PWM (value inverted)
 8000cfe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000d02:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000db8 <main+0x1a8>
 8000d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d0e:	ee17 3a90 	vmov	r3, s15
 8000d12:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000d16:	33fc      	adds	r3, #252	@ 0xfc
 8000d18:	4a28      	ldr	r2, [pc, #160]	@ (8000dbc <main+0x1ac>)
 8000d1a:	6393      	str	r3, [r2, #56]	@ 0x38
	  TIM3->CCR3 = 65532 - (int)(65532*fan_power); //D_FAN1_PWM - 55% PWM (value inverted)
 8000d1c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000d20:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000db8 <main+0x1a8>
 8000d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d2c:	ee17 3a90 	vmov	r3, s15
 8000d30:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000d34:	33fc      	adds	r3, #252	@ 0xfc
 8000d36:	4a21      	ldr	r2, [pc, #132]	@ (8000dbc <main+0x1ac>)
 8000d38:	63d3      	str	r3, [r2, #60]	@ 0x3c

	  while (1){
		  set_wbgr_strip_color(color_white);
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fb05 	bl	800134c <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fea9 	bl	8001a9c <HAL_Delay>
		  set_wbgr_strip_color(color_blue);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fafc 	bl	800134c <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000d54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fea0 	bl	8001a9c <HAL_Delay>
		  set_wbgr_strip_color(color_green);
 8000d5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 faf3 	bl	800134c <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fe97 	bl	8001a9c <HAL_Delay>
		  set_wbgr_strip_color(color_yellow);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 faea 	bl	800134c <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fe8e 	bl	8001a9c <HAL_Delay>
		  set_wbgr_strip_color(color_red);
 8000d80:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fae1 	bl	800134c <set_wbgr_strip_color>
		  HAL_Delay(blink_delay_ms);
 8000d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fe85 	bl	8001a9c <HAL_Delay>
		  set_wbgr_strip_color(color_white);
 8000d92:	bf00      	nop
 8000d94:	e7d1      	b.n	8000d3a <main+0x12a>
 8000d96:	bf00      	nop
 8000d98:	2000012c 	.word	0x2000012c
 8000d9c:	20000178 	.word	0x20000178
 8000da0:	200000e0 	.word	0x200000e0
 8000da4:	20000078 	.word	0x20000078
 8000da8:	08005944 	.word	0x08005944
 8000dac:	08005954 	.word	0x08005954
 8000db0:	3f4ccccd 	.word	0x3f4ccccd
 8000db4:	3eb33333 	.word	0x3eb33333
 8000db8:	477ffc00 	.word	0x477ffc00
 8000dbc:	40000400 	.word	0x40000400

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b09c      	sub	sp, #112	@ 0x70
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2250      	movs	r2, #80	@ 0x50
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f004 fb80 	bl	80054d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000de6:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <SystemClock_Config+0xb8>)
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <SystemClock_Config+0xb8>)
 8000dec:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000df0:	6113      	str	r3, [r2, #16]
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <SystemClock_Config+0xb8>)
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dfe:	bf00      	nop
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <SystemClock_Config+0xb8>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d1f9      	bne.n	8000e00 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000e14:	2308      	movs	r3, #8
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fc3d 	bl	80036a4 <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e30:	f000 fb96 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	231f      	movs	r3, #31
 8000e36:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	2101      	movs	r1, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 f85e 	bl	8003f14 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e5e:	f000 fb7f 	bl	8001560 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <SystemClock_Config+0xbc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <SystemClock_Config+0xbc>)
 8000e68:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	3770      	adds	r7, #112	@ 0x70
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	44020800 	.word	0x44020800
 8000e7c:	40022000 	.word	0x40022000

08000e80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2220      	movs	r2, #32
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fb21 	bl	80054d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000e94:	4a2c      	ldr	r2, [pc, #176]	@ (8000f48 <MX_ADC1_Init+0xc8>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000e9a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eac:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000ed4:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000edc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efe:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000f00:	f001 f83a 	bl	8001f78 <HAL_ADC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f0a:	f000 fb29 	bl	8001560 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <MX_ADC1_Init+0xcc>)
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f12:	2306      	movs	r3, #6
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f16:	2307      	movs	r3, #7
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1a:	237f      	movs	r3, #127	@ 0x7f
 8000f1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <MX_ADC1_Init+0xc4>)
 8000f2c:	f001 fbfc 	bl	8002728 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000f36:	f000 fb13 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000078 	.word	0x20000078
 8000f48:	42028000 	.word	0x42028000
 8000f4c:	4b840000 	.word	0x4b840000

08000f50 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f54:	f002 fb96 	bl	8003684 <HAL_ICACHE_Enable>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000f5e:	f000 faff 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000f88:	4a20      	ldr	r2, [pc, #128]	@ (800100c <MX_TIM1_Init+0xa4>)
 8000f8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000f9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb2:	4815      	ldr	r0, [pc, #84]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000fb4:	f003 faae 	bl	8004514 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fbe:	f000 facf 	bl	8001560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480e      	ldr	r0, [pc, #56]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000fd0:	f003 fd88 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fda:	f000 fac1 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <MX_TIM1_Init+0xa0>)
 8000ff0:	f004 fa08 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ffa:	f000 fab1 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000e0 	.word	0x200000e0
 800100c:	40012c00 	.word	0x40012c00

08001010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	@ 0x38
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001042:	4b3e      	ldr	r3, [pc, #248]	@ (800113c <MX_TIM2_Init+0x12c>)
 8001044:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001048:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800104a:	4b3c      	ldr	r3, [pc, #240]	@ (800113c <MX_TIM2_Init+0x12c>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b3a      	ldr	r3, [pc, #232]	@ (800113c <MX_TIM2_Init+0x12c>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001056:	4b39      	ldr	r3, [pc, #228]	@ (800113c <MX_TIM2_Init+0x12c>)
 8001058:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800105c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105e:	4b37      	ldr	r3, [pc, #220]	@ (800113c <MX_TIM2_Init+0x12c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001064:	4b35      	ldr	r3, [pc, #212]	@ (800113c <MX_TIM2_Init+0x12c>)
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800106a:	4834      	ldr	r0, [pc, #208]	@ (800113c <MX_TIM2_Init+0x12c>)
 800106c:	f003 fa52 	bl	8004514 <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001076:	f000 fa73 	bl	8001560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001080:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001084:	4619      	mov	r1, r3
 8001086:	482d      	ldr	r0, [pc, #180]	@ (800113c <MX_TIM2_Init+0x12c>)
 8001088:	f003 fd2c 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001092:	f000 fa65 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001096:	4829      	ldr	r0, [pc, #164]	@ (800113c <MX_TIM2_Init+0x12c>)
 8001098:	f003 fae0 	bl	800465c <HAL_TIM_PWM_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010a2:	f000 fa5d 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4821      	ldr	r0, [pc, #132]	@ (800113c <MX_TIM2_Init+0x12c>)
 80010b6:	f004 f9a5 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010c0:	f000 fa4e 	bl	8001560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c4:	2360      	movs	r3, #96	@ 0x60
 80010c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4818      	ldr	r0, [pc, #96]	@ (800113c <MX_TIM2_Init+0x12c>)
 80010dc:	f003 fbee 	bl	80048bc <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010e6:	f000 fa3b 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	2204      	movs	r2, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4812      	ldr	r0, [pc, #72]	@ (800113c <MX_TIM2_Init+0x12c>)
 80010f2:	f003 fbe3 	bl	80048bc <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80010fc:	f000 fa30 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	2208      	movs	r2, #8
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_TIM2_Init+0x12c>)
 8001108:	f003 fbd8 	bl	80048bc <HAL_TIM_PWM_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001112:	f000 fa25 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	220c      	movs	r2, #12
 800111a:	4619      	mov	r1, r3
 800111c:	4807      	ldr	r0, [pc, #28]	@ (800113c <MX_TIM2_Init+0x12c>)
 800111e:	f003 fbcd 	bl	80048bc <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8001128:	f000 fa1a 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800112c:	4803      	ldr	r0, [pc, #12]	@ (800113c <MX_TIM2_Init+0x12c>)
 800112e:	f000 fac1 	bl	80016b4 <HAL_TIM_MspPostInit>

}
 8001132:	bf00      	nop
 8001134:	3738      	adds	r7, #56	@ 0x38
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000012c 	.word	0x2000012c

08001140 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	@ 0x38
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001160:	463b      	mov	r3, r7
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	615a      	str	r2, [r3, #20]
 8001170:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001172:	4b38      	ldr	r3, [pc, #224]	@ (8001254 <MX_TIM3_Init+0x114>)
 8001174:	4a38      	ldr	r2, [pc, #224]	@ (8001258 <MX_TIM3_Init+0x118>)
 8001176:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001178:	4b36      	ldr	r3, [pc, #216]	@ (8001254 <MX_TIM3_Init+0x114>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b35      	ldr	r3, [pc, #212]	@ (8001254 <MX_TIM3_Init+0x114>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001184:	4b33      	ldr	r3, [pc, #204]	@ (8001254 <MX_TIM3_Init+0x114>)
 8001186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b31      	ldr	r3, [pc, #196]	@ (8001254 <MX_TIM3_Init+0x114>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001192:	4b30      	ldr	r3, [pc, #192]	@ (8001254 <MX_TIM3_Init+0x114>)
 8001194:	2280      	movs	r2, #128	@ 0x80
 8001196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001198:	482e      	ldr	r0, [pc, #184]	@ (8001254 <MX_TIM3_Init+0x114>)
 800119a:	f003 f9bb 	bl	8004514 <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011a4:	f000 f9dc 	bl	8001560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4827      	ldr	r0, [pc, #156]	@ (8001254 <MX_TIM3_Init+0x114>)
 80011b6:	f003 fc95 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011c0:	f000 f9ce 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011c4:	4823      	ldr	r0, [pc, #140]	@ (8001254 <MX_TIM3_Init+0x114>)
 80011c6:	f003 fa49 	bl	800465c <HAL_TIM_PWM_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011d0:	f000 f9c6 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	481c      	ldr	r0, [pc, #112]	@ (8001254 <MX_TIM3_Init+0x114>)
 80011e4:	f004 f90e 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011ee:	f000 f9b7 	bl	8001560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f2:	2360      	movs	r3, #96	@ 0x60
 80011f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	4812      	ldr	r0, [pc, #72]	@ (8001254 <MX_TIM3_Init+0x114>)
 800120a:	f003 fb57 	bl	80048bc <HAL_TIM_PWM_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001214:	f000 f9a4 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	2204      	movs	r2, #4
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	@ (8001254 <MX_TIM3_Init+0x114>)
 8001220:	f003 fb4c 	bl	80048bc <HAL_TIM_PWM_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800122a:	f000 f999 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	2208      	movs	r2, #8
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	@ (8001254 <MX_TIM3_Init+0x114>)
 8001236:	f003 fb41 	bl	80048bc <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001240:	f000 f98e 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <MX_TIM3_Init+0x114>)
 8001246:	f000 fa35 	bl	80016b4 <HAL_TIM_MspPostInit>

}
 800124a:	bf00      	nop
 800124c:	3738      	adds	r7, #56	@ 0x38
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000178 	.word	0x20000178
 8001258:	40000400 	.word	0x40000400

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <MX_GPIO_Init+0xe4>)
 8001274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001278:	4a31      	ldr	r2, [pc, #196]	@ (8001340 <MX_GPIO_Init+0xe4>)
 800127a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <MX_GPIO_Init+0xe4>)
 8001284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <MX_GPIO_Init+0xe4>)
 8001292:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001296:	4a2a      	ldr	r2, [pc, #168]	@ (8001340 <MX_GPIO_Init+0xe4>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a0:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <MX_GPIO_Init+0xe4>)
 80012a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <MX_GPIO_Init+0xe4>)
 80012b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b4:	4a22      	ldr	r2, [pc, #136]	@ (8001340 <MX_GPIO_Init+0xe4>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <MX_GPIO_Init+0xe4>)
 80012c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 80012d2:	481c      	ldr	r0, [pc, #112]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012d4:	f002 f9be 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012de:	481a      	ldr	r0, [pc, #104]	@ (8001348 <MX_GPIO_Init+0xec>)
 80012e0:	f002 f9b8 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e4:	2301      	movs	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	4619      	mov	r1, r3
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012f8:	f002 f85a 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 80012fc:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	480b      	ldr	r0, [pc, #44]	@ (8001344 <MX_GPIO_Init+0xe8>)
 8001316:	f002 f84b 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800131a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_GPIO_Init+0xec>)
 8001334:	f002 f83c 	bl	80033b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	44020c00 	.word	0x44020c00
 8001344:	42020400 	.word	0x42020400
 8001348:	42020000 	.word	0x42020000

0800134c <set_wbgr_strip_color>:

/* USER CODE BEGIN 4 */
void set_wbgr_strip_color(const float* color){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = (int)(65532 * color[0]); //D_PWM_W
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80013d8 <set_wbgr_strip_color+0x8c>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = (int)(65532 * color[1]); //D_PWM_B
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3304      	adds	r3, #4
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80013d8 <set_wbgr_strip_color+0x8c>
 800137c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001388:	ee17 2a90 	vmov	r2, s15
 800138c:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2->CCR3 = (int)(65532 * color[2]); //D_PWM_G
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3308      	adds	r3, #8
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80013d8 <set_wbgr_strip_color+0x8c>
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013a6:	ee17 2a90 	vmov	r2, s15
 80013aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = (int)(65532 * color[3]); //D_PWM_R
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	330c      	adds	r3, #12
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80013d8 <set_wbgr_strip_color+0x8c>
 80013b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c4:	ee17 2a90 	vmov	r2, s15
 80013c8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	477ffc00 	.word	0x477ffc00
 80013dc:	00000000 	.word	0x00000000

080013e0 <adc_to_temperature>:

// ADC reference seems to be little bit lower than 3V3 rail.
// This less than 2% tweak makes a huge difference in output precision.
#define ADC_SCALING_FACTOR 0.98238352828

float adc_to_temperature(uint16_t adc_value) {
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
	float adc_scaled = adc_value*ADC_SCALING_FACTOR;
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f8a5 	bl	800053c <__aeabi_i2d>
 80013f2:	a347      	add	r3, pc, #284	@ (adr r3, 8001510 <adc_to_temperature+0x130>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f90a 	bl	8000610 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fbb4 	bl	8000b70 <__aeabi_d2f>
 8001408:	4603      	mov	r3, r0
 800140a:	617b      	str	r3, [r7, #20]

	float r_therm = (R_FIXED * adc_scaled)/(ADC_MAX-adc_scaled);
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f7ff f8a7 	bl	8000560 <__aeabi_f2d>
 8001412:	a341      	add	r3, pc, #260	@ (adr r3, 8001518 <adc_to_temperature+0x138>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff f8fa 	bl	8000610 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4614      	mov	r4, r2
 8001422:	461d      	mov	r5, r3
 8001424:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001508 <adc_to_temperature+0x128>
 8001428:	edd7 7a05 	vldr	s15, [r7, #20]
 800142c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001430:	ee17 0a90 	vmov	r0, s15
 8001434:	f7ff f894 	bl	8000560 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7ff fa10 	bl	8000864 <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fb90 	bl	8000b70 <__aeabi_d2f>
 8001450:	4603      	mov	r3, r0
 8001452:	613b      	str	r3, [r7, #16]
	float temp_kelvin = 1.0 / ((1.0/T0)-(log(R0/r_therm)/BETA));
 8001454:	6938      	ldr	r0, [r7, #16]
 8001456:	f7ff f883 	bl	8000560 <__aeabi_f2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	a122      	add	r1, pc, #136	@ (adr r1, 80014e8 <adc_to_temperature+0x108>)
 8001460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001464:	f7ff f9fe 	bl	8000864 <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	ec43 2b17 	vmov	d7, r2, r3
 8001470:	eeb0 0a47 	vmov.f32	s0, s14
 8001474:	eef0 0a67 	vmov.f32	s1, s15
 8001478:	f004 f85e 	bl	8005538 <log>
 800147c:	ec51 0b10 	vmov	r0, r1, d0
 8001480:	a31b      	add	r3, pc, #108	@ (adr r3, 80014f0 <adc_to_temperature+0x110>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f9ed 	bl	8000864 <__aeabi_ddiv>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	a11a      	add	r1, pc, #104	@ (adr r1, 80014f8 <adc_to_temperature+0x118>)
 8001490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001494:	f7fe ff04 	bl	80002a0 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	f04f 0000 	mov.w	r0, #0
 80014a0:	491a      	ldr	r1, [pc, #104]	@ (800150c <adc_to_temperature+0x12c>)
 80014a2:	f7ff f9df 	bl	8000864 <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fb5f 	bl	8000b70 <__aeabi_d2f>
 80014b2:	4603      	mov	r3, r0
 80014b4:	60fb      	str	r3, [r7, #12]
	float temp_celsius = temp_kelvin - 273.15;
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff f852 	bl	8000560 <__aeabi_f2d>
 80014bc:	a310      	add	r3, pc, #64	@ (adr r3, 8001500 <adc_to_temperature+0x120>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7fe feed 	bl	80002a0 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb4f 	bl	8000b70 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	60bb      	str	r3, [r7, #8]

	return temp_celsius;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	ee07 3a90 	vmov	s15, r3
}
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40f86a00 	.word	0x40f86a00
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40aedc00 	.word	0x40aedc00
 80014f8:	dcb5db83 	.word	0xdcb5db83
 80014fc:	3f6b79e1 	.word	0x3f6b79e1
 8001500:	66666666 	.word	0x66666666
 8001504:	40711266 	.word	0x40711266
 8001508:	457ff000 	.word	0x457ff000
 800150c:	3ff00000 	.word	0x3ff00000
 8001510:	94c2ef22 	.word	0x94c2ef22
 8001514:	3fef6faf 	.word	0x3fef6faf
 8001518:	00000000 	.word	0x00000000
 800151c:	40b25c00 	.word	0x40b25c00

08001520 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0b      	ldr	r2, [pc, #44]	@ (800155c <HAL_ADC_ConvCpltCallback+0x3c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10f      	bne.n	8001552 <HAL_ADC_ConvCpltCallback+0x32>
  {
    // ADC conversion complete, get the value
    uint32_t raw_adc = HAL_ADC_GetValue(hadc);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 ff22 	bl	800237c <HAL_ADC_GetValue>
 8001538:	60f8      	str	r0, [r7, #12]
    uint32_t temperature = adc_to_temperature(raw_adc);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff4e 	bl	80013e0 <adc_to_temperature>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800154c:	ee17 3a90 	vmov	r3, s15
 8001550:	60bb      	str	r3, [r7, #8]
  }
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	42028000 	.word	0x42028000

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <Error_Handler+0x8>

0800156c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <HAL_ADC_MspInit+0x90>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d131      	bne.n	8001602 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <HAL_ADC_MspInit+0x94>)
 80015a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001610 <HAL_ADC_MspInit+0x94>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <HAL_ADC_MspInit+0x94>)
 80015b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_ADC_MspInit+0x94>)
 80015be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <HAL_ADC_MspInit+0x94>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <HAL_ADC_MspInit+0x94>)
 80015ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015da:	2310      	movs	r3, #16
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015de:	2303      	movs	r3, #3
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4809      	ldr	r0, [pc, #36]	@ (8001614 <HAL_ADC_MspInit+0x98>)
 80015ee:	f001 fedf 	bl	80033b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2025      	movs	r0, #37	@ 0x25
 80015f8:	f001 fe02 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80015fc:	2025      	movs	r0, #37	@ 0x25
 80015fe:	f001 fe19 	bl	8003234 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	@ 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	42028000 	.word	0x42028000
 8001610:	44020c00 	.word	0x44020c00
 8001614:	42020000 	.word	0x42020000

08001618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a20      	ldr	r2, [pc, #128]	@ (80016a8 <HAL_TIM_Base_MspInit+0x90>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d10f      	bne.n	800164a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_TIM_Base_MspInit+0x94>)
 800162c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001630:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <HAL_TIM_Base_MspInit+0x94>)
 8001632:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001636:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <HAL_TIM_Base_MspInit+0x94>)
 800163c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001648:	e028      	b.n	800169c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001652:	d10f      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001654:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_TIM_Base_MspInit+0x94>)
 8001656:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800165a:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <HAL_TIM_Base_MspInit+0x94>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_TIM_Base_MspInit+0x94>)
 8001666:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
}
 8001672:	e013      	b.n	800169c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <HAL_TIM_Base_MspInit+0x98>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10e      	bne.n	800169c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_TIM_Base_MspInit+0x94>)
 8001680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001684:	4a09      	ldr	r2, [pc, #36]	@ (80016ac <HAL_TIM_Base_MspInit+0x94>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <HAL_TIM_Base_MspInit+0x94>)
 8001690:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40012c00 	.word	0x40012c00
 80016ac:	44020c00 	.word	0x44020c00
 80016b0:	40000400 	.word	0x40000400

080016b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016d4:	d11f      	bne.n	8001716 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <HAL_TIM_MspPostInit+0xb4>)
 80016d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016dc:	4a22      	ldr	r2, [pc, #136]	@ (8001768 <HAL_TIM_MspPostInit+0xb4>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_TIM_MspPostInit+0xb4>)
 80016e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80016f4:	230f      	movs	r3, #15
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001704:	2301      	movs	r3, #1
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4817      	ldr	r0, [pc, #92]	@ (800176c <HAL_TIM_MspPostInit+0xb8>)
 8001710:	f001 fe4e 	bl	80033b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001714:	e024      	b.n	8001760 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <HAL_TIM_MspPostInit+0xbc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d11f      	bne.n	8001760 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <HAL_TIM_MspPostInit+0xb4>)
 8001722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001726:	4a10      	ldr	r2, [pc, #64]	@ (8001768 <HAL_TIM_MspPostInit+0xb4>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001730:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <HAL_TIM_MspPostInit+0xb4>)
 8001732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800173e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001750:	2302      	movs	r3, #2
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4804      	ldr	r0, [pc, #16]	@ (800176c <HAL_TIM_MspPostInit+0xb8>)
 800175c:	f001 fe28 	bl	80033b0 <HAL_GPIO_Init>
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	@ 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	44020c00 	.word	0x44020c00
 800176c:	42020000 	.word	0x42020000
 8001770:	40000400 	.word	0x40000400

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <NMI_Handler+0x4>

0800177c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <MemManage_Handler+0x4>

0800178c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <UsageFault_Handler+0x4>

0800179c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ca:	f000 f947 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <ADC1_IRQHandler+0x10>)
 80017da:	f000 fddc 	bl	8002396 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000078 	.word	0x20000078

080017e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017ee:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <SystemInit+0xc8>)
 80017f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f4:	4a2e      	ldr	r2, [pc, #184]	@ (80018b0 <SystemInit+0xc8>)
 80017f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80017fe:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <SystemInit+0xcc>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001804:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <SystemInit+0xcc>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800180a:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <SystemInit+0xcc>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001810:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <SystemInit+0xcc>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4927      	ldr	r1, [pc, #156]	@ (80018b4 <SystemInit+0xcc>)
 8001816:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <SystemInit+0xd0>)
 8001818:	4013      	ands	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <SystemInit+0xcc>)
 800181e:	2200      	movs	r2, #0
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001822:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <SystemInit+0xcc>)
 8001824:	2200      	movs	r2, #0
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <SystemInit+0xcc>)
 800182a:	4a24      	ldr	r2, [pc, #144]	@ (80018bc <SystemInit+0xd4>)
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800182e:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <SystemInit+0xcc>)
 8001830:	2200      	movs	r2, #0
 8001832:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <SystemInit+0xcc>)
 8001836:	4a21      	ldr	r2, [pc, #132]	@ (80018bc <SystemInit+0xd4>)
 8001838:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800183a:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <SystemInit+0xcc>)
 800183c:	2200      	movs	r2, #0
 800183e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001840:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <SystemInit+0xcc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <SystemInit+0xcc>)
 8001846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800184a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <SystemInit+0xcc>)
 800184e:	2200      	movs	r2, #0
 8001850:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <SystemInit+0xc8>)
 8001854:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001858:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800185a:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <SystemInit+0xd8>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001862:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800186a:	d003      	beq.n	8001874 <SystemInit+0x8c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001872:	d117      	bne.n	80018a4 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <SystemInit+0xd8>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <SystemInit+0xd8>)
 8001882:	4a10      	ldr	r2, [pc, #64]	@ (80018c4 <SystemInit+0xdc>)
 8001884:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <SystemInit+0xd8>)
 8001888:	4a0f      	ldr	r2, [pc, #60]	@ (80018c8 <SystemInit+0xe0>)
 800188a:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <SystemInit+0xd8>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <SystemInit+0xd8>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <SystemInit+0xd8>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	4a08      	ldr	r2, [pc, #32]	@ (80018c0 <SystemInit+0xd8>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	61d3      	str	r3, [r2, #28]
  }
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00
 80018b4:	44020c00 	.word	0x44020c00
 80018b8:	fae2eae3 	.word	0xfae2eae3
 80018bc:	01010280 	.word	0x01010280
 80018c0:	40022000 	.word	0x40022000
 80018c4:	08192a3b 	.word	0x08192a3b
 80018c8:	4c5d6e7f 	.word	0x4c5d6e7f

080018cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001904 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018d2:	e003      	b.n	80018dc <LoopCopyDataInit>

080018d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018da:	3104      	adds	r1, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018dc:	480b      	ldr	r0, [pc, #44]	@ (800190c <LoopForever+0xa>)
	ldr	r3, =_edata
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018e4:	d3f6      	bcc.n	80018d4 <CopyDataInit>
	ldr	r2, =_sbss
 80018e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001914 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018e8:	e002      	b.n	80018f0 <LoopFillZerobss>

080018ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018ec:	f842 3b04 	str.w	r3, [r2], #4

080018f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <LoopForever+0x16>)
	cmp	r2, r3
 80018f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018f4:	d3f9      	bcc.n	80018ea <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f6:	f7ff ff77 	bl	80017e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f003 fdf9 	bl	80054f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018fe:	f7ff f987 	bl	8000c10 <main>

08001902 <LoopForever>:

LoopForever:
    b LoopForever
 8001902:	e7fe      	b.n	8001902 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001904:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001908:	08005980 	.word	0x08005980
	ldr	r0, =_sdata
 800190c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001910:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001914:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001918:	20000300 	.word	0x20000300

0800191c <COMP1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800191c:	e7fe      	b.n	800191c <COMP1_IRQHandler>
	...

08001920 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f001 fc60 	bl	80031ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800192a:	f002 fcab 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 800192e:	4602      	mov	r2, r0
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <HAL_Init+0x44>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	490b      	ldr	r1, [pc, #44]	@ (8001968 <HAL_Init+0x48>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_Init+0x4c>)
 8001942:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001944:	2004      	movs	r0, #4
 8001946:	f001 fca5 	bl	8003294 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194a:	200f      	movs	r0, #15
 800194c:	f000 f810 	bl	8001970 <HAL_InitTick>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e002      	b.n	8001960 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800195a:	f7ff fe07 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	44020c00 	.word	0x44020c00
 8001968:	08005964 	.word	0x08005964
 800196c:	20000000 	.word	0x20000000

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800197c:	4b33      	ldr	r3, [pc, #204]	@ (8001a4c <HAL_InitTick+0xdc>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e05c      	b.n	8001a42 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_InitTick+0xe0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b04      	cmp	r3, #4
 8001992:	d10c      	bne.n	80019ae <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001994:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <HAL_InitTick+0xe4>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b2c      	ldr	r3, [pc, #176]	@ (8001a4c <HAL_InitTick+0xdc>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e037      	b.n	8001a1e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80019ae:	f001 fcc9 	bl	8003344 <HAL_SYSTICK_GetCLKSourceConfig>
 80019b2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d023      	beq.n	8001a02 <HAL_InitTick+0x92>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d82d      	bhi.n	8001a1c <HAL_InitTick+0xac>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_InitTick+0x5e>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d00d      	beq.n	80019e8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80019cc:	e026      	b.n	8001a1c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80019ce:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_InitTick+0xe4>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <HAL_InitTick+0xdc>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	4619      	mov	r1, r3
 80019d8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80019dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	60fb      	str	r3, [r7, #12]
        break;
 80019e6:	e01a      	b.n	8001a1e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_InitTick+0xdc>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80019f6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	60fb      	str	r3, [r7, #12]
        break;
 8001a00:	e00d      	b.n	8001a1e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_InitTick+0xdc>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	60fb      	str	r3, [r7, #12]
        break;
 8001a1a:	e000      	b.n	8001a1e <HAL_InitTick+0xae>
        break;
 8001a1c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f001 fc16 	bl	8003250 <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e009      	b.n	8001a42 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a36:	f001 fbe3 	bl	8003200 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001a3a:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <HAL_InitTick+0xe8>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	e000e010 	.word	0xe000e010
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	200001c4 	.word	0x200001c4

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200001c4 	.word	0x200001c4

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	609a      	str	r2, [r3, #8]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001b7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	42028000 	.word	0x42028000

08001b98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3360      	adds	r3, #96	@ 0x60
 8001baa:	461a      	mov	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <LL_ADC_SetOffset+0x44>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	03fff000 	.word	0x03fff000

08001be0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3360      	adds	r3, #96	@ 0x60
 8001bee:	461a      	mov	r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3360      	adds	r3, #96	@ 0x60
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3360      	adds	r3, #96	@ 0x60
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c6c:	bf00      	nop
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3360      	adds	r3, #96	@ 0x60
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ca2:	bf00      	nop
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	615a      	str	r2, [r3, #20]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3330      	adds	r3, #48	@ 0x30
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	4413      	add	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	211f      	movs	r1, #31
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	f003 011f 	and.w	r1, r3, #31
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	431a      	orrs	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3314      	adds	r3, #20
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0e5b      	lsrs	r3, r3, #25
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0d1b      	lsrs	r3, r3, #20
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	2107      	movs	r1, #7
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0d1b      	lsrs	r3, r3, #20
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0318 	and.w	r3, r3, #24
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df4:	40d9      	lsrs	r1, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	400b      	ands	r3, r1
 8001dfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	000fffff 	.word	0x000fffff

08001e18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6093      	str	r3, [r2, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <LL_ADC_IsEnabled+0x18>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <LL_ADC_IsEnabled+0x1a>
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f16:	f043 0204 	orr.w	r2, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d101      	bne.n	8001f68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e131      	b.n	80021f6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff faeb 	bl	800157c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff3f 	bl	8001e3c <LL_ADC_IsDeepPowerDownEnabled>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff25 	bl	8001e18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff5a 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff3e 	bl	8001e64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe8:	4b85      	ldr	r3, [pc, #532]	@ (8002200 <HAL_ADC_Init+0x288>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	4a85      	ldr	r2, [pc, #532]	@ (8002204 <HAL_ADC_Init+0x28c>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3b01      	subs	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff3c 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10d      	bne.n	8002036 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	f043 0210 	orr.w	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff75 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002040:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 80ca 	bne.w	80021e4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 80c6 	bne.w	80021e4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff35 	bl	8001edc <LL_ADC_IsEnabled>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002078:	4863      	ldr	r0, [pc, #396]	@ (8002208 <HAL_ADC_Init+0x290>)
 800207a:	f7ff ff2f 	bl	8001edc <LL_ADC_IsEnabled>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4619      	mov	r1, r3
 800208a:	4860      	ldr	r0, [pc, #384]	@ (800220c <HAL_ADC_Init+0x294>)
 800208c:	f7ff fd2a 	bl	8001ae4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e5b      	ldrb	r3, [r3, #25]
 8002094:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800209a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020a0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020a6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d106      	bne.n	80020cc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	3b01      	subs	r3, #1
 80020c4:	045b      	lsls	r3, r3, #17
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	4b48      	ldr	r3, [pc, #288]	@ (8002210 <HAL_ADC_Init+0x298>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff1a 	bl	8001f50 <LL_ADC_INJ_IsConversionOngoing>
 800211c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d13d      	bne.n	80021a0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d13a      	bne.n	80021a0 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7e1b      	ldrb	r3, [r3, #24]
 800212e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002136:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002146:	f023 0302 	bic.w	r3, r3, #2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	69b9      	ldr	r1, [r7, #24]
 8002150:	430b      	orrs	r3, r1
 8002152:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800215a:	2b01      	cmp	r3, #1
 800215c:	d118      	bne.n	8002190 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002174:	4311      	orrs	r1, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800217a:	4311      	orrs	r1, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002180:	430a      	orrs	r2, r1
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	e007      	b.n	80021a0 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10c      	bne.n	80021c2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f023 010f 	bic.w	r1, r3, #15
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	1e5a      	subs	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	631a      	str	r2, [r3, #48]	@ 0x30
 80021c0:	e007      	b.n	80021d2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 020f 	bic.w	r2, r2, #15
 80021d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	f023 0303 	bic.w	r3, r3, #3
 80021da:	f043 0201 	orr.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80021e2:	e007      	b.n	80021f4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	f043 0210 	orr.w	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000000 	.word	0x20000000
 8002204:	053e2d63 	.word	0x053e2d63
 8002208:	42028000 	.word	0x42028000
 800220c:	42028300 	.word	0x42028300
 8002210:	fff04007 	.word	0xfff04007

08002214 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe82 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	f040 80a0 	bne.w	800236e <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_ADC_Start_IT+0x28>
 8002238:	2302      	movs	r3, #2
 800223a:	e09b      	b.n	8002374 <HAL_ADC_Start_IT+0x160>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fe6f 	bl	8002f28 <ADC_Enable>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 8087 	bne.w	8002364 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	f023 0206 	bic.w	r2, r3, #6
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002282:	e002      	b.n	800228a <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	221c      	movs	r2, #28
 8002290:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 021c 	bic.w	r2, r2, #28
 80022a8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d108      	bne.n	80022c4 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0208 	orr.w	r2, r2, #8
 80022c0:	605a      	str	r2, [r3, #4]
          break;
 80022c2:	e008      	b.n	80022d6 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0204 	orr.w	r2, r2, #4
 80022d2:	605a      	str	r2, [r3, #4]
          break;
 80022d4:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d107      	bne.n	80022ee <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0210 	orr.w	r2, r2, #16
 80022ec:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02d      	beq.n	8002358 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002304:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d110      	bne.n	8002336 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0220 	bic.w	r2, r2, #32
 8002322:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002332:	605a      	str	r2, [r3, #4]
            break;
 8002334:	e010      	b.n	8002358 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002344:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	605a      	str	r2, [r3, #4]
            break;
 8002356:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fdd0 	bl	8001f02 <LL_ADC_REG_StartConversion>
 8002362:	e006      	b.n	8002372 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800236c:	e001      	b.n	8002372 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b088      	sub	sp, #32
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d017      	beq.n	80023ec <HAL_ADC_IRQHandler+0x56>
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d012      	beq.n	80023ec <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fe4c 	bl	800307c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2202      	movs	r2, #2
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_ADC_IRQHandler+0x6a>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002406:	2b00      	cmp	r3, #0
 8002408:	d05e      	beq.n	80024c8 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d059      	beq.n	80024c8 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fc4f 	bl	8001cd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d03e      	beq.n	80024ba <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d135      	bne.n	80024ba <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b08      	cmp	r3, #8
 800245a:	d12e      	bne.n	80024ba <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fd62 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d11a      	bne.n	80024a2 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 020c 	bic.w	r2, r2, #12
 800247a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d112      	bne.n	80024ba <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	659a      	str	r2, [r3, #88]	@ 0x58
 80024a0:	e00b      	b.n	80024ba <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a6:	f043 0210 	orr.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff f830 	bl	8001520 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	220c      	movs	r2, #12
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_ADC_IRQHandler+0x146>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d072      	beq.n	80025cc <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d06d      	beq.n	80025cc <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fc20 	bl	8001d52 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002512:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fbdb 	bl	8001cd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800251e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d047      	beq.n	80025be <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_ADC_IRQHandler+0x1b2>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d03f      	beq.n	80025be <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d13a      	bne.n	80025be <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002552:	2b40      	cmp	r3, #64	@ 0x40
 8002554:	d133      	bne.n	80025be <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d12e      	bne.n	80025be <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fcf3 	bl	8001f50 <LL_ADC_INJ_IsConversionOngoing>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11a      	bne.n	80025a6 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800257e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d112      	bne.n	80025be <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80025a4:	e00b      	b.n	80025be <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fd34 	bl	800302c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2260      	movs	r2, #96	@ 0x60
 80025ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d011      	beq.n	80025fa <HAL_ADC_IRQHandler+0x264>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00c      	beq.n	80025fa <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f886 	bl	80026fe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <HAL_ADC_IRQHandler+0x294>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00d      	beq.n	800262a <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fd1a 	bl	8003054 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002630:	2b00      	cmp	r3, #0
 8002632:	d012      	beq.n	800265a <HAL_ADC_IRQHandler+0x2c4>
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fd0c 	bl	8003068 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d02a      	beq.n	80026ba <HAL_ADC_IRQHandler+0x324>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d025      	beq.n	80026ba <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002676:	2301      	movs	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e008      	b.n	800268e <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800268a:	2301      	movs	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10e      	bne.n	80026b2 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002698:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	f043 0202 	orr.w	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f830 	bl	8002712 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2210      	movs	r2, #16
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d018      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x360>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d013      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	f043 0208 	orr.w	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ee:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fca5 	bl	8003040 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80026f6:	bf00      	nop
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0b6      	sub	sp, #216	@ 0xd8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x22>
 8002746:	2302      	movs	r3, #2
 8002748:	e3d8      	b.n	8002efc <HAL_ADC_ConfigChannel+0x7d4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fbe7 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 83bd 	bne.w	8002ede <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d104      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff f9fd 	bl	8001b70 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	f7ff fab9 	bl	8001cfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fbcc 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002792:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fbd8 	bl	8001f50 <LL_ADC_INJ_IsConversionOngoing>
 80027a0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 81d9 	bne.w	8002b60 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 81d4 	bne.w	8002b60 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027c0:	d10f      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	4619      	mov	r1, r3
 80027ce:	f7ff fad3 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fa67 	bl	8001cae <LL_ADC_SetSamplingTimeCommonConfig>
 80027e0:	e00e      	b.n	8002800 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f7ff fac2 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fa57 	bl	8001cae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b04      	cmp	r3, #4
 8002820:	d022      	beq.n	8002868 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6919      	ldr	r1, [r3, #16]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002832:	f7ff f9b1 	bl	8001b98 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	461a      	mov	r2, r3
 8002844:	f7ff f9fd 	bl	8001c42 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002854:	2b01      	cmp	r3, #1
 8002856:	d102      	bne.n	800285e <HAL_ADC_ConfigChannel+0x136>
 8002858:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800285c:	e000      	b.n	8002860 <HAL_ADC_ConfigChannel+0x138>
 800285e:	2300      	movs	r3, #0
 8002860:	461a      	mov	r2, r3
 8002862:	f7ff fa09 	bl	8001c78 <LL_ADC_SetOffsetSaturation>
 8002866:	e17b      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f9b6 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x16c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f9ab 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	e01e      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x1aa>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f9a0 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80028b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80028ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e004      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 80028c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x1c2>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	e018      	b.n	800291c <HAL_ADC_ConfigChannel+0x1f4>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80028fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e004      	b.n	800291c <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8002912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800291c:	429a      	cmp	r2, r3
 800291e:	d106      	bne.n	800292e <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff f96f 	bl	8001c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f953 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <HAL_ADC_ConfigChannel+0x232>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f948 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	e01e      	b.n	8002998 <HAL_ADC_ConfigChannel+0x270>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff f93d 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002978:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800297c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e004      	b.n	8002996 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 800298c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x288>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0e9b      	lsrs	r3, r3, #26
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	e018      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x2ba>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80029c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80029cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e004      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 80029d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2101      	movs	r1, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f90c 	bl	8001c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2102      	movs	r1, #2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f8f0 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x2f8>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2102      	movs	r1, #2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f8e5 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	f003 021f 	and.w	r2, r3, #31
 8002a1e:	e01e      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x336>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2102      	movs	r1, #2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f8da 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8002a4e:	2320      	movs	r3, #32
 8002a50:	e004      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8002a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x34e>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	0e9b      	lsrs	r3, r3, #26
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	e016      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x37c>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002a88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8002a96:	2320      	movs	r3, #32
 8002a98:	e004      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8002a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2102      	movs	r1, #2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f8ab 	bl	8001c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2103      	movs	r1, #3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f88f 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x3ba>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f884 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	0e9b      	lsrs	r3, r3, #26
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	e017      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x3ea>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f879 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002afa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002afc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8002b04:	2320      	movs	r3, #32
 8002b06:	e003      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8002b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d105      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x402>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	0e9b      	lsrs	r3, r3, #26
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	e011      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x426>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8002b42:	2320      	movs	r3, #32
 8002b44:	e003      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8002b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d106      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2103      	movs	r1, #3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff f856 	bl	8001c0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f9b9 	bl	8001edc <LL_ADC_IsEnabled>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 813f 	bne.w	8002df0 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f7ff f926 	bl	8001dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a8e      	ldr	r2, [pc, #568]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x69c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	f040 8130 	bne.w	8002df0 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x490>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	bf94      	ite	ls
 8002bb0:	2301      	movls	r3, #1
 8002bb2:	2300      	movhi	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e019      	b.n	8002bec <HAL_ADC_ConfigChannel+0x4c4>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e003      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002bd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2b09      	cmp	r3, #9
 8002be4:	bf94      	ite	ls
 8002be6:	2301      	movls	r3, #1
 8002be8:	2300      	movhi	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d079      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d107      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x4e4>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	3301      	adds	r3, #1
 8002c04:	069b      	lsls	r3, r3, #26
 8002c06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c0a:	e015      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x510>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c1c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e003      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8002c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	069b      	lsls	r3, r3, #26
 8002c34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x530>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	e017      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x560>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c68:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002c70:	2320      	movs	r3, #32
 8002c72:	e003      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	ea42 0103 	orr.w	r1, r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x586>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	051b      	lsls	r3, r3, #20
 8002cac:	e018      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x5b8>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e003      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8002cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	e080      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x5d8>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0e9b      	lsrs	r3, r3, #26
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	069b      	lsls	r3, r3, #26
 8002cfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cfe:	e015      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x604>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	e003      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	069b      	lsls	r3, r3, #26
 8002d28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x624>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0e9b      	lsrs	r3, r3, #26
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	e017      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x654>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	61fb      	str	r3, [r7, #28]
  return result;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e003      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2101      	movs	r1, #1
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	ea42 0103 	orr.w	r1, r2, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x680>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	3301      	adds	r3, #1
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3b1e      	subs	r3, #30
 8002da0:	051b      	lsls	r3, r3, #20
 8002da2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	e01d      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x6bc>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	613b      	str	r3, [r7, #16]
  return result;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d103      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e005      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x6a8>
 8002dc4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f003 021f 	and.w	r2, r3, #31
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	3b1e      	subs	r3, #30
 8002dde:	051b      	lsls	r3, r3, #20
 8002de0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7fe ffc4 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b43      	ldr	r3, [pc, #268]	@ (8002f04 <HAL_ADC_ConfigChannel+0x7dc>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d079      	beq.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dfc:	4842      	ldr	r0, [pc, #264]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7e0>)
 8002dfe:	f7fe fe97 	bl	8001b30 <LL_ADC_GetCommonPathInternalCh>
 8002e02:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a40      	ldr	r2, [pc, #256]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7e4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d124      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d11e      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a3b      	ldr	r2, [pc, #236]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7e8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d164      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4835      	ldr	r0, [pc, #212]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e32:	f7fe fe6a 	bl	8001b0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e36:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7ec>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	4a36      	ldr	r2, [pc, #216]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7f0>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	3301      	adds	r3, #1
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e4a:	e002      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f9      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e58:	e04a      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f1c <HAL_ADC_ConfigChannel+0x7f4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d113      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a26      	ldr	r2, [pc, #152]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7e8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d13a      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e82:	4619      	mov	r1, r3
 8002e84:	4820      	ldr	r0, [pc, #128]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e86:	f7fe fe40 	bl	8001b0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e8a:	e031      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a23      	ldr	r2, [pc, #140]	@ (8002f20 <HAL_ADC_ConfigChannel+0x7f8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d113      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7e8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d121      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4814      	ldr	r0, [pc, #80]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7e0>)
 8002eb8:	f7fe fe27 	bl	8001b0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ebc:	e018      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a18      	ldr	r2, [pc, #96]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7fc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d113      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a10      	ldr	r2, [pc, #64]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7e8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fe38 	bl	8001b4c <LL_ADC_EnableChannelVDDcore>
 8002edc:	e008      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ef8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	37d8      	adds	r7, #216	@ 0xd8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	80080000 	.word	0x80080000
 8002f08:	42028300 	.word	0x42028300
 8002f0c:	c3210000 	.word	0xc3210000
 8002f10:	42028000 	.word	0x42028000
 8002f14:	20000000 	.word	0x20000000
 8002f18:	053e2d63 	.word	0x053e2d63
 8002f1c:	88600004 	.word	0x88600004
 8002f20:	c7520000 	.word	0xc7520000
 8002f24:	99200040 	.word	0x99200040

08002f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe ffcf 	bl	8001edc <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d166      	bne.n	8003012 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	4b34      	ldr	r3, [pc, #208]	@ (800301c <ADC_Enable+0xf4>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	f043 0210 	orr.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e052      	b.n	8003014 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe ff9e 	bl	8001eb4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f78:	4829      	ldr	r0, [pc, #164]	@ (8003020 <ADC_Enable+0xf8>)
 8002f7a:	f7fe fdd9 	bl	8001b30 <LL_ADC_GetCommonPathInternalCh>
 8002f7e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d010      	beq.n	8002faa <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f88:	4b26      	ldr	r3, [pc, #152]	@ (8003024 <ADC_Enable+0xfc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	4a26      	ldr	r2, [pc, #152]	@ (8003028 <ADC_Enable+0x100>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	3301      	adds	r3, #1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f9c:	e002      	b.n	8002fa4 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f9      	bne.n	8002f9e <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002faa:	f7fe fd6b 	bl	8001a84 <HAL_GetTick>
 8002fae:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb0:	e028      	b.n	8003004 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe ff90 	bl	8001edc <LL_ADC_IsEnabled>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe ff74 	bl	8001eb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fcc:	f7fe fd5a 	bl	8001a84 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d914      	bls.n	8003004 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d00d      	beq.n	8003004 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d1cf      	bne.n	8002fb2 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	8000003f 	.word	0x8000003f
 8003020:	42028300 	.word	0x42028300
 8003024:	20000000 	.word	0x20000000
 8003028:	053e2d63 	.word	0x053e2d63

0800302c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030ac:	4013      	ands	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c2:	4a04      	ldr	r2, [pc, #16]	@ (80030d4 <__NVIC_SetPriorityGrouping+0x44>)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	60d3      	str	r3, [r2, #12]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030dc:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <__NVIC_GetPriorityGrouping+0x18>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	f003 0307 	and.w	r3, r3, #7
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003102:	2b00      	cmp	r3, #0
 8003104:	db0b      	blt.n	800311e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	f003 021f 	and.w	r2, r3, #31
 800310c:	4907      	ldr	r1, [pc, #28]	@ (800312c <__NVIC_EnableIRQ+0x38>)
 800310e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2001      	movs	r0, #1
 8003116:	fa00 f202 	lsl.w	r2, r0, r2
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000e100 	.word	0xe000e100

08003130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800313c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003140:	2b00      	cmp	r3, #0
 8003142:	db0a      	blt.n	800315a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	490c      	ldr	r1, [pc, #48]	@ (800317c <__NVIC_SetPriority+0x4c>)
 800314a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800314e:	0112      	lsls	r2, r2, #4
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	440b      	add	r3, r1
 8003154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003158:	e00a      	b.n	8003170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4908      	ldr	r1, [pc, #32]	@ (8003180 <__NVIC_SetPriority+0x50>)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	3b04      	subs	r3, #4
 8003168:	0112      	lsls	r2, r2, #4
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	440b      	add	r3, r1
 800316e:	761a      	strb	r2, [r3, #24]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000e100 	.word	0xe000e100
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	@ 0x24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f1c3 0307 	rsb	r3, r3, #7
 800319e:	2b04      	cmp	r3, #4
 80031a0:	bf28      	it	cs
 80031a2:	2304      	movcs	r3, #4
 80031a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2b06      	cmp	r3, #6
 80031ac:	d902      	bls.n	80031b4 <NVIC_EncodePriority+0x30>
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3b03      	subs	r3, #3
 80031b2:	e000      	b.n	80031b6 <NVIC_EncodePriority+0x32>
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	401a      	ands	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	43d9      	mvns	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	4313      	orrs	r3, r2
         );
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	@ 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ff4c 	bl	8003090 <__NVIC_SetPriorityGrouping>
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800320e:	f7ff ff63 	bl	80030d8 <__NVIC_GetPriorityGrouping>
 8003212:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	6978      	ldr	r0, [r7, #20]
 800321a:	f7ff ffb3 	bl	8003184 <NVIC_EncodePriority>
 800321e:	4602      	mov	r2, r0
 8003220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ff82 	bl	8003130 <__NVIC_SetPriority>
}
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800323e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ff56 	bl	80030f4 <__NVIC_EnableIRQ>
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003260:	d301      	bcc.n	8003266 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003262:	2301      	movs	r3, #1
 8003264:	e00d      	b.n	8003282 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003266:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <HAL_SYSTICK_Config+0x40>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800326e:	4b08      	ldr	r3, [pc, #32]	@ (8003290 <HAL_SYSTICK_Config+0x40>)
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003274:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_SYSTICK_Config+0x40>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a05      	ldr	r2, [pc, #20]	@ (8003290 <HAL_SYSTICK_Config+0x40>)
 800327a:	f043 0303 	orr.w	r3, r3, #3
 800327e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010

08003294 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d844      	bhi.n	800332c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80032a2:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032cb 	.word	0x080032cb
 80032ac:	080032e9 	.word	0x080032e9
 80032b0:	0800330b 	.word	0x0800330b
 80032b4:	0800332d 	.word	0x0800332d
 80032b8:	080032bd 	.word	0x080032bd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80032bc:	4b1f      	ldr	r3, [pc, #124]	@ (800333c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1e      	ldr	r2, [pc, #120]	@ (800333c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	6013      	str	r3, [r2, #0]
      break;
 80032c8:	e031      	b.n	800332e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80032ca:	4b1c      	ldr	r3, [pc, #112]	@ (800333c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1b      	ldr	r2, [pc, #108]	@ (800333c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80032d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80032d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032dc:	4a18      	ldr	r2, [pc, #96]	@ (8003340 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80032de:	f023 030c 	bic.w	r3, r3, #12
 80032e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80032e6:	e022      	b.n	800332e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80032e8:	4b14      	ldr	r3, [pc, #80]	@ (800333c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a13      	ldr	r2, [pc, #76]	@ (800333c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032ee:	f023 0304 	bic.w	r3, r3, #4
 80032f2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80032f4:	4b12      	ldr	r3, [pc, #72]	@ (8003340 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80032f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032fa:	f023 030c 	bic.w	r3, r3, #12
 80032fe:	4a10      	ldr	r2, [pc, #64]	@ (8003340 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003308:	e011      	b.n	800332e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800330a:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a0b      	ldr	r2, [pc, #44]	@ (800333c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003310:	f023 0304 	bic.w	r3, r3, #4
 8003314:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003316:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003318:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800331c:	f023 030c 	bic.w	r3, r3, #12
 8003320:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003322:	f043 0308 	orr.w	r3, r3, #8
 8003326:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800332a:	e000      	b.n	800332e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800332c:	bf00      	nop
  }
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010
 8003340:	44020c00 	.word	0x44020c00

08003344 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800334a:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003356:	2304      	movs	r3, #4
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	e01e      	b.n	800339a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800335c:	4b13      	ldr	r3, [pc, #76]	@ (80033ac <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800335e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d00f      	beq.n	800338e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d80f      	bhi.n	8003394 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b04      	cmp	r3, #4
 800337e:	d003      	beq.n	8003388 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003380:	e008      	b.n	8003394 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
        break;
 8003386:	e008      	b.n	800339a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003388:	2301      	movs	r3, #1
 800338a:	607b      	str	r3, [r7, #4]
        break;
 800338c:	e005      	b.n	800339a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800338e:	2302      	movs	r3, #2
 8003390:	607b      	str	r3, [r7, #4]
        break;
 8003392:	e002      	b.n	800339a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003394:	2300      	movs	r3, #0
 8003396:	607b      	str	r3, [r7, #4]
        break;
 8003398:	bf00      	nop
    }
  }
  return systick_source;
 800339a:	687b      	ldr	r3, [r7, #4]
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e010 	.word	0xe000e010
 80033ac:	44020c00 	.word	0x44020c00

080033b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80033be:	e136      	b.n	800362e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2101      	movs	r1, #1
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8128 	beq.w	8003628 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x38>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d125      	bne.n	8003434 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	08da      	lsrs	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3208      	adds	r2, #8
 80033f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	220f      	movs	r2, #15
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4013      	ands	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f003 020f 	and.w	r2, r3, #15
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	08da      	lsrs	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3208      	adds	r2, #8
 800342e:	6979      	ldr	r1, [r7, #20]
 8003430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0203 	and.w	r2, r3, #3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d00b      	beq.n	8003488 <HAL_GPIO_Init+0xd8>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d007      	beq.n	8003488 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800347c:	2b11      	cmp	r3, #17
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b12      	cmp	r3, #18
 8003486:	d130      	bne.n	80034ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4013      	ands	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034be:	2201      	movs	r2, #1
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4013      	ands	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 0201 	and.w	r2, r3, #1
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d017      	beq.n	8003522 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4013      	ands	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d07c      	beq.n	8003628 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800352e:	4a47      	ldr	r2, [pc, #284]	@ (800364c <HAL_GPIO_Init+0x29c>)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3318      	adds	r3, #24
 8003536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	220f      	movs	r2, #15
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4013      	ands	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	0a9a      	lsrs	r2, r3, #10
 8003556:	4b3e      	ldr	r3, [pc, #248]	@ (8003650 <HAL_GPIO_Init+0x2a0>)
 8003558:	4013      	ands	r3, r2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	f002 0203 	and.w	r2, r2, #3
 8003560:	00d2      	lsls	r2, r2, #3
 8003562:	4093      	lsls	r3, r2
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800356a:	4938      	ldr	r1, [pc, #224]	@ (800364c <HAL_GPIO_Init+0x29c>)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3318      	adds	r3, #24
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003578:	4b34      	ldr	r3, [pc, #208]	@ (800364c <HAL_GPIO_Init+0x29c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	43db      	mvns	r3, r3
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4013      	ands	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800359c:	4a2b      	ldr	r2, [pc, #172]	@ (800364c <HAL_GPIO_Init+0x29c>)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80035a2:	4b2a      	ldr	r3, [pc, #168]	@ (800364c <HAL_GPIO_Init+0x29c>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4013      	ands	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80035c6:	4a21      	ldr	r2, [pc, #132]	@ (800364c <HAL_GPIO_Init+0x29c>)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80035cc:	4b1f      	ldr	r3, [pc, #124]	@ (800364c <HAL_GPIO_Init+0x29c>)
 80035ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4013      	ands	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80035f2:	4a16      	ldr	r2, [pc, #88]	@ (800364c <HAL_GPIO_Init+0x29c>)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80035fa:	4b14      	ldr	r3, [pc, #80]	@ (800364c <HAL_GPIO_Init+0x29c>)
 80035fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003600:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43db      	mvns	r3, r3
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4013      	ands	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003620:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <HAL_GPIO_Init+0x29c>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	3301      	adds	r3, #1
 800362c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	f47f aec1 	bne.w	80033c0 <HAL_GPIO_Init+0x10>
  }
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	44022000 	.word	0x44022000
 8003650:	002f7f7f 	.word	0x002f7f7f

08003654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
 8003660:	4613      	mov	r3, r2
 8003662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003664:	787b      	ldrb	r3, [r7, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003670:	e002      	b.n	8003678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <HAL_ICACHE_Enable+0x1c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a04      	ldr	r2, [pc, #16]	@ (80036a0 <HAL_ICACHE_Enable+0x1c>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40030400 	.word	0x40030400

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f000 bc28 	b.w	8003f08 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b8:	4b94      	ldr	r3, [pc, #592]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f003 0318 	and.w	r3, r3, #24
 80036c0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80036c2:	4b92      	ldr	r3, [pc, #584]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80036c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d05b      	beq.n	8003790 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d005      	beq.n	80036ea <HAL_RCC_OscConfig+0x46>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2b18      	cmp	r3, #24
 80036e2:	d114      	bne.n	800370e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d111      	bne.n	800370e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f000 bc08 	b.w	8003f08 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80036f8:	4b84      	ldr	r3, [pc, #528]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	4981      	ldr	r1, [pc, #516]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003708:	4313      	orrs	r3, r2
 800370a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800370c:	e040      	b.n	8003790 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d023      	beq.n	800375e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003716:	4b7d      	ldr	r3, [pc, #500]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a7c      	ldr	r2, [pc, #496]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fe f9af 	bl	8001a84 <HAL_GetTick>
 8003726:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800372a:	f7fe f9ab 	bl	8001a84 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e3e5      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800373c:	4b73      	ldr	r3, [pc, #460]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003748:	4b70      	ldr	r3, [pc, #448]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	496d      	ldr	r1, [pc, #436]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003758:	4313      	orrs	r3, r2
 800375a:	618b      	str	r3, [r1, #24]
 800375c:	e018      	b.n	8003790 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800375e:	4b6b      	ldr	r3, [pc, #428]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6a      	ldr	r2, [pc, #424]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fe f98b 	bl	8001a84 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003772:	f7fe f987 	bl	8001a84 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e3c1      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003784:	4b61      	ldr	r3, [pc, #388]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a0 	beq.w	80038de <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x10c>
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b18      	cmp	r3, #24
 80037a8:	d109      	bne.n	80037be <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f040 8092 	bne.w	80038de <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e3a4      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x132>
 80037c8:	4b50      	ldr	r3, [pc, #320]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a4f      	ldr	r2, [pc, #316]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80037ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	e058      	b.n	8003888 <HAL_RCC_OscConfig+0x1e4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d112      	bne.n	8003804 <HAL_RCC_OscConfig+0x160>
 80037de:	4b4b      	ldr	r3, [pc, #300]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a4a      	ldr	r2, [pc, #296]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b48      	ldr	r3, [pc, #288]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a47      	ldr	r2, [pc, #284]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80037f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b45      	ldr	r3, [pc, #276]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a44      	ldr	r2, [pc, #272]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80037fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e041      	b.n	8003888 <HAL_RCC_OscConfig+0x1e4>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800380c:	d112      	bne.n	8003834 <HAL_RCC_OscConfig+0x190>
 800380e:	4b3f      	ldr	r3, [pc, #252]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3e      	ldr	r2, [pc, #248]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b3c      	ldr	r3, [pc, #240]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a3b      	ldr	r2, [pc, #236]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003820:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b39      	ldr	r3, [pc, #228]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a38      	ldr	r2, [pc, #224]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e029      	b.n	8003888 <HAL_RCC_OscConfig+0x1e4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800383c:	d112      	bne.n	8003864 <HAL_RCC_OscConfig+0x1c0>
 800383e:	4b33      	ldr	r3, [pc, #204]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a32      	ldr	r2, [pc, #200]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b30      	ldr	r3, [pc, #192]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2f      	ldr	r2, [pc, #188]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003850:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b2d      	ldr	r3, [pc, #180]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2c      	ldr	r2, [pc, #176]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e011      	b.n	8003888 <HAL_RCC_OscConfig+0x1e4>
 8003864:	4b29      	ldr	r3, [pc, #164]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a28      	ldr	r2, [pc, #160]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b26      	ldr	r3, [pc, #152]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a25      	ldr	r2, [pc, #148]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b23      	ldr	r3, [pc, #140]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a22      	ldr	r2, [pc, #136]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 8003882:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fe f8f8 	bl	8001a84 <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003898:	f7fe f8f4 	bl	8001a84 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e32e      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038aa:	4b18      	ldr	r3, [pc, #96]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x1f4>
 80038b6:	e012      	b.n	80038de <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe f8e4 	bl	8001a84 <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80038c0:	f7fe f8e0 	bl	8001a84 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	@ 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e31a      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038d2:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <HAL_RCC_OscConfig+0x268>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 809a 	beq.w	8003a20 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_RCC_OscConfig+0x25a>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b18      	cmp	r3, #24
 80038f6:	d149      	bne.n	800398c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d146      	bne.n	800398c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d104      	bne.n	8003910 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e2fe      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
 800390a:	bf00      	nop
 800390c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d11c      	bne.n	8003950 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003916:	4b9a      	ldr	r3, [pc, #616]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0218 	and.w	r2, r3, #24
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	429a      	cmp	r2, r3
 8003924:	d014      	beq.n	8003950 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003926:	4b96      	ldr	r3, [pc, #600]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0218 	bic.w	r2, r3, #24
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	4993      	ldr	r1, [pc, #588]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003938:	f000 fdd0 	bl	80044dc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800393c:	4b91      	ldr	r3, [pc, #580]	@ (8003b84 <HAL_RCC_OscConfig+0x4e0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe f815 	bl	8001970 <HAL_InitTick>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e2db      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe f898 	bl	8001a84 <HAL_GetTick>
 8003954:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003958:	f7fe f894 	bl	8001a84 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e2ce      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396a:	4b85      	ldr	r3, [pc, #532]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003976:	4b82      	ldr	r3, [pc, #520]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	497e      	ldr	r1, [pc, #504]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800398a:	e049      	b.n	8003a20 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d02c      	beq.n	80039ee <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003994:	4b7a      	ldr	r3, [pc, #488]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 0218 	bic.w	r2, r3, #24
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	4977      	ldr	r1, [pc, #476]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80039a6:	4b76      	ldr	r3, [pc, #472]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a75      	ldr	r2, [pc, #468]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fe f867 	bl	8001a84 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80039ba:	f7fe f863 	bl	8001a84 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e29d      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80039d8:	4b69      	ldr	r3, [pc, #420]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	4966      	ldr	r1, [pc, #408]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	610b      	str	r3, [r1, #16]
 80039ec:	e018      	b.n	8003a20 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ee:	4b64      	ldr	r3, [pc, #400]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a63      	ldr	r2, [pc, #396]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fa:	f7fe f843 	bl	8001a84 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003a02:	f7fe f83f 	bl	8001a84 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e279      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a14:	4b5a      	ldr	r3, [pc, #360]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1f0      	bne.n	8003a02 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d03c      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01c      	beq.n	8003a6e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a34:	4b52      	ldr	r3, [pc, #328]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a3a:	4a51      	ldr	r2, [pc, #324]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003a3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a44:	f7fe f81e 	bl	8001a84 <HAL_GetTick>
 8003a48:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003a4c:	f7fe f81a 	bl	8001a84 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e254      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003a5e:	4b48      	ldr	r3, [pc, #288]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ef      	beq.n	8003a4c <HAL_RCC_OscConfig+0x3a8>
 8003a6c:	e01b      	b.n	8003aa6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6e:	4b44      	ldr	r3, [pc, #272]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a74:	4a42      	ldr	r2, [pc, #264]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003a76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7e:	f7fe f801 	bl	8001a84 <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003a86:	f7fd fffd 	bl	8001a84 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e237      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a98:	4b39      	ldr	r3, [pc, #228]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1ef      	bne.n	8003a86 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80d2 	beq.w	8003c58 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ab4:	4b34      	ldr	r3, [pc, #208]	@ (8003b88 <HAL_RCC_OscConfig+0x4e4>)
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d118      	bne.n	8003af2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003ac0:	4b31      	ldr	r3, [pc, #196]	@ (8003b88 <HAL_RCC_OscConfig+0x4e4>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	4a30      	ldr	r2, [pc, #192]	@ (8003b88 <HAL_RCC_OscConfig+0x4e4>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003acc:	f7fd ffda 	bl	8001a84 <HAL_GetTick>
 8003ad0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fd ffd6 	bl	8001a84 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e210      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ae6:	4b28      	ldr	r3, [pc, #160]	@ (8003b88 <HAL_RCC_OscConfig+0x4e4>)
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d108      	bne.n	8003b0c <HAL_RCC_OscConfig+0x468>
 8003afa:	4b21      	ldr	r3, [pc, #132]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b00:	4a1f      	ldr	r2, [pc, #124]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b0a:	e074      	b.n	8003bf6 <HAL_RCC_OscConfig+0x552>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d118      	bne.n	8003b46 <HAL_RCC_OscConfig+0x4a2>
 8003b14:	4b1a      	ldr	r3, [pc, #104]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b1a:	4a19      	ldr	r2, [pc, #100]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b24:	4b16      	ldr	r3, [pc, #88]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b2a:	4a15      	ldr	r2, [pc, #84]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b34:	4b12      	ldr	r3, [pc, #72]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b3a:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b44:	e057      	b.n	8003bf6 <HAL_RCC_OscConfig+0x552>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b05      	cmp	r3, #5
 8003b4c:	d11e      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4e8>
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b54:	4a0a      	ldr	r2, [pc, #40]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b5e:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b64:	4a06      	ldr	r2, [pc, #24]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b6e:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b74:	4a02      	ldr	r2, [pc, #8]	@ (8003b80 <HAL_RCC_OscConfig+0x4dc>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b7e:	e03a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x552>
 8003b80:	44020c00 	.word	0x44020c00
 8003b84:	20000004 	.word	0x20000004
 8003b88:	44020800 	.word	0x44020800
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b85      	cmp	r3, #133	@ 0x85
 8003b92:	d118      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x522>
 8003b94:	4ba2      	ldr	r3, [pc, #648]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b9a:	4aa1      	ldr	r2, [pc, #644]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ba4:	4b9e      	ldr	r3, [pc, #632]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003baa:	4a9d      	ldr	r2, [pc, #628]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bba:	4a99      	ldr	r2, [pc, #612]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bc4:	e017      	b.n	8003bf6 <HAL_RCC_OscConfig+0x552>
 8003bc6:	4b96      	ldr	r3, [pc, #600]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bcc:	4a94      	ldr	r2, [pc, #592]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bd6:	4b92      	ldr	r3, [pc, #584]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bdc:	4a90      	ldr	r2, [pc, #576]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003bde:	f023 0304 	bic.w	r3, r3, #4
 8003be2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003be6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bec:	4a8c      	ldr	r2, [pc, #560]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bf2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fd ff41 	bl	8001a84 <HAL_GetTick>
 8003c02:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd ff3d 	bl	8001a84 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e175      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c1c:	4b80      	ldr	r3, [pc, #512]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0ed      	beq.n	8003c06 <HAL_RCC_OscConfig+0x562>
 8003c2a:	e015      	b.n	8003c58 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd ff2a 	bl	8001a84 <HAL_GetTick>
 8003c30:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fd ff26 	bl	8001a84 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e15e      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c4a:	4b75      	ldr	r3, [pc, #468]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ed      	bne.n	8003c34 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d036      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d019      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a6b      	ldr	r2, [pc, #428]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003c72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd ff04 	bl	8001a84 <HAL_GetTick>
 8003c7c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003c80:	f7fd ff00 	bl	8001a84 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e13a      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c92:	4b63      	ldr	r3, [pc, #396]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x5dc>
 8003c9e:	e018      	b.n	8003cd2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ca0:	4b5f      	ldr	r3, [pc, #380]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5e      	ldr	r2, [pc, #376]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003ca6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003caa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fd feea 	bl	8001a84 <HAL_GetTick>
 8003cb0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003cb4:	f7fd fee6 	bl	8001a84 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e120      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003cc6:	4b56      	ldr	r3, [pc, #344]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8115 	beq.w	8003f06 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b18      	cmp	r3, #24
 8003ce0:	f000 80af 	beq.w	8003e42 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	f040 8086 	bne.w	8003dfa <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003cee:	4b4c      	ldr	r3, [pc, #304]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a4b      	ldr	r2, [pc, #300]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003cf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fd fec3 	bl	8001a84 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d02:	f7fd febf 	bl	8001a84 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0f9      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d14:	4b42      	ldr	r3, [pc, #264]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003d20:	4b3f      	ldr	r3, [pc, #252]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d28:	f023 0303 	bic.w	r3, r3, #3
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d34:	0212      	lsls	r2, r2, #8
 8003d36:	430a      	orrs	r2, r1
 8003d38:	4939      	ldr	r1, [pc, #228]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d42:	3b01      	subs	r3, #1
 8003d44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	025b      	lsls	r3, r3, #9
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	3b01      	subs	r3, #1
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d6e:	492c      	ldr	r1, [pc, #176]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003d74:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	4a29      	ldr	r2, [pc, #164]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d7a:	f023 0310 	bic.w	r3, r3, #16
 8003d7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d84:	4a26      	ldr	r2, [pc, #152]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003d8a:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8e:	4a24      	ldr	r2, [pc, #144]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d90:	f043 0310 	orr.w	r3, r3, #16
 8003d94:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003d96:	4b22      	ldr	r3, [pc, #136]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9a:	f023 020c 	bic.w	r2, r3, #12
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	491f      	ldr	r1, [pc, #124]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003da8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	f023 0220 	bic.w	r2, r3, #32
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	491a      	ldr	r1, [pc, #104]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dba:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003dc6:	4b16      	ldr	r3, [pc, #88]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003dcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fd fe57 	bl	8001a84 <HAL_GetTick>
 8003dd6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003dda:	f7fd fe53 	bl	8001a84 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e08d      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x736>
 8003df8:	e085      	b.n	8003f06 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003dfa:	4b09      	ldr	r3, [pc, #36]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a08      	ldr	r2, [pc, #32]	@ (8003e20 <HAL_RCC_OscConfig+0x77c>)
 8003e00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fd fe3d 	bl	8001a84 <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003e0e:	f7fd fe39 	bl	8001a84 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d903      	bls.n	8003e24 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e073      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
 8003e20:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e24:	4b3a      	ldr	r3, [pc, #232]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ee      	bne.n	8003e0e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003e30:	4b37      	ldr	r3, [pc, #220]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	4a36      	ldr	r2, [pc, #216]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003e36:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	6293      	str	r3, [r2, #40]	@ 0x28
 8003e40:	e061      	b.n	8003f06 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003e42:	4b33      	ldr	r3, [pc, #204]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e48:	4b31      	ldr	r3, [pc, #196]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d031      	beq.n	8003eba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f003 0203 	and.w	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d12a      	bne.n	8003eba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d122      	bne.n	8003eba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d11a      	bne.n	8003eba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	0a5b      	lsrs	r3, r3, #9
 8003e88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d111      	bne.n	8003eba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d108      	bne.n	8003eba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	0e1b      	lsrs	r3, r3, #24
 8003eac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e024      	b.n	8003f08 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003ebe:	4b14      	ldr	r3, [pc, #80]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec2:	08db      	lsrs	r3, r3, #3
 8003ec4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d01a      	beq.n	8003f06 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003ed6:	f023 0310 	bic.w	r3, r3, #16
 8003eda:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd fdd2 	bl	8001a84 <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003ee2:	bf00      	nop
 8003ee4:	f7fd fdce 	bl	8001a84 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d0f9      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef4:	4a06      	ldr	r2, [pc, #24]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003efa:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	4a04      	ldr	r2, [pc, #16]	@ (8003f10 <HAL_RCC_OscConfig+0x86c>)
 8003f00:	f043 0310 	orr.w	r3, r3, #16
 8003f04:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	44020c00 	.word	0x44020c00

08003f14 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e19e      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f28:	4b83      	ldr	r3, [pc, #524]	@ (8004138 <HAL_RCC_ClockConfig+0x224>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d910      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b80      	ldr	r3, [pc, #512]	@ (8004138 <HAL_RCC_ClockConfig+0x224>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 020f 	bic.w	r2, r3, #15
 8003f3e:	497e      	ldr	r1, [pc, #504]	@ (8004138 <HAL_RCC_ClockConfig+0x224>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b7c      	ldr	r3, [pc, #496]	@ (8004138 <HAL_RCC_ClockConfig+0x224>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e186      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	4b74      	ldr	r3, [pc, #464]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d909      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f76:	4b71      	ldr	r3, [pc, #452]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	496d      	ldr	r1, [pc, #436]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d012      	beq.n	8003fbc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	4b68      	ldr	r3, [pc, #416]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d909      	bls.n	8003fbc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003fa8:	4b64      	ldr	r3, [pc, #400]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	4961      	ldr	r1, [pc, #388]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d908      	bls.n	8003fea <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003fd8:	4b58      	ldr	r3, [pc, #352]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4955      	ldr	r1, [pc, #340]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d010      	beq.n	8004018 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	4b50      	ldr	r3, [pc, #320]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	429a      	cmp	r2, r3
 8004004:	d908      	bls.n	8004018 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004006:	4b4d      	ldr	r3, [pc, #308]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f023 020f 	bic.w	r2, r3, #15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	494a      	ldr	r1, [pc, #296]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8004014:	4313      	orrs	r3, r2
 8004016:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8093 	beq.w	800414c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800402e:	4b43      	ldr	r3, [pc, #268]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d121      	bne.n	800407e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e113      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004046:	4b3d      	ldr	r3, [pc, #244]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d115      	bne.n	800407e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e107      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800405e:	4b37      	ldr	r3, [pc, #220]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0fb      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406e:	4b33      	ldr	r3, [pc, #204]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0f3      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800407e:	4b2f      	ldr	r3, [pc, #188]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f023 0203 	bic.w	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	492c      	ldr	r1, [pc, #176]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 800408c:	4313      	orrs	r3, r2
 800408e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7fd fcf8 	bl	8001a84 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b03      	cmp	r3, #3
 800409c:	d112      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040a0:	f7fd fcf0 	bl	8001a84 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e0d7      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b6:	4b21      	ldr	r3, [pc, #132]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 0318 	and.w	r3, r3, #24
 80040be:	2b18      	cmp	r3, #24
 80040c0:	d1ee      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x18c>
 80040c2:	e043      	b.n	800414c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d112      	bne.n	80040f2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040ce:	f7fd fcd9 	bl	8001a84 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e0c0      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040e4:	4b15      	ldr	r3, [pc, #84]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f003 0318 	and.w	r3, r3, #24
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d1ee      	bne.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
 80040f0:	e02c      	b.n	800414c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d122      	bne.n	8004140 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040fc:	f7fd fcc2 	bl	8001a84 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e0a9      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004112:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <HAL_RCC_ClockConfig+0x228>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 0318 	and.w	r3, r3, #24
 800411a:	2b08      	cmp	r3, #8
 800411c:	d1ee      	bne.n	80040fc <HAL_RCC_ClockConfig+0x1e8>
 800411e:	e015      	b.n	800414c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004120:	f7fd fcb0 	bl	8001a84 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d906      	bls.n	8004140 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e097      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
 8004136:	bf00      	nop
 8004138:	40022000 	.word	0x40022000
 800413c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004140:	4b4b      	ldr	r3, [pc, #300]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f003 0318 	and.w	r3, r3, #24
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e9      	bne.n	8004120 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4b44      	ldr	r3, [pc, #272]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	429a      	cmp	r2, r3
 8004166:	d208      	bcs.n	800417a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004168:	4b41      	ldr	r3, [pc, #260]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f023 020f 	bic.w	r2, r3, #15
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	493e      	ldr	r1, [pc, #248]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800417a:	4b3e      	ldr	r3, [pc, #248]	@ (8004274 <HAL_RCC_ClockConfig+0x360>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d210      	bcs.n	80041aa <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004188:	4b3a      	ldr	r3, [pc, #232]	@ (8004274 <HAL_RCC_ClockConfig+0x360>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f023 020f 	bic.w	r2, r3, #15
 8004190:	4938      	ldr	r1, [pc, #224]	@ (8004274 <HAL_RCC_ClockConfig+0x360>)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004198:	4b36      	ldr	r3, [pc, #216]	@ (8004274 <HAL_RCC_ClockConfig+0x360>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e05d      	b.n	8004266 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d208      	bcs.n	80041d8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80041c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	4927      	ldr	r1, [pc, #156]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d012      	beq.n	800420a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	4b21      	ldr	r3, [pc, #132]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d209      	bcs.n	800420a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80041f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	491a      	ldr	r1, [pc, #104]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	d012      	beq.n	800423c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004224:	429a      	cmp	r2, r3
 8004226:	d209      	bcs.n	800423c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004228:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	490e      	ldr	r1, [pc, #56]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 8004238:	4313      	orrs	r3, r2
 800423a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800423c:	f000 f822 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCC_ClockConfig+0x35c>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	490b      	ldr	r1, [pc, #44]	@ (8004278 <HAL_RCC_ClockConfig+0x364>)
 800424c:	5ccb      	ldrb	r3, [r1, r3]
 800424e:	fa22 f303 	lsr.w	r3, r2, r3
 8004252:	4a0a      	ldr	r2, [pc, #40]	@ (800427c <HAL_RCC_ClockConfig+0x368>)
 8004254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <HAL_RCC_ClockConfig+0x36c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd fb88 	bl	8001970 <HAL_InitTick>
 8004260:	4603      	mov	r3, r0
 8004262:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004264:	7afb      	ldrb	r3, [r7, #11]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	44020c00 	.word	0x44020c00
 8004274:	40022000 	.word	0x40022000
 8004278:	08005964 	.word	0x08005964
 800427c:	20000000 	.word	0x20000000
 8004280:	20000004 	.word	0x20000004

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	@ 0x24
 8004288:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800428a:	4b8c      	ldr	r3, [pc, #560]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f003 0318 	and.w	r3, r3, #24
 8004292:	2b08      	cmp	r3, #8
 8004294:	d102      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004296:	4b8a      	ldr	r3, [pc, #552]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	e107      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800429c:	4b87      	ldr	r3, [pc, #540]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f003 0318 	and.w	r3, r3, #24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d112      	bne.n	80042ce <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80042a8:	4b84      	ldr	r3, [pc, #528]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042b4:	4b81      	ldr	r3, [pc, #516]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	08db      	lsrs	r3, r3, #3
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	4a81      	ldr	r2, [pc, #516]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	e0f1      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80042c8:	4b7e      	ldr	r3, [pc, #504]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	e0ee      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042ce:	4b7b      	ldr	r3, [pc, #492]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 0318 	and.w	r3, r3, #24
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d102      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042da:	4b7b      	ldr	r3, [pc, #492]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x244>)
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e0e5      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042e0:	4b76      	ldr	r3, [pc, #472]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 0318 	and.w	r3, r3, #24
 80042e8:	2b18      	cmp	r3, #24
 80042ea:	f040 80dd 	bne.w	80044a8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80042ee:	4b73      	ldr	r3, [pc, #460]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80042f8:	4b70      	ldr	r3, [pc, #448]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004302:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004304:	4b6d      	ldr	r3, [pc, #436]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004310:	4b6a      	ldr	r3, [pc, #424]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004314:	08db      	lsrs	r3, r3, #3
 8004316:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004328:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 80b7 	beq.w	80044a2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0xbe>
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d056      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0x16a>
 8004340:	e077      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004342:	4b5e      	ldr	r3, [pc, #376]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d02d      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800434e:	4b5b      	ldr	r3, [pc, #364]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	08db      	lsrs	r3, r3, #3
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	4a5a      	ldr	r2, [pc, #360]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x240>)
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004378:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004388:	ed97 6a02 	vldr	s12, [r7, #8]
 800438c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x248>
 8004390:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004394:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004398:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800439c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80043a8:	e065      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80044d0 <HAL_RCC_GetSysClockFreq+0x24c>
 80043b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043bc:	4b3f      	ldr	r3, [pc, #252]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 80043be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c4:	ee07 3a90 	vmov	s15, r3
 80043c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80043cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80043d0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x248>
 80043d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80043dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80043ec:	e043      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80044d4 <HAL_RCC_GetSysClockFreq+0x250>
 80043fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004400:	4b2e      	ldr	r3, [pc, #184]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004410:	ed97 6a02 	vldr	s12, [r7, #8]
 8004414:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x248>
 8004418:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800441c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004420:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004424:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004430:	e021      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80044d8 <HAL_RCC_GetSysClockFreq+0x254>
 8004440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004444:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004454:	ed97 6a02 	vldr	s12, [r7, #8]
 8004458:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x248>
 800445c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004460:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004464:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004468:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800446c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004470:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004474:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004476:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x238>)
 8004478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447a:	0a5b      	lsrs	r3, r3, #9
 800447c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004480:	3301      	adds	r3, #1
 8004482:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800448e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449a:	ee17 3a90 	vmov	r3, s15
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	e004      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e001      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80044a8:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80044aa:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80044ac:	69fb      	ldr	r3, [r7, #28]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3724      	adds	r7, #36	@ 0x24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	44020c00 	.word	0x44020c00
 80044c0:	003d0900 	.word	0x003d0900
 80044c4:	03d09000 	.word	0x03d09000
 80044c8:	017d7840 	.word	0x017d7840
 80044cc:	46000000 	.word	0x46000000
 80044d0:	4c742400 	.word	0x4c742400
 80044d4:	4bbebc20 	.word	0x4bbebc20
 80044d8:	4a742400 	.word	0x4a742400

080044dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80044e0:	f7ff fed0 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <HAL_RCC_GetHCLKFreq+0x2c>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80044ea:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80044ee:	4907      	ldr	r1, [pc, #28]	@ (800450c <HAL_RCC_GetHCLKFreq+0x30>)
 80044f0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80044f2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80044f6:	fa22 f303 	lsr.w	r3, r2, r3
 80044fa:	4a05      	ldr	r2, [pc, #20]	@ (8004510 <HAL_RCC_GetHCLKFreq+0x34>)
 80044fc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80044fe:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <HAL_RCC_GetHCLKFreq+0x34>)
 8004500:	681b      	ldr	r3, [r3, #0]
}
 8004502:	4618      	mov	r0, r3
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	44020c00 	.word	0x44020c00
 800450c:	08005964 	.word	0x08005964
 8004510:	20000000 	.word	0x20000000

08004514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e049      	b.n	80045ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fd f86c 	bl	8001618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f000 fbe4 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d001      	beq.n	80045dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e033      	b.n	8004644 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	@ (8004650 <HAL_TIM_Base_Start+0x8c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_TIM_Base_Start+0x3e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f6:	d004      	beq.n	8004602 <HAL_TIM_Base_Start+0x3e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a15      	ldr	r2, [pc, #84]	@ (8004654 <HAL_TIM_Base_Start+0x90>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d115      	bne.n	800462e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <HAL_TIM_Base_Start+0x94>)
 800460a:	4013      	ands	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d015      	beq.n	8004640 <HAL_TIM_Base_Start+0x7c>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461a:	d011      	beq.n	8004640 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	e008      	b.n	8004640 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e000      	b.n	8004642 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40000400 	.word	0x40000400
 8004658:	00010007 	.word	0x00010007

0800465c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e049      	b.n	8004702 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f841 	bl	800470a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f000 fb40 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <HAL_TIM_PWM_Start+0x24>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e03c      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d109      	bne.n	800475e <HAL_TIM_PWM_Start+0x3e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e02f      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x58>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e022      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d109      	bne.n	8004792 <HAL_TIM_PWM_Start+0x72>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e015      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b10      	cmp	r3, #16
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x8c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e008      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06f      	b.n	80048a6 <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_PWM_Start+0xb6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d4:	e023      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0xc6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e4:	e01b      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0xd6>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f4:	e013      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b0c      	cmp	r3, #12
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start+0xe6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004804:	e00b      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b10      	cmp	r3, #16
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0xf6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004814:	e003      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fdc6 	bl	80053b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1f      	ldr	r2, [pc, #124]	@ (80048b0 <HAL_TIM_PWM_Start+0x190>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d107      	bne.n	8004846 <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004844:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <HAL_TIM_PWM_Start+0x190>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_TIM_PWM_Start+0x144>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004858:	d004      	beq.n	8004864 <HAL_TIM_PWM_Start+0x144>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <HAL_TIM_PWM_Start+0x194>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d115      	bne.n	8004890 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <HAL_TIM_PWM_Start+0x198>)
 800486c:	4013      	ands	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b06      	cmp	r3, #6
 8004874:	d015      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x182>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487c:	d011      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488e:	e008      	b.n	80048a2 <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	e000      	b.n	80048a4 <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40000400 	.word	0x40000400
 80048b8:	00010007 	.word	0x00010007

080048bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e0ff      	b.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b14      	cmp	r3, #20
 80048e6:	f200 80f0 	bhi.w	8004aca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048ea:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004945 	.word	0x08004945
 80048f4:	08004acb 	.word	0x08004acb
 80048f8:	08004acb 	.word	0x08004acb
 80048fc:	08004acb 	.word	0x08004acb
 8004900:	08004985 	.word	0x08004985
 8004904:	08004acb 	.word	0x08004acb
 8004908:	08004acb 	.word	0x08004acb
 800490c:	08004acb 	.word	0x08004acb
 8004910:	080049c7 	.word	0x080049c7
 8004914:	08004acb 	.word	0x08004acb
 8004918:	08004acb 	.word	0x08004acb
 800491c:	08004acb 	.word	0x08004acb
 8004920:	08004a07 	.word	0x08004a07
 8004924:	08004acb 	.word	0x08004acb
 8004928:	08004acb 	.word	0x08004acb
 800492c:	08004acb 	.word	0x08004acb
 8004930:	08004a49 	.word	0x08004a49
 8004934:	08004acb 	.word	0x08004acb
 8004938:	08004acb 	.word	0x08004acb
 800493c:	08004acb 	.word	0x08004acb
 8004940:	08004a89 	.word	0x08004a89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fa4e 	bl	8004dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0208 	orr.w	r2, r2, #8
 800495e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0204 	bic.w	r2, r2, #4
 800496e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6999      	ldr	r1, [r3, #24]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	619a      	str	r2, [r3, #24]
      break;
 8004982:	e0a5      	b.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fa96 	bl	8004ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800499e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6999      	ldr	r1, [r3, #24]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	021a      	lsls	r2, r3, #8
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	619a      	str	r2, [r3, #24]
      break;
 80049c4:	e084      	b.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fae3 	bl	8004f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0208 	orr.w	r2, r2, #8
 80049e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0204 	bic.w	r2, r2, #4
 80049f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	61da      	str	r2, [r3, #28]
      break;
 8004a04:	e064      	b.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fb2f 	bl	8005070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69d9      	ldr	r1, [r3, #28]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	021a      	lsls	r2, r3, #8
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	61da      	str	r2, [r3, #28]
      break;
 8004a46:	e043      	b.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb7c 	bl	800514c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0208 	orr.w	r2, r2, #8
 8004a62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0204 	bic.w	r2, r2, #4
 8004a72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a86:	e023      	b.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fba8 	bl	80051e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ac8:	e002      	b.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ace:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop

08004ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_ConfigClockSource+0x1c>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0fe      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x21a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004b1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b3c:	f000 80c9 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b44:	f200 80ce 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004b48:	4a6f      	ldr	r2, [pc, #444]	@ (8004d08 <HAL_TIM_ConfigClockSource+0x224>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	f000 80c1 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b50:	4a6d      	ldr	r2, [pc, #436]	@ (8004d08 <HAL_TIM_ConfigClockSource+0x224>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	f200 80c6 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004b58:	4a6c      	ldr	r2, [pc, #432]	@ (8004d0c <HAL_TIM_ConfigClockSource+0x228>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	f000 80b9 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b60:	4a6a      	ldr	r2, [pc, #424]	@ (8004d0c <HAL_TIM_ConfigClockSource+0x228>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f200 80be 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004b68:	4a69      	ldr	r2, [pc, #420]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x22c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	f000 80b1 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b70:	4a67      	ldr	r2, [pc, #412]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x22c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	f200 80b6 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004b78:	4a66      	ldr	r2, [pc, #408]	@ (8004d14 <HAL_TIM_ConfigClockSource+0x230>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f000 80a9 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b80:	4a64      	ldr	r2, [pc, #400]	@ (8004d14 <HAL_TIM_ConfigClockSource+0x230>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	f200 80ae 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004b88:	4a63      	ldr	r2, [pc, #396]	@ (8004d18 <HAL_TIM_ConfigClockSource+0x234>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	f000 80a1 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b90:	4a61      	ldr	r2, [pc, #388]	@ (8004d18 <HAL_TIM_ConfigClockSource+0x234>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	f200 80a6 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004b98:	4a60      	ldr	r2, [pc, #384]	@ (8004d1c <HAL_TIM_ConfigClockSource+0x238>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	f000 8099 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004ba0:	4a5e      	ldr	r2, [pc, #376]	@ (8004d1c <HAL_TIM_ConfigClockSource+0x238>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	f200 809e 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004ba8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004bac:	f000 8091 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004bb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004bb4:	f200 8096 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004bb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bbc:	f000 8089 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004bc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bc4:	f200 808e 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bcc:	d03e      	beq.n	8004c4c <HAL_TIM_ConfigClockSource+0x168>
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd2:	f200 8087 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bda:	f000 8086 	beq.w	8004cea <HAL_TIM_ConfigClockSource+0x206>
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be2:	d87f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004be4:	2b70      	cmp	r3, #112	@ 0x70
 8004be6:	d01a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x13a>
 8004be8:	2b70      	cmp	r3, #112	@ 0x70
 8004bea:	d87b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004bec:	2b60      	cmp	r3, #96	@ 0x60
 8004bee:	d050      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8004bf0:	2b60      	cmp	r3, #96	@ 0x60
 8004bf2:	d877      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004bf4:	2b50      	cmp	r3, #80	@ 0x50
 8004bf6:	d03c      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x18e>
 8004bf8:	2b50      	cmp	r3, #80	@ 0x50
 8004bfa:	d873      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d058      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x1ce>
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d86f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004c04:	2b30      	cmp	r3, #48	@ 0x30
 8004c06:	d064      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004c08:	2b30      	cmp	r3, #48	@ 0x30
 8004c0a:	d86b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d060      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d867      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d05c      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d05a      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x1ee>
 8004c1c:	e062      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c2e:	f000 fba3 	bl	8005378 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	609a      	str	r2, [r3, #8]
      break;
 8004c4a:	e04f      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c5c:	f000 fb8c 	bl	8005378 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c6e:	609a      	str	r2, [r3, #8]
      break;
 8004c70:	e03c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f000 fafe 	bl	8005280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2150      	movs	r1, #80	@ 0x50
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fb57 	bl	800533e <TIM_ITRx_SetConfig>
      break;
 8004c90:	e02c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f000 fb1d 	bl	80052de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2160      	movs	r1, #96	@ 0x60
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fb47 	bl	800533e <TIM_ITRx_SetConfig>
      break;
 8004cb0:	e01c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 fade 	bl	8005280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2140      	movs	r1, #64	@ 0x40
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fb37 	bl	800533e <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e00c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f000 fb2e 	bl	800533e <TIM_ITRx_SetConfig>
      break;
 8004ce2:	e003      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce8:	e000      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x208>
      break;
 8004cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	00100070 	.word	0x00100070
 8004d0c:	00100060 	.word	0x00100060
 8004d10:	00100050 	.word	0x00100050
 8004d14:	00100040 	.word	0x00100040
 8004d18:	00100030 	.word	0x00100030
 8004d1c:	00100020 	.word	0x00100020

08004d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a2c      	ldr	r2, [pc, #176]	@ (8004de4 <TIM_Base_SetConfig+0xc4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_Base_SetConfig+0x28>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3e:	d003      	beq.n	8004d48 <TIM_Base_SetConfig+0x28>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a29      	ldr	r2, [pc, #164]	@ (8004de8 <TIM_Base_SetConfig+0xc8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d108      	bne.n	8004d5a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a21      	ldr	r2, [pc, #132]	@ (8004de4 <TIM_Base_SetConfig+0xc4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d007      	beq.n	8004d72 <TIM_Base_SetConfig+0x52>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d68:	d003      	beq.n	8004d72 <TIM_Base_SetConfig+0x52>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004de8 <TIM_Base_SetConfig+0xc8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d108      	bne.n	8004d84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a0e      	ldr	r2, [pc, #56]	@ (8004de4 <TIM_Base_SetConfig+0xc4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d103      	bne.n	8004db8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d105      	bne.n	8004dd6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f023 0201 	bic.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40000400 	.word	0x40000400

08004dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f023 0201 	bic.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0302 	bic.w	r3, r3, #2
 8004e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb8 <TIM_OC1_SetConfig+0xcc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d10c      	bne.n	8004e66 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0308 	bic.w	r3, r3, #8
 8004e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a13      	ldr	r2, [pc, #76]	@ (8004eb8 <TIM_OC1_SetConfig+0xcc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d111      	bne.n	8004e92 <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	621a      	str	r2, [r3, #32]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40012c00 	.word	0x40012c00

08004ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	f023 0210 	bic.w	r2, r3, #16
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0320 	bic.w	r3, r3, #32
 8004f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f94 <TIM_OC2_SetConfig+0xd8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10d      	bne.n	8004f3c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	@ (8004f94 <TIM_OC2_SetConfig+0xd8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d113      	bne.n	8004f6c <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40012c00 	.word	0x40012c00

08004f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800506c <TIM_OC3_SetConfig+0xd4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d10d      	bne.n	8005016 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a14      	ldr	r2, [pc, #80]	@ (800506c <TIM_OC3_SetConfig+0xd4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d113      	bne.n	8005046 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40012c00 	.word	0x40012c00

08005070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800509e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	031b      	lsls	r3, r3, #12
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005148 <TIM_OC4_SetConfig+0xd8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d10d      	bne.n	80050f0 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <TIM_OC4_SetConfig+0xd8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d113      	bne.n	8005120 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005106:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	019b      	lsls	r3, r3, #6
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40012c00 	.word	0x40012c00

0800514c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800517a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005190:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a0f      	ldr	r2, [pc, #60]	@ (80051e0 <TIM_OC5_SetConfig+0x94>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d109      	bne.n	80051ba <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40012c00 	.word	0x40012c00

080051e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800522a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	051b      	lsls	r3, r3, #20
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a10      	ldr	r2, [pc, #64]	@ (800527c <TIM_OC6_SetConfig+0x98>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d109      	bne.n	8005254 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00

08005280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 030a 	bic.w	r3, r3, #10
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052de:	b480      	push	{r7}
 80052e0:	b087      	sub	sp, #28
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f023 0210 	bic.w	r2, r3, #16
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	031b      	lsls	r3, r3, #12
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800531a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	f043 0307 	orr.w	r3, r3, #7
 8005364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	609a      	str	r2, [r3, #8]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	021a      	lsls	r2, r3, #8
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	431a      	orrs	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2201      	movs	r2, #1
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1a      	ldr	r2, [r3, #32]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005418:	2302      	movs	r3, #2
 800541a:	e051      	b.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a22      	ldr	r2, [pc, #136]	@ (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d108      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800544c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800545e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a14      	ldr	r2, [pc, #80]	@ (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005488:	d004      	beq.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a10      	ldr	r2, [pc, #64]	@ (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10c      	bne.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800549a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40000400 	.word	0x40000400

080054d4 <memset>:
 80054d4:	4402      	add	r2, r0
 80054d6:	4603      	mov	r3, r0
 80054d8:	4293      	cmp	r3, r2
 80054da:	d100      	bne.n	80054de <memset+0xa>
 80054dc:	4770      	bx	lr
 80054de:	f803 1b01 	strb.w	r1, [r3], #1
 80054e2:	e7f9      	b.n	80054d8 <memset+0x4>

080054e4 <__errno>:
 80054e4:	4b01      	ldr	r3, [pc, #4]	@ (80054ec <__errno+0x8>)
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	2000000c 	.word	0x2000000c

080054f0 <__libc_init_array>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005528 <__libc_init_array+0x38>)
 80054f4:	2600      	movs	r6, #0
 80054f6:	4c0d      	ldr	r4, [pc, #52]	@ (800552c <__libc_init_array+0x3c>)
 80054f8:	1b64      	subs	r4, r4, r5
 80054fa:	10a4      	asrs	r4, r4, #2
 80054fc:	42a6      	cmp	r6, r4
 80054fe:	d109      	bne.n	8005514 <__libc_init_array+0x24>
 8005500:	4d0b      	ldr	r5, [pc, #44]	@ (8005530 <__libc_init_array+0x40>)
 8005502:	2600      	movs	r6, #0
 8005504:	4c0b      	ldr	r4, [pc, #44]	@ (8005534 <__libc_init_array+0x44>)
 8005506:	f000 fa11 	bl	800592c <_init>
 800550a:	1b64      	subs	r4, r4, r5
 800550c:	10a4      	asrs	r4, r4, #2
 800550e:	42a6      	cmp	r6, r4
 8005510:	d105      	bne.n	800551e <__libc_init_array+0x2e>
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	f855 3b04 	ldr.w	r3, [r5], #4
 8005518:	3601      	adds	r6, #1
 800551a:	4798      	blx	r3
 800551c:	e7ee      	b.n	80054fc <__libc_init_array+0xc>
 800551e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005522:	3601      	adds	r6, #1
 8005524:	4798      	blx	r3
 8005526:	e7f2      	b.n	800550e <__libc_init_array+0x1e>
 8005528:	08005978 	.word	0x08005978
 800552c:	08005978 	.word	0x08005978
 8005530:	08005978 	.word	0x08005978
 8005534:	0800597c 	.word	0x0800597c

08005538 <log>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	ec55 4b10 	vmov	r4, r5, d0
 800553e:	ed2d 8b02 	vpush	{d8}
 8005542:	f000 f841 	bl	80055c8 <__ieee754_log>
 8005546:	4622      	mov	r2, r4
 8005548:	462b      	mov	r3, r5
 800554a:	4620      	mov	r0, r4
 800554c:	4629      	mov	r1, r5
 800554e:	eeb0 8a40 	vmov.f32	s16, s0
 8005552:	eef0 8a60 	vmov.f32	s17, s1
 8005556:	f7fb faf5 	bl	8000b44 <__aeabi_dcmpun>
 800555a:	b998      	cbnz	r0, 8005584 <log+0x4c>
 800555c:	2200      	movs	r2, #0
 800555e:	2300      	movs	r3, #0
 8005560:	4620      	mov	r0, r4
 8005562:	4629      	mov	r1, r5
 8005564:	f7fb fae4 	bl	8000b30 <__aeabi_dcmpgt>
 8005568:	b960      	cbnz	r0, 8005584 <log+0x4c>
 800556a:	2200      	movs	r2, #0
 800556c:	2300      	movs	r3, #0
 800556e:	4620      	mov	r0, r4
 8005570:	4629      	mov	r1, r5
 8005572:	f7fb fab5 	bl	8000ae0 <__aeabi_dcmpeq>
 8005576:	b160      	cbz	r0, 8005592 <log+0x5a>
 8005578:	f7ff ffb4 	bl	80054e4 <__errno>
 800557c:	2322      	movs	r3, #34	@ 0x22
 800557e:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80055a8 <log+0x70>
 8005582:	6003      	str	r3, [r0, #0]
 8005584:	eeb0 0a48 	vmov.f32	s0, s16
 8005588:	eef0 0a68 	vmov.f32	s1, s17
 800558c:	ecbd 8b02 	vpop	{d8}
 8005590:	bd38      	pop	{r3, r4, r5, pc}
 8005592:	f7ff ffa7 	bl	80054e4 <__errno>
 8005596:	2321      	movs	r3, #33	@ 0x21
 8005598:	ecbd 8b02 	vpop	{d8}
 800559c:	6003      	str	r3, [r0, #0]
 800559e:	4804      	ldr	r0, [pc, #16]	@ (80055b0 <log+0x78>)
 80055a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a4:	f000 b808 	b.w	80055b8 <nan>
 80055a8:	00000000 	.word	0x00000000
 80055ac:	fff00000 	.word	0xfff00000
 80055b0:	08005974 	.word	0x08005974
 80055b4:	00000000 	.word	0x00000000

080055b8 <nan>:
 80055b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80055c0 <nan+0x8>
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	00000000 	.word	0x00000000
 80055c4:	7ff80000 	.word	0x7ff80000

080055c8 <__ieee754_log>:
 80055c8:	ec51 0b10 	vmov	r0, r1, d0
 80055cc:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	460d      	mov	r5, r1
 80055d6:	b087      	sub	sp, #28
 80055d8:	da26      	bge.n	8005628 <__ieee754_log+0x60>
 80055da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80055de:	4602      	mov	r2, r0
 80055e0:	4303      	orrs	r3, r0
 80055e2:	d10a      	bne.n	80055fa <__ieee754_log+0x32>
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	2000      	movs	r0, #0
 80055ea:	49cb      	ldr	r1, [pc, #812]	@ (8005918 <__ieee754_log+0x350>)
 80055ec:	f7fb f93a 	bl	8000864 <__aeabi_ddiv>
 80055f0:	ec41 0b10 	vmov	d0, r0, r1
 80055f4:	b007      	add	sp, #28
 80055f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fa:	2900      	cmp	r1, #0
 80055fc:	da05      	bge.n	800560a <__ieee754_log+0x42>
 80055fe:	460b      	mov	r3, r1
 8005600:	f7fa fe4e 	bl	80002a0 <__aeabi_dsub>
 8005604:	2200      	movs	r2, #0
 8005606:	2300      	movs	r3, #0
 8005608:	e7f0      	b.n	80055ec <__ieee754_log+0x24>
 800560a:	4bc4      	ldr	r3, [pc, #784]	@ (800591c <__ieee754_log+0x354>)
 800560c:	2200      	movs	r2, #0
 800560e:	f7fa ffff 	bl	8000610 <__aeabi_dmul>
 8005612:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8005616:	460d      	mov	r5, r1
 8005618:	4ac1      	ldr	r2, [pc, #772]	@ (8005920 <__ieee754_log+0x358>)
 800561a:	4295      	cmp	r5, r2
 800561c:	dd06      	ble.n	800562c <__ieee754_log+0x64>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	f7fa fe3f 	bl	80002a4 <__adddf3>
 8005626:	e7e3      	b.n	80055f0 <__ieee754_log+0x28>
 8005628:	2300      	movs	r3, #0
 800562a:	e7f5      	b.n	8005618 <__ieee754_log+0x50>
 800562c:	152c      	asrs	r4, r5, #20
 800562e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005632:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8005636:	441c      	add	r4, r3
 8005638:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800563c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8005640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005644:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8005648:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800564c:	4bb5      	ldr	r3, [pc, #724]	@ (8005924 <__ieee754_log+0x35c>)
 800564e:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8005652:	ea42 0105 	orr.w	r1, r2, r5
 8005656:	2200      	movs	r2, #0
 8005658:	f7fa fe22 	bl	80002a0 <__aeabi_dsub>
 800565c:	1cab      	adds	r3, r5, #2
 800565e:	4682      	mov	sl, r0
 8005660:	468b      	mov	fp, r1
 8005662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005666:	2200      	movs	r2, #0
 8005668:	2b02      	cmp	r3, #2
 800566a:	dc53      	bgt.n	8005714 <__ieee754_log+0x14c>
 800566c:	2300      	movs	r3, #0
 800566e:	f7fb fa37 	bl	8000ae0 <__aeabi_dcmpeq>
 8005672:	b1d0      	cbz	r0, 80056aa <__ieee754_log+0xe2>
 8005674:	2c00      	cmp	r4, #0
 8005676:	f000 8120 	beq.w	80058ba <__ieee754_log+0x2f2>
 800567a:	4620      	mov	r0, r4
 800567c:	f7fa ff5e 	bl	800053c <__aeabi_i2d>
 8005680:	4606      	mov	r6, r0
 8005682:	460f      	mov	r7, r1
 8005684:	a38e      	add	r3, pc, #568	@ (adr r3, 80058c0 <__ieee754_log+0x2f8>)
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f7fa ffc1 	bl	8000610 <__aeabi_dmul>
 800568e:	4604      	mov	r4, r0
 8005690:	460d      	mov	r5, r1
 8005692:	4630      	mov	r0, r6
 8005694:	4639      	mov	r1, r7
 8005696:	a38c      	add	r3, pc, #560	@ (adr r3, 80058c8 <__ieee754_log+0x300>)
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f7fa ffb8 	bl	8000610 <__aeabi_dmul>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4620      	mov	r0, r4
 80056a6:	4629      	mov	r1, r5
 80056a8:	e7bb      	b.n	8005622 <__ieee754_log+0x5a>
 80056aa:	a389      	add	r3, pc, #548	@ (adr r3, 80058d0 <__ieee754_log+0x308>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	4650      	mov	r0, sl
 80056b2:	4659      	mov	r1, fp
 80056b4:	f7fa ffac 	bl	8000610 <__aeabi_dmul>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	2000      	movs	r0, #0
 80056be:	499a      	ldr	r1, [pc, #616]	@ (8005928 <__ieee754_log+0x360>)
 80056c0:	f7fa fdee 	bl	80002a0 <__aeabi_dsub>
 80056c4:	4606      	mov	r6, r0
 80056c6:	460f      	mov	r7, r1
 80056c8:	4652      	mov	r2, sl
 80056ca:	465b      	mov	r3, fp
 80056cc:	4650      	mov	r0, sl
 80056ce:	4659      	mov	r1, fp
 80056d0:	f7fa ff9e 	bl	8000610 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4630      	mov	r0, r6
 80056da:	4639      	mov	r1, r7
 80056dc:	f7fa ff98 	bl	8000610 <__aeabi_dmul>
 80056e0:	4606      	mov	r6, r0
 80056e2:	460f      	mov	r7, r1
 80056e4:	b914      	cbnz	r4, 80056ec <__ieee754_log+0x124>
 80056e6:	4632      	mov	r2, r6
 80056e8:	463b      	mov	r3, r7
 80056ea:	e0a0      	b.n	800582e <__ieee754_log+0x266>
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7fa ff25 	bl	800053c <__aeabi_i2d>
 80056f2:	4680      	mov	r8, r0
 80056f4:	4689      	mov	r9, r1
 80056f6:	a372      	add	r3, pc, #456	@ (adr r3, 80058c0 <__ieee754_log+0x2f8>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f7fa ff88 	bl	8000610 <__aeabi_dmul>
 8005700:	4604      	mov	r4, r0
 8005702:	460d      	mov	r5, r1
 8005704:	4640      	mov	r0, r8
 8005706:	4649      	mov	r1, r9
 8005708:	a36f      	add	r3, pc, #444	@ (adr r3, 80058c8 <__ieee754_log+0x300>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa ff7f 	bl	8000610 <__aeabi_dmul>
 8005712:	e0a5      	b.n	8005860 <__ieee754_log+0x298>
 8005714:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005718:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800571c:	f7fa fdc2 	bl	80002a4 <__adddf3>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4650      	mov	r0, sl
 8005726:	4659      	mov	r1, fp
 8005728:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800572c:	f7fb f89a 	bl	8000864 <__aeabi_ddiv>
 8005730:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8005734:	3551      	adds	r5, #81	@ 0x51
 8005736:	e9cd 0100 	strd	r0, r1, [sp]
 800573a:	4620      	mov	r0, r4
 800573c:	4335      	orrs	r5, r6
 800573e:	f7fa fefd 	bl	800053c <__aeabi_i2d>
 8005742:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	f7fa ff5f 	bl	8000610 <__aeabi_dmul>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800575a:	f7fa ff59 	bl	8000610 <__aeabi_dmul>
 800575e:	4680      	mov	r8, r0
 8005760:	4689      	mov	r9, r1
 8005762:	a35d      	add	r3, pc, #372	@ (adr r3, 80058d8 <__ieee754_log+0x310>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa ff52 	bl	8000610 <__aeabi_dmul>
 800576c:	a35c      	add	r3, pc, #368	@ (adr r3, 80058e0 <__ieee754_log+0x318>)
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f7fa fd97 	bl	80002a4 <__adddf3>
 8005776:	4642      	mov	r2, r8
 8005778:	464b      	mov	r3, r9
 800577a:	f7fa ff49 	bl	8000610 <__aeabi_dmul>
 800577e:	a35a      	add	r3, pc, #360	@ (adr r3, 80058e8 <__ieee754_log+0x320>)
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f7fa fd8e 	bl	80002a4 <__adddf3>
 8005788:	4642      	mov	r2, r8
 800578a:	464b      	mov	r3, r9
 800578c:	f7fa ff40 	bl	8000610 <__aeabi_dmul>
 8005790:	a357      	add	r3, pc, #348	@ (adr r3, 80058f0 <__ieee754_log+0x328>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa fd85 	bl	80002a4 <__adddf3>
 800579a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800579e:	f7fa ff37 	bl	8000610 <__aeabi_dmul>
 80057a2:	a355      	add	r3, pc, #340	@ (adr r3, 80058f8 <__ieee754_log+0x330>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057ac:	4640      	mov	r0, r8
 80057ae:	4649      	mov	r1, r9
 80057b0:	f7fa ff2e 	bl	8000610 <__aeabi_dmul>
 80057b4:	a352      	add	r3, pc, #328	@ (adr r3, 8005900 <__ieee754_log+0x338>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f7fa fd73 	bl	80002a4 <__adddf3>
 80057be:	4642      	mov	r2, r8
 80057c0:	464b      	mov	r3, r9
 80057c2:	f7fa ff25 	bl	8000610 <__aeabi_dmul>
 80057c6:	a350      	add	r3, pc, #320	@ (adr r3, 8005908 <__ieee754_log+0x340>)
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fa fd6a 	bl	80002a4 <__adddf3>
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	f7fa ff1c 	bl	8000610 <__aeabi_dmul>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057e0:	f7fa fd60 	bl	80002a4 <__adddf3>
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	4680      	mov	r8, r0
 80057e8:	4689      	mov	r9, r1
 80057ea:	dd48      	ble.n	800587e <__ieee754_log+0x2b6>
 80057ec:	2200      	movs	r2, #0
 80057ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005928 <__ieee754_log+0x360>)
 80057f0:	4650      	mov	r0, sl
 80057f2:	4659      	mov	r1, fp
 80057f4:	f7fa ff0c 	bl	8000610 <__aeabi_dmul>
 80057f8:	4652      	mov	r2, sl
 80057fa:	465b      	mov	r3, fp
 80057fc:	f7fa ff08 	bl	8000610 <__aeabi_dmul>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4606      	mov	r6, r0
 8005806:	460f      	mov	r7, r1
 8005808:	4640      	mov	r0, r8
 800580a:	4649      	mov	r1, r9
 800580c:	f7fa fd4a 	bl	80002a4 <__adddf3>
 8005810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005814:	f7fa fefc 	bl	8000610 <__aeabi_dmul>
 8005818:	4680      	mov	r8, r0
 800581a:	4689      	mov	r9, r1
 800581c:	b964      	cbnz	r4, 8005838 <__ieee754_log+0x270>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4630      	mov	r0, r6
 8005824:	4639      	mov	r1, r7
 8005826:	f7fa fd3b 	bl	80002a0 <__aeabi_dsub>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4650      	mov	r0, sl
 8005830:	4659      	mov	r1, fp
 8005832:	f7fa fd35 	bl	80002a0 <__aeabi_dsub>
 8005836:	e6db      	b.n	80055f0 <__ieee754_log+0x28>
 8005838:	a321      	add	r3, pc, #132	@ (adr r3, 80058c0 <__ieee754_log+0x2f8>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005842:	f7fa fee5 	bl	8000610 <__aeabi_dmul>
 8005846:	4604      	mov	r4, r0
 8005848:	460d      	mov	r5, r1
 800584a:	a31f      	add	r3, pc, #124	@ (adr r3, 80058c8 <__ieee754_log+0x300>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005854:	f7fa fedc 	bl	8000610 <__aeabi_dmul>
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	f7fa fd22 	bl	80002a4 <__adddf3>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4630      	mov	r0, r6
 8005866:	4639      	mov	r1, r7
 8005868:	f7fa fd1a 	bl	80002a0 <__aeabi_dsub>
 800586c:	4652      	mov	r2, sl
 800586e:	465b      	mov	r3, fp
 8005870:	f7fa fd16 	bl	80002a0 <__aeabi_dsub>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4620      	mov	r0, r4
 800587a:	4629      	mov	r1, r5
 800587c:	e7d9      	b.n	8005832 <__ieee754_log+0x26a>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4650      	mov	r0, sl
 8005884:	4659      	mov	r1, fp
 8005886:	f7fa fd0b 	bl	80002a0 <__aeabi_dsub>
 800588a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800588e:	f7fa febf 	bl	8000610 <__aeabi_dmul>
 8005892:	4606      	mov	r6, r0
 8005894:	460f      	mov	r7, r1
 8005896:	2c00      	cmp	r4, #0
 8005898:	f43f af25 	beq.w	80056e6 <__ieee754_log+0x11e>
 800589c:	a308      	add	r3, pc, #32	@ (adr r3, 80058c0 <__ieee754_log+0x2f8>)
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058a6:	f7fa feb3 	bl	8000610 <__aeabi_dmul>
 80058aa:	4604      	mov	r4, r0
 80058ac:	460d      	mov	r5, r1
 80058ae:	a306      	add	r3, pc, #24	@ (adr r3, 80058c8 <__ieee754_log+0x300>)
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058b8:	e729      	b.n	800570e <__ieee754_log+0x146>
 80058ba:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 8005910 <__ieee754_log+0x348>
 80058be:	e699      	b.n	80055f4 <__ieee754_log+0x2c>
 80058c0:	fee00000 	.word	0xfee00000
 80058c4:	3fe62e42 	.word	0x3fe62e42
 80058c8:	35793c76 	.word	0x35793c76
 80058cc:	3dea39ef 	.word	0x3dea39ef
 80058d0:	55555555 	.word	0x55555555
 80058d4:	3fd55555 	.word	0x3fd55555
 80058d8:	df3e5244 	.word	0xdf3e5244
 80058dc:	3fc2f112 	.word	0x3fc2f112
 80058e0:	96cb03de 	.word	0x96cb03de
 80058e4:	3fc74664 	.word	0x3fc74664
 80058e8:	94229359 	.word	0x94229359
 80058ec:	3fd24924 	.word	0x3fd24924
 80058f0:	55555593 	.word	0x55555593
 80058f4:	3fe55555 	.word	0x3fe55555
 80058f8:	d078c69f 	.word	0xd078c69f
 80058fc:	3fc39a09 	.word	0x3fc39a09
 8005900:	1d8e78af 	.word	0x1d8e78af
 8005904:	3fcc71c5 	.word	0x3fcc71c5
 8005908:	9997fa04 	.word	0x9997fa04
 800590c:	3fd99999 	.word	0x3fd99999
	...
 8005918:	c3500000 	.word	0xc3500000
 800591c:	43500000 	.word	0x43500000
 8005920:	7fefffff 	.word	0x7fefffff
 8005924:	3ff00000 	.word	0x3ff00000
 8005928:	3fe00000 	.word	0x3fe00000

0800592c <_init>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr

08005938 <_fini>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr
